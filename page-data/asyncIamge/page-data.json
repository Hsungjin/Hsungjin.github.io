{"componentChunkName":"component---src-templates-blog-template-js","path":"/asyncIamge/","result":{"data":{"cur":{"id":"c799c317-1990-579a-b69e-3d67db26b432","html":"<h2 id=\"들어가기-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기 앞서</h2>\n<p>Xcode 프로젝트 Assert에 이미지를 추가하여 이미지를 로드하는 경우도 있지만, 네트워킹을 통해 웹의 이미지를 로드하는 경우는 일일이 이미지를 저장하여 불러오는 것이 불가능하다.</p>\n<p>이때 Kingfisher 또는 Async Image 를 사용하면 웹 이미지를 보여줄 수 있다.</p>\n<p>Async Image는 SwiftUI가 iOS 15부터 제공하는 새로운 기능으로, URL에서 이미지를 비동기적으로 로드하고 캐시하는 역할을 합니다.</p>\n<p>이로 인해 이미지 로딩 및 표시가 더욱 원활하고 성능이 향상됩니다.</p>\n<p>Kingfisher는 Swift 기반의 이미지 다운로딩 및 캐싱 라이브러리로, UIKit 및 SwiftUI에서 사용할 수 있습니다.</p>\n<p>Kingfisher를 사용하면 더 많은 커스터마이제이션과 기능을 활용할 수 있습니다.</p>\n<p><br><br></p>\n<h2 id=\"asyncimage\" style=\"position:relative;\"><a href=\"#asyncimage\" aria-label=\"asyncimage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AsyncImage</h2>\n<p>이미지를 비동기적으로 로드하고 표시하는 뷰입니다.</p>\n<p>Async Image는 SwiftUI에서 도입된 이미지 로딩 및 표시를 위한 내장된 컴포넌트입니다.</p>\n<p>이를 사용하면 이미지를 비동기적으로 로드하고 캐싱하여 효율적으로 처리할 수 있습니다.</p>\n<p><br><br></p>\n<h3 id=\"asyncimage-예제\" style=\"position:relative;\"><a href=\"#asyncimage-%EC%98%88%EC%A0%9C\" aria-label=\"asyncimage 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AsyncImage 예제</h3>\n<h4 id=\"기본적인-사용-방법\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-label=\"기본적인 사용 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본적인 사용 방법</h4>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    <span class=\"token keyword\">var</span> imageURL <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://avatars.githubusercontent.com/u/120264964?v=4\"</span></span>\n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AsyncImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> heith<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>사용 결과 입니다.</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/4d2cf751-9068-4471-b37b-4664dc149397\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/41e7f4bf-3368-49b9-8f28-c31b3d61e507\">\n</p>\n<p>이미지가 로드될 때까지 뷰에는 사용 가능한 공간을 채우는 표준 자리 표시자가 표시됩니다.</p>\n<p>로드가 성공적으로 완료되면 보기가 업데이트되어 이미지가 표시됩니다.</p>\n<p>위의 예에서 이미지는 프레임보다 크므로 자리 표시자보다 크게 나타납니다.</p>\n<p>여기서 주의해야 할 점은 AsyncImage 에 프레임으로 크기를 설정해 주어도 이미지가 로드되기 이전의 뷰에만 사용이 가능하고 이미지에는 적용이 불가능 합니다.</p>\n<p>이것을 해결하고 이미지 관련 modifier 또한 적용하기 위해선 아래와 같이 사용해 주어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    <span class=\"token keyword\">var</span> imageURL <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://avatars.githubusercontent.com/u/120264964?v=4\"</span></span>\n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AsyncImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> image <span class=\"token keyword\">in</span>\n            image<span class=\"token punctuation\">.</span><span class=\"token function\">resizable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> placeholder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ProgressView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>다음과 같이 placeholder를 사용하면 이미지가 로드 되기전에 ProgressView가 나타난 후에 이미지가 나타나게 됩니다.</p>\n<p>그러면 에러를 처리하거나 하면 어떻게 해야될까요?</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">\n<span class=\"token comment\">// 조건문을 사용한 에러처리 방법</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    <span class=\"token keyword\">var</span> imageURL <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://avatars.githubusercontent.com/u/120264964?v=4\"</span></span>\n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AsyncImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> phase <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> image <span class=\"token operator\">=</span> phase<span class=\"token punctuation\">.</span>image <span class=\"token punctuation\">{</span>\n                image <span class=\"token comment\">// Displays the loaded image.</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> phase<span class=\"token punctuation\">.</span>error <span class=\"token operator\">!=</span> <span class=\"token nil constant\">nil</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>red <span class=\"token comment\">// Indicates an error.</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>blue <span class=\"token comment\">// Acts as a placeholder.</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// switch case를 이용한 에러처리 방법</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">AsyncImageView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> imageURL <span class=\"token operator\">=</span>  <span class=\"token string-literal\"><span class=\"token string\">\"https://avatars.githubusercontent.com/u/120264964?v=4\"</span></span>\n    \n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AsyncImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> phase <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">switch</span> phase <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">:</span>\n                <span class=\"token class-name\">ProgressView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                image\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">resizable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">scaledToFit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span>systemName<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"exclamationmark.icloud\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token attribute atrule\">@unknown</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                <span class=\"token class-name\">EmptyView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>다음과 같이 사용하면 에러 처리를 해 줄 수 있습니다.</p>\n<p><br><br></p>\n<h2 id=\"kingfisher\" style=\"position:relative;\"><a href=\"#kingfisher\" aria-label=\"kingfisher permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KingFisher</h2>\n<p>Kingfisher는 이미지 다운로드와 캐싱을 용이하게 만드는 강력한 라이브러리로, URL 기반의 이미지 로딩, 캐싱, 프리로딩 및 다양한 이미지 처리 옵션을 제공합니다.</p>\n<p>Kingfisher 공식 문서에서 제공하는 특징으로는</p>\n<ul>\n<li>\n<p>비동기 이미지 다운로드 및 캐싱.</p>\n</li>\n<li>\n<p>URLSession기반 네트워킹 또는 로컬 제공 데이터 에서 이미지를 로드합니다.</p>\n</li>\n<li>\n<p>유용한 이미지 프로세서와 필터가 제공됩니다.</p>\n</li>\n<li>\n<p>메모리와 디스크 모두를 위한 다중 계층 하이브리드 캐시.</p>\n</li>\n<li>\n<p>캐시 동작을 미세하게 제어합니다. 만료 날짜 및 크기 제한을 사용자 정의할 수 있습니다.</p>\n</li>\n<li>\n<p>성능 향상을 위해 다운로드를 취소하고 이전에 다운로드한 콘텐츠를 자동으로 재사용합니다.</p>\n</li>\n<li>\n<p>독립 구성 요소. 필요에 따라 다운로더, 캐싱 시스템, 이미지 프로세서를 별도로 사용하세요.</p>\n</li>\n<li>\n<p>이미지를 미리 가져오고 캐시에서 표시하여 앱을 강화합니다.</p>\n</li>\n<li>\n<p>UIImageView, NSImageView, NSButton, UIButton, NSTextAttachment, WKInterfaceImage, TVMonogramView및 CPListItemURL에서 이미지를 직접 설정하는 확장자입니다.</p>\n</li>\n<li>\n<p>이미지 설정 시 내장된 전환 애니메이션.</p>\n</li>\n<li>\n<p>이미지를 로드하는 동안 사용자 정의 가능한 자리 표시자 및 표시기.</p>\n</li>\n<li>\n<p>이미지 처리 및 이미지 포맷을 쉽게 확장할 수 있습니다.</p>\n</li>\n<li>\n<p>저데이터 모드 지원.</p>\n</li>\n<li>\n<p>SwiftUI 지원.</p>\n</li>\n</ul>\n<p><br><br></p>\n<h3 id=\"설치\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치</h3>\n<p>cocoapod</p>\n<blockquote>\n<p>pod ‘Kingfisher’</p>\n</blockquote>\n<p>swift package</p>\n<blockquote>\n<p><a href=\"https://github.com/onevcat/Kingfisher.git\">https://github.com/onevcat/Kingfisher.git</a></p>\n</blockquote>\n<p><br><br></p>\n<h3 id=\"간단-사용-예제\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%A0%9C\" aria-label=\"간단 사용 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단 사용 예제</h3>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">Kingfisher</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">KingFisher</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    <span class=\"token keyword\">let</span> imageURL <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://avatars.githubusercontent.com/u/120264964?v=4\"</span></span>\n    \n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">KFImage</span><span class=\"token punctuation\">(</span><span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>kingfisher를 사용하면 바로 이미지에 Modifier를 사용할 수 있습니다.</p>\n<p>그러면 오류를 처리하기 위해선 어떻게 해야 할 까요?</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">KingFisher</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    <span class=\"token keyword\">let</span> imageURL <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://avatars.githubusercontent.com/u/120264964?v=4\"</span></span>\n    \n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"KingFisher\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token class-name\">KFImage</span><span class=\"token punctuation\">(</span><span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token keyword\">in</span>\n                    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Error : </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">error</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">resizable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>다음과 같이 사용하면 오류 처리를 할 수 있습니다.</p>\n<p>Kingfisher 에서는 우리가 일반적으로 사용하는 Modifier 외에도 일부 다른 Modifier도 사용가능 합니다.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">    <span class=\"token class-name\">KFImage</span><span class=\"token punctuation\">(</span><span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>placeholder <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Placeholder while downloading.</span>\n            <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span>systemName<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"arrow.2.circlepath.circle\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">font</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>largeTitle<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">opacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">retry</span><span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> interval<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>onSuccess <span class=\"token punctuation\">{</span> r <span class=\"token keyword\">in</span>\n            <span class=\"token comment\">// r: RetrieveImageResult</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"success: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">r</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>onFailure <span class=\"token punctuation\">{</span> e <span class=\"token keyword\">in</span>\n            <span class=\"token comment\">// e: KingfisherError</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"failure: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">e</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>또한 리스트에 넣어서 관리 할 수도 있습니다.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token class-name\">List</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ForEach</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">..&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> i <span class=\"token keyword\">in</span>\n        <span class=\"token class-name\">KFImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>urls<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">cancelOnDisappear</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<h2 id=\"그래서-두개가-뭐가-다를까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%91%90%EA%B0%9C%EA%B0%80-%EB%AD%90%EA%B0%80-%EB%8B%A4%EB%A5%BC%EA%B9%8C\" aria-label=\"그래서 두개가 뭐가 다를까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 두개가 뭐가 다를까?</h2>\n<ol>\n<li>\n<p>캐싱: Kingfisher는 이미지 캐싱에 있어서 매우 강력합니다. 디스크 및 메모리 캐싱을 지원하며, 맞춤 설정도 가능합니다. 반면, AsyncImage는 기본적인 캐싱만 제공합니다.</p>\n</li>\n<li>\n<p>이미지 처리 및 변환: Kingfisher는 이미지를 로드하기 전이나 후에 다양한 처리를 할 수 있는 옵션을 제공합니다. AsyncImage는 이러한 추가 기능이 없습니다.</p>\n</li>\n<li>\n<p>UI 커스터마이징: AsyncImage는 로딩 및 에러 상태에 대한 간단한 커스터마이징을 제공하지만, Kingfisher는 더 많은 커스터마이징 옵션을 제공합니다.</p>\n</li>\n<li>\n<p>성능: AsyncImage는 시스템에 통합되어 있어 빠른 성능을 제공합니다. 하지만 Kingfisher는 고급 기능을 많이 사용할수록 성능이 다소 떨어질 수 있습니다.</p>\n</li>\n</ol>\n<p><br><br></p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<ul>\n<li>\n<p>간단한 사용 목적이라면 AsyncImage가 적합할 수 있습니다.</p>\n</li>\n<li>\n<p>복잡하거나 고급 기능이 필요한 경우 Kingfisher가 더 나은 선택일 수 있습니다.</p>\n</li>\n</ul>\n<p><br><br></p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://github.com/onevcat/Kingfisher/wiki/SwiftUI-Support\">Kingfisher 공식문서</a>\n<a href=\"https://developer.apple.com/documentation/swiftui/asyncimage\">Apple async Image 공식문서</a></p>\n<p><br><br></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\">들어가기 앞서</a></p>\n</li>\n<li>\n<p><a href=\"#asyncimage\">AsyncImage</a></p>\n<ul>\n<li>\n<p><a href=\"#asyncimage-%EC%98%88%EC%A0%9C\">AsyncImage 예제</a></p>\n<ul>\n<li><a href=\"#%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\">기본적인 사용 방법</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#kingfisher\">KingFisher</a></p>\n<ul>\n<li><a href=\"#%EC%84%A4%EC%B9%98\">설치</a></li>\n<li><a href=\"#%EA%B0%84%EB%8B%A8-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%A0%9C\">간단 사용 예제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%91%90%EA%B0%9C%EA%B0%80-%EB%AD%90%EA%B0%80-%EB%8B%A4%EB%A5%BC%EA%B9%8C\">그래서 두개가 뭐가 다를까?</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","excerpt":"들어가기 앞서 Xcode 프로젝트 Assert에 이미지를 추가하여 이미지를 로드하는 경우도 있지만, 네트워킹을 통해 웹의 이미지를 로드하는 경우는 일일이 이미지를 저장하여 불러오는 것이 불가능하다. 이때 Kingfisher 또는 Async Image 를 사용하면 웹 이미지를 보여줄 수 있다. Async Image는 SwiftUI가 iOS 15부터 제공하는 새로운 기능으로, URL에서 이미지를 비동기적으로 로드하고 캐시하는 역할을 합니다. 이로 인해 이미지 로딩 및 표시가 더욱 원활하고 성능이 향상됩니다. Kingfisher는 Swift 기반의 이미지 다운로딩 및 캐싱 라이브러리로, UIKit 및 SwiftUI에서 사용할 수 있습니다. Kingfisher를 사용하면 더 많은 커스터마이제이션과 기능을 활용할 수 있습니다.  AsyncImage 이미지를 비동기적으로 로드하고 표시하는 뷰입니다. Async Image는 SwiftUI에서 도입된 이미지 로딩 및 표시를 위한 내장된 컴포넌트입…","frontmatter":{"date":"January 23, 2024","title":"SwiftUI KingFisher 와 Async Image 사용 비교","categories":"Swift","author":"황성진","emoji":"🙃"},"fields":{"slug":"/asyncIamge/"}},"next":{"id":"b5e45c8d-9571-5978-b03e-49d282544572","html":"<h2 id=\"들어가기-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기 앞서</h2>\n<p>해당 제네릭에 대해 작성된 내용은 야곰님의 스위프트 프로그래밍: Swift 5 책의 내용을 제가 이해할 부분과 추가로 알아간 내용에 대해 정리했습니다.</p>\n<p><br><br></p>\n<h2 id=\"generic에-이란\" style=\"position:relative;\"><a href=\"#generic%EC%97%90-%EC%9D%B4%EB%9E%80\" aria-label=\"generic에 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic에 이란?</h2>\n<p>Swift에서 제공하는 강력한 기능 중 하나로 제네릭을 이용해 코드를 구현하면 어떤 타입에도 유연하게 대응할 수 있습니다.</p>\n<p>또한 제네릭으로 구현한 기능과 타입은 재사용하기도 쉽고, 코드의 중복을 줄 일 수 있습니다.</p>\n<p><strong>야곰님의 책에 언급된 내용에 따르면 수많은 라이브러리에서 제네릭을 채택하고있다고 합니다!</strong></p>\n<p>제네릭은 기본적으로 타입 또는 메서드의 이름 뒤의 홀화살괄호 기호 &#x3C;> 사이에 제네릭을 위한 타입 매개 변수를 써주어 제네릭을 사용할 것임을 표시합니다.</p>\n<blockquote>\n<p>제네릭을 사용하고자 하는 타입 이름 &#x3C;타입 매개변수> <br>\n제네릭을 사용하고자 하는 함수 이름 &#x3C;타입 매개변수> (함수 매개변수…)</p>\n</blockquote>\n<p><br><br></p>\n<h2 id=\"generic의-중요성\" style=\"position:relative;\"><a href=\"#generic%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1\" aria-label=\"generic의 중요성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic의 중요성</h2>\n<ol>\n<li>\n<p>타입 안전성: 제네릭을 사용하면 다양한 타입에 대해 동일한 작업을 수행할 수 있으면서도 타입 안전성을 유지할 수 있습니다.</p>\n</li>\n<li>\n<p>재사용성: 한 번 정의한 제네릭 코드는 다양한 타입에 대해 재사용할 수 있어 코드 중복을 줄일 수 있습니다.</p>\n</li>\n<li>\n<p>유연성: 제네릭을 사용하면 특정 타입에 국한되지 않고 여러 타입에 대해 유연하게 함수나 클래스를 사용할 수 있습니다.</p>\n</li>\n</ol>\n<p><br><br></p>\n<h2 id=\"generic-타입의-제약-조건-설정-방법\" style=\"position:relative;\"><a href=\"#generic-%ED%83%80%EC%9E%85%EC%9D%98-%EC%A0%9C%EC%95%BD-%EC%A1%B0%EA%B1%B4-%EC%84%A4%EC%A0%95-%EB%B0%A9%EB%B2%95\" aria-label=\"generic 타입의 제약 조건 설정 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic 타입의 제약 조건 설정 방법</h2>\n<p>Swift에서 제네릭 타입에 제약 조건을 설정하는 것은 해당 타입이 특정 프로토콜을 준수하거나 특정 클래스를 상속받아야 함을 의미합니다.</p>\n<p>이를 통해 제네릭 함수나 클래스 내부에서 타입의 특정 속성이나 메소드를 안전하게 사용할 수 있습니다.</p>\n<p>예를 들어, Comparable 프로토콜을 준수하는 타입에 대해서만 작동하는 함수를 작성하려면 다음과 같이 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">compareTwoValues</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Comparable</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> value1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token omit keyword\">_</span> value2<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value1 <span class=\"token operator\">&lt;</span> value2\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>T는 Comparable을 준수해야 하므로 &#x3C;, >, == 등의 비교 연산자를 사용할 수 있습니다.</p>\n<p><br><br></p>\n<h2 id=\"generic-사용해보기\" style=\"position:relative;\"><a href=\"#generic-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"generic 사용해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic 사용해보기</h2>\n<p>제네릭의 기본적인 사용 방법을 코드 예시와 함께 살펴보겠습니다.</p>\n<br>\n<h3 id=\"전위-연산자\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%9C%84-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"전위 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전위 연산자</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 연산자를 구현하기 위해 미리 선언</span>\n<span class=\"token keyword\">prefix</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">**</span>\n\n<span class=\"token comment\">// 제곱을 수행하는 연산자를 정의</span>\n<span class=\"token keyword\">prefix</span> <span class=\"token keyword\">func</span> <span class=\"token operator\">**</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">*</span> value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> minusFive<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span>\n<span class=\"token keyword\">let</span> sqrtMinusFive<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">**</span>minusFive\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sqrtMinusFive<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 25</span>\n</code></pre></div>\n<p>위의 코드와 같이 일반적인 방법으로 구현했을때는 Int 타입에서만 사용자 정의 연산자를 사용할 수 있습니다. UInt 타입에서 Int 타입에 구현해준 사용자 정의 연산자를 사용하지 못합니다.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 연산자를 구현하기 위해 미리 선언</span>\n<span class=\"token keyword\">prefix</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">**</span>\n\n<span class=\"token comment\">// 제곱을 수행하는 연산자를 정의</span>\n<span class=\"token keyword\">prefix</span> <span class=\"token keyword\">func</span> <span class=\"token operator\">**</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UInt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">UInt</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">*</span> value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token class-name\">Five</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">UInt</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">let</span> sqrtFive<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UInt</span> <span class=\"token operator\">=</span> <span class=\"token operator\">**</span><span class=\"token class-name\">Five</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sqrtFive<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 25</span>\n</code></pre></div>\n<br>\n<p>UInt 타입으로 사용하기 위해선 다음과 같이 코드를 전체적으로 수정해 줘야하는 번거로움이 생깁니다.</p>\n<p>따라서 제네릭을 사용하면 다음과 같이 코드의 수정 없이 사용 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 연산자를 구현하기 위해 미리 선언</span>\n<span class=\"token keyword\">prefix</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">**</span>\n\n<span class=\"token comment\">// BinaryInteger - 정수 타입 프로토콜</span>\n<span class=\"token comment\">// 프로토콜이 해당값이면 연산을 수행</span>\n<span class=\"token keyword\">prefix</span> <span class=\"token keyword\">func</span> <span class=\"token operator\">**</span> <span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">BinaryInteger</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">*</span> value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> minusFive<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span>\n<span class=\"token keyword\">let</span> five<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UInt</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token keyword\">let</span> sqrtMinus<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">**</span>minusFive\n<span class=\"token keyword\">let</span> sqrtFive<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UInt</span> <span class=\"token operator\">=</span> <span class=\"token operator\">**</span>five\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sqrtMinus<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 25</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sqrtFive<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 25</span>\n</code></pre></div>\n<br>\n<p>위의 코드는 이전에 구현한 전위 연산자에 대해 제네릭으로 방식을 변환했습니다.</p>\n<p>프로토콜과 제네릭이라는 스위프트의 훌륭한 기능을 조합하여 정수타입 프로토콜(BinaryInteger) 일 경우 해당 연산자를 사용할 수 있도록 구현하였습니다.</p>\n<p><br><br></p>\n<h3 id=\"두개의-값을-바꿔주는-함수\" style=\"position:relative;\"><a href=\"#%EB%91%90%EA%B0%9C%EC%9D%98-%EA%B0%92%EC%9D%84-%EB%B0%94%EA%BF%94%EC%A3%BC%EB%8A%94-%ED%95%A8%EC%88%98\" aria-label=\"두개의 값을 바꿔주는 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두개의 값을 바꿔주는 함수</h3>\n<p>다음은 제네릭을 사용했을때와 사용하지 않았을때의 형변환 함수에 대해 코드를 통해 알아보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">swapToInts</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> temp<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> a\n    a <span class=\"token operator\">=</span> b\n    b <span class=\"token operator\">=</span> temp\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> numberOne<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">var</span> numberTwo<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n<span class=\"token function\">swapToInts</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>numberOne<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>numberTwo<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">numberOne</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">numberTwo</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10 5</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">swapToStrings</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> temp<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> a\n    a <span class=\"token operator\">=</span> b\n    b <span class=\"token operator\">=</span> temp\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> stringOne<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span>\n<span class=\"token keyword\">var</span> stringTwo<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span>\n\n<span class=\"token function\">swapToStrings</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>stringOne<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>stringTwo<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">stringOne</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">stringTwo</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// B A</span>\n</code></pre></div>\n<p>위의 코드들은 평소에 우리가 자주 접하는 방식으로 만들어진 변수 두개의 값을 변경하는 함수 입니다.</p>\n<p>이것을 제네릭 형식으로 바꿔보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">swapTwoValues</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> temp<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">=</span> a\n    a <span class=\"token operator\">=</span> b\n    b <span class=\"token operator\">=</span> a\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">swapTwoValues</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>numberOne<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>numberTwo<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10 5</span>\n<span class=\"token function\">swapTwoValues</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>stringOne<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>stringTwo<span class=\"token punctuation\">)</span> <span class=\"token comment\">// B A</span>\n</code></pre></div>\n<p>다음과 같이 변경해주면 T에 Int 타입이 들어와도, String 타입이 들어와도 값을 오류 없이 변경해 줄 수 있습니다.</p>\n<p><br><br></p>\n<h3 id=\"what-is-t\" style=\"position:relative;\"><a href=\"#what-is-t\" aria-label=\"what is t permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is T?</h3>\n<p>여기서 T는 플레이스 홀더라고 불립니다.</p>\n<p>T는 타입의 종류를 알려주지 않았지만 호출되는 순간 타입이 결정되면서 Int 타입의 변수가 전달 되었다면 Int 가 되고, String 타입의 변수가 전달되었다면 String 타입이 됩니다.</p>\n<p><br><br></p>\n<h3 id=\"그림-요약\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A6%BC-%EC%9A%94%EC%95%BD\" aria-label=\"그림 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그림 요약</h3>\n<p>야곰님 책의 내용입니다.</p>\n<p>이 사진은 보고 저는 제네릭에 대해 좀 더 쉽게 이해할 수 있어 첨부하였습니다.</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/70b53297-8688-40de-9b11-5a3c936f966d\">\n</p>\n<p><br><br></p>\n<h2 id=\"제네릭-타입\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85\" aria-label=\"제네릭 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭 타입</h2>\n<p>제네릭 함수에 이어 제네릭 타입을 구현하여 사용자 정의 구조체, 클래스 연거형 등 어떤 타입과도 연관되어 동작할 수 있습니다.</p>\n<p>Stack이라는 제네릭 컬렉션 타입을 통해 제네릭을 사용했을때와 사용하지 않았을때의 차이를 코드를 통해 알아보겠습니다.</p>\n<p><br><br></p>\n<h3 id=\"일반-구조체\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98-%EA%B5%AC%EC%A1%B0%EC%B2%B4\" aria-label=\"일반 구조체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반 구조체</h3>\n<p>일반적인 방법으로 Stack을 만들어 pop과 push를 통해 배열에 값을 추가하고 삭제하는 구조체를 만들어 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">IntStack</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">push</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> integerStack<span class=\"token punctuation\">:</span> <span class=\"token class-name\">IntStack</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">IntStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nintegerStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>integerStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3]</span>\n\nintegerStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>integerStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3,1]</span>\n\nintegerStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>integerStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3]</span>\n\nintegerStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>integerStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3,2]</span>\n</code></pre></div>\n<br>\n<p>다음과 같이 push 와 pop을 통해 값을 넣고 삭제하는 것을 볼 수 있습니다.</p>\n<p>이 구조체를 제네릭 타입으로 만들어 보겠습니다.</p>\n<p><br><br></p>\n<h3 id=\"제네릭-구조체\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%EA%B5%AC%EC%A1%B0%EC%B2%B4\" aria-label=\"제네릭 구조체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭 구조체</h3>\n<p>구조체를 제네릭 타입으로 만들면 아래 코드와 같이 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">push</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Element</span> <span class=\"token punctuation\">{</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> doubleStack<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ndoubleStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>doubleStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1.0]</span>\n\ndoubleStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>doubleStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1.0, 2.0]</span>\n\ndoubleStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>doubleStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1.0]</span>\n\n<span class=\"token keyword\">var</span> stringStack<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nstringStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>stringStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"A\"]</span>\n\nstringStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>stringStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"A\", \"V\"]</span>\n\nstringStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>stringStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"A\"]</span></code></pre></div>\n<br>\n<p>앞서 봤던 Stack 구조체에는 Int 대신 Element 라는 타입 매게변수를 사용했습니다.</p>\n<p>Stack 인스턴스를 생성할 때 실제로 Element 대신 어떤 타입을 사용할지 명시해주는 방법은 Stack<Type> 처럼 선언해 주면 됩니다.</p>\n<p>doubleStack에서는 Stack<Double> 이라는 타입을 선언해주고 stringStack Stack<String> 이라는 타입을 선언해서 사용해 주었습니다.</p>\n<p><br><br></p>\n<h2 id=\"제네릭과-관련된-성능-문제-해결-방법\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%EC%84%B1%EB%8A%A5-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"제네릭과 관련된 성능 문제 해결 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭과 관련된 성능 문제 해결 방법</h2>\n<ol>\n<li>타입 명확화(Type Erasure): 제네릭을 사용할 때, 컴파일러는 각 타입 인스턴스에 대해 별도의 코드를 생성합니다. 이는 메모리 사용과 실행 시간 측면에서 비효율적일 수 있습니다. 타입 명확화는 이러한 문제를 해결하기 위해 사용되며, 런타임에 타입 정보를 지워 단일 타입으로 처리합니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">substractTwoValue</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 보다는 타입을 명확화 하여사용</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">substractTwoValue</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">BinaryInteger</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<ol start=\"2\">\n<li>프로토콜 지향 프로그래밍: 제네릭 대신 프로토콜을 사용하여 유사한 기능을 구현할 수 있습니다. 프로토콜은 런타임 다형성을 제공하며, 컴파일 시 제네릭보다 더 효율적일 수 있습니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token class-name\">Container</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> count<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">append</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ItemType</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyContainer</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Container</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> items<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Int</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> count<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> items<span class=\"token punctuation\">.</span>count\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">append</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<ol start=\"3\">\n<li>최적화된 자료구조 사용: 특정 작업에 대해 최적화된 자료구조를 사용하여 성능을 향상시킬 수 있습니다. 예를 들어, 대용량 데이터를 다룰 때는 배열 대신 연결 리스트나 해시 테이블을 고려할 수 있습니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> uniqueElements <span class=\"token operator\">=</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 중복 요소 제거</span></code></pre></div>\n<br>\n<ol start=\"4\">\n<li>컴파일러 힌트 제공: 때로는 컴파일러에게 추가 정보를 제공하여 최적화를 돕는 것이 유용할 수 있습니다. 예를 들어, @inlinable 및 @inline(__always) 속성을 사용하여 특정 함수가 인라인 될 수 있도록 할 수 있습니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@inlinable</span>\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">multiplyByTwo</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<ul>\n<li>@inlinable\n<ul>\n<li>\n<p>인라인이란, 메서드 호출을 해당 메서드의 본문으로 대체하는 컴파일러 최적화 방법</p>\n</li>\n<li>\n<p>인라인을 사용하면 오버헤드를 줄일 수 있으므로, 구현부가 간단한 메소드인 것들을 인라인으로 설정하여 오버헤드를 낮추어 컴파일러 최적화를 적용 (단 재귀호출 시 사용하면 더 비효율적)</p>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 일반적인 사용</span>\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">printPlusOne</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"value is </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">number <span class=\"token operator\">+</span> <span class=\"token number\">1</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute atrule\">@inlinable</span>\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">printPlusOne</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"value is </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">number <span class=\"token operator\">+</span> <span class=\"token number\">1</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://search.shopping.naver.com/book/catalog/32436017914?cat_id=50010920&#x26;frm=PBOKPRO&#x26;query=%EC%95%BC%EA%B3%B0+swift&#x26;NaPm=ct%3Dlrdwh4g0%7Cci%3D446939692b6f9d4926afaebf6605d9cf7846fc2c%7Ctr%3Dboknx%7Csn%3D95694%7Chk%3D9f11df0e5bfec7a9ef6daa964a90d7f11381dfaa\">스위프트 프로그래밍: Swift 5</a></p>\n<p><br><br></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\">들어가기 앞서</a></p>\n</li>\n<li>\n<p><a href=\"#generic%EC%97%90-%EC%9D%B4%EB%9E%80\">Generic에 이란?</a></p>\n</li>\n<li>\n<p><a href=\"#generic%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1\">Generic의 중요성</a></p>\n</li>\n<li>\n<p><a href=\"#generic-%ED%83%80%EC%9E%85%EC%9D%98-%EC%A0%9C%EC%95%BD-%EC%A1%B0%EA%B1%B4-%EC%84%A4%EC%A0%95-%EB%B0%A9%EB%B2%95\">Generic 타입의 제약 조건 설정 방법</a></p>\n</li>\n<li>\n<p><a href=\"#generic-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\">Generic 사용해보기</a></p>\n<ul>\n<li><a href=\"#%EC%A0%84%EC%9C%84-%EC%97%B0%EC%82%B0%EC%9E%90\">전위 연산자</a></li>\n<li><a href=\"#%EB%91%90%EA%B0%9C%EC%9D%98-%EA%B0%92%EC%9D%84-%EB%B0%94%EA%BF%94%EC%A3%BC%EB%8A%94-%ED%95%A8%EC%88%98\">두개의 값을 바꿔주는 함수</a></li>\n<li><a href=\"#what-is-t\">What is T?</a></li>\n<li><a href=\"#%EA%B7%B8%EB%A6%BC-%EC%9A%94%EC%95%BD\">그림 요약</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85\">제네릭 타입</a></p>\n<ul>\n<li><a href=\"#%EC%9D%BC%EB%B0%98-%EA%B5%AC%EC%A1%B0%EC%B2%B4\">일반 구조체</a></li>\n<li><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%EA%B5%AC%EC%A1%B0%EC%B2%B4\">제네릭 구조체</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%EC%84%B1%EB%8A%A5-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\">제네릭과 관련된 성능 문제 해결 방법</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 15, 2024","title":"Swift Generic에 대서","categories":"Swift","author":"황성진","emoji":"🙃"},"fields":{"slug":"/generics/"}},"prev":{"id":"01f7db59-d847-5402-acf8-25a216220c13","html":"<h2 id=\"들어가기-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기 앞서</h2>\n<p>기존 SwiftUI 로 입문을 한 입장에서 Delegate Pattern 이란 단어가 약간 생소하였다.</p>\n<p>왜 뷰간에 데이터 전달을 하는데 Delegate Pattern을 사용하는거지?</p>\n<p>SwiftUI에선 State, Binding으로 전달하면 되는데? 이런 의문을 갖고 공부를 하기 시작했다.</p>\n<p><br><br></p>\n<h2 id=\"viewcontroller간-데이터를-주고-받는-방식\" style=\"position:relative;\"><a href=\"#viewcontroller%EA%B0%84-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%A3%BC%EA%B3%A0-%EB%B0%9B%EB%8A%94-%EB%B0%A9%EC%8B%9D\" aria-label=\"viewcontroller간 데이터를 주고 받는 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ViewController간 데이터를 주고 받는 방식</h2>\n<p>Swift에선 ViewController간의 데이터를 주고 받는 방법이 여러가지가 있다.</p>\n<ol>\n<li>직접 프로퍼티에 접근</li>\n<li>함수를 통한 접근</li>\n<li>Segue</li>\n<li>Delegate</li>\n<li>Closure</li>\n<li>NotificationCenter</li>\n</ol>\n<p>이렇게 다양한 방법들이 있는데 이번엔 Delegate 에 대해서 공부해보았다.</p>\n<p><br><br></p>\n<h3 id=\"그래서-delegate가-뭘까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-delegate%EA%B0%80-%EB%AD%98%EA%B9%8C\" aria-label=\"그래서 delegate가 뭘까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 Delegate가 뭘까?</h3>\n<p>UIKit에서 가장쉽게 접하는 예제는 UITableView를 구현하기 위해서 UITableViewDateSource와 UITableViewDelegate를 채택하여 사용한다.</p>\n<p>근데 막상 사용하는 입장에서 이것에 대해 정의하는것은 쉽지 않다.</p>\n<p>Delegate란 단어는 “위임하다” 라는 사전적 의미를 갖고있다.</p>\n<p>Delegate Pattern 은 위임자를 갖고있는 객체가 다른 객체에게 자신의 일을 위임하는 형태의 디자인 패턴이다.</p>\n<p>아래는 간단한 예제의 입력값을 받는 예제로 FirstViewContoroller 와 SecondViewController 간의 데이터 통신을 알아보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token class-name\">DeveloperEntryDelegate</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">AnyObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">textDeveloperPlatform</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> text<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">textDeveloperLanguage</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> text<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FirstViewController</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIViewController</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token attribute atrule\">@IBOutlet</span> <span class=\"token keyword\">weak</span> <span class=\"token keyword\">var</span> labelPlatformDetails<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UILabel</span><span class=\"token operator\">!</span>\n    <span class=\"token attribute atrule\">@IBOutlet</span> <span class=\"token keyword\">weak</span> <span class=\"token keyword\">var</span> labelDeveloperLanguage<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UILabel</span><span class=\"token operator\">!</span>\n    \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">//MARK: - Navigation</span>\n    <span class=\"token attribute atrule\">@IBAction</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">actionAddDetail</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> sender<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIButton</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">guard</span>  <span class=\"token keyword\">let</span> secondView <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>storyboard<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">instantiateViewController</span><span class=\"token punctuation\">(</span>withIdentifier<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"SecondViewController\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">SecondViewController</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"View Controller not found\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        secondView<span class=\"token punctuation\">.</span>delegate <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span>\n        navigationController<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">pushViewController</span><span class=\"token punctuation\">(</span>secondView<span class=\"token punctuation\">,</span> animated<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">FirstViewController</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">DeveloperEntryDelegate</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">textDeveloperPlatform</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> text<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n        labelPlatformDetails<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Platform: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">text</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">textDeveloperLanguage</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> text<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n        labelDeveloperLanguage<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Language: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">text</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SecondViewController</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIViewController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">weak</span> <span class=\"token keyword\">var</span> delegate<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DeveloperEntryDelegate</span><span class=\"token operator\">?</span>\n    \n    <span class=\"token attribute atrule\">@IBOutlet</span> <span class=\"token keyword\">weak</span> <span class=\"token keyword\">var</span> textPlateform<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UITextField</span><span class=\"token operator\">!</span>\n    <span class=\"token attribute atrule\">@IBOutlet</span> <span class=\"token keyword\">weak</span> <span class=\"token keyword\">var</span> textLanguage<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UITextField</span><span class=\"token operator\">!</span>\n    \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token attribute atrule\">@IBAction</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">actionDone</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> sender<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIButton</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>navigationController<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">popViewController</span><span class=\"token punctuation\">(</span>animated<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>delegate<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">textDeveloperPlatform</span><span class=\"token punctuation\">(</span>textPlateform<span class=\"token punctuation\">.</span>text <span class=\"token operator\">??</span> <span class=\"token string-literal\"><span class=\"token string\">\"\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>delegate<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">textDeveloperLanguage</span><span class=\"token punctuation\">(</span>textLanguage<span class=\"token punctuation\">.</span>text <span class=\"token operator\">??</span> <span class=\"token string-literal\"><span class=\"token string\">\"\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>textDeveloperPlatform 과 textDeveloperLanguage 함수를 갖는 DeveloperEntryDelegate 프로토콜을 선언해준다.\n그리고 delegate 변수를 SecondViewController에서 선언해 주는데 이 변수의 자료형은 DeveloperEntryDelegate 프로토콜로 선언하였다.\n이로써 delegate 변수는 일을 위임할 준비를 마친 것이다.</p>\n<p>actionDone() 메서드에는 Second View에서 버튼이 눌렸을때 delegat 변수를 통해 위임받은 객체에서 textDeveloperPlatform 와 textDeveloperLanguage 를 실행하도록 하였다.</p>\n<p>FirstView의 actionAddDetail 메서드를 만들어 주었고,\nactionAddDetail 메서드에는 SecondView를 찾아서 보여주고, Second View의 delegate 변수와 연결해주는 코드가 있다.</p>\n<p>DeveloperEntryDelegate를 채택한 FirstViewController에는 위임자가 메서드를 호출하였을 때 실행할 함수들에 대해 작성해 주어야 한다.</p>\n<p>이렇게 작성한 함수를 통해 Second View 에서 Done 버튼이 눌러 일을 시키면 First View에서 그 일을 대신 수행하는 것이다.</p>\n<p>여기서 Second View의 위임자는 일을 시키기만 할 뿐이지 어떤 일을 하는지에 대한 구체적인 내용을 모른다.\n이것이 Delegate 패턴의 장점이다.</p>\n<p><br><br></p>\n<h3 id=\"delegate-패턴은-왜-사용해야될까\" style=\"position:relative;\"><a href=\"#delegate-%ED%8C%A8%ED%84%B4%EC%9D%80-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%EB%90%A0%EA%B9%8C\" aria-label=\"delegate 패턴은 왜 사용해야될까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Delegate 패턴은 왜 사용해야될까?</h3>\n<p>위의 예제들에서 위임자들은 그저 일을 시킬 뿐, 일을 어떻게 처리해야하는지는 모른다.\n일을 처리하는 방법은 그 일을 수행하는 객체에 구현되어 있다.\n이미 눈치 챈 사람들도 있겠지만, 이렇게 작성하면 코드를 재사용하고 유지보수하기 쉬워진다.\n어떤 일을 해야 하는지를 정해놓기만 하고, 상황에 맞는 코드를 작성하면 된다.\n예를 들어 우리가 어떤 작업을 처리해야 하는데, 동일한 작업인데도 불구하고 객체마다 다른 내용을 처리해야한다고 생각해보자.\n이럴 경우 동일한 작업에 대해서는 함수를 전달하기만 하고, 각각의 내용은 전달 받은 객체에서 처리하기만 하면 된다.\n또한 작업을 전달할 때 공통된 부분을 제외하고 처리해야 하는 부분만을 전달하여 처리할 수도 있다.</p>\n<p><br><br></p>\n<h3 id=\"델리게이트-옵저버-콜백함수의-비교\" style=\"position:relative;\"><a href=\"#%EB%8D%B8%EB%A6%AC%EA%B2%8C%EC%9D%B4%ED%8A%B8-%EC%98%B5%EC%A0%80%EB%B2%84-%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98%EC%9D%98-%EB%B9%84%EA%B5%90\" aria-label=\"델리게이트 옵저버 콜백함수의 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>델리게이트, 옵저버, 콜백함수의 비교</h3>\n<p>CallBack 함수는 특정 작업이 완료 후 실행되어야 하는 함수이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">fetchData</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">:</span> <span class=\"token attribute atrule\">@escaping</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 비동기로 데이터를 갖고오는 작업 가정</span>\n\n    <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"가져온 데이터\"</span></span>\n    <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nfetchData <span class=\"token punctuation\">{</span> data <span class=\"token keyword\">in</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"받은 데이터: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">data</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<p>옵저버 패턴은 객체의 상태 변화를 관찰하는 관찰자(옵저버) 목록을 객체에 등록한 후, 객체 상태 변화가 있을 때마다 이 관찰자들에게 변화를 알리는 디자인 패턴으로 일대다의 의존성을 가지며, MVC, MVVM 등의 아키텍처에서 상태 관리를 위해 자주 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">NotificationCenter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">:</span> <span class=\"token other-directive property\">#selector</span><span class=\"token punctuation\">(</span><span class=\"token function\">handleNotification</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>someNotification<span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token attribute atrule\">@objc</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">handleNotification</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> notification<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"알림 받음\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">deinit</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">NotificationCenter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Name</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> someNotification <span class=\"token operator\">=</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"someNotification\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 옵저버 생성</span>\n<span class=\"token keyword\">let</span> observer <span class=\"token operator\">=</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 알림 발송</span>\n<span class=\"token class-name\">NotificationCenter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>someNotification<span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<ul>\n<li>\n<p><strong>델리게이트 패턴</strong>은 객체 간의 일대일 커뮤니케이션을 위해, 특정 객체가 다른 객체의 행동을 대신 수행하도록 합니다.</p>\n</li>\n<li>\n<p><strong>콜백 함수</strong>는 비동기 작업의 완료 후 실행되어야 하는 로직을 처리하기 위해 사용되며, 클로저를 통해 구현됩니다.</p>\n</li>\n<li>\n<p><strong>옵저버 패턴</strong>은 하나의 객체가 변경될 때 그 변경 사항을 다수의 객체에게 알리고자 할 때 사용됩니다. 이 패턴은 앱의 다양한 부분에서 낮은 결합도를 유지하면서 효과적인 이벤트 기반 커뮤니케이션을 가능하게 합니다.</p>\n</li>\n</ul>\n<p><br><br></p>\n<h3 id=\"delegate-에서-반환값을-사용하는-경우는\" style=\"position:relative;\"><a href=\"#delegate-%EC%97%90%EC%84%9C-%EB%B0%98%ED%99%98%EA%B0%92%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0%EB%8A%94\" aria-label=\"delegate 에서 반환값을 사용하는 경우는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Delegate 에서 반환값을 사용하는 경우는?</h3>\n<p>UIKit에서 TableView를 생각해보면 쉽게 생각할수 있다.\n만약 MyViewController 라는 ViewController 가 있다고 가정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">MyViewController</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">UITableViewDataSource</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UITableViewDelegate</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// UITableViewDataSource 메소드</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">tableView</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> tableView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UITableView</span><span class=\"token punctuation\">,</span> numberOfRowsInSection section<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 섹션당 행의 개수를 반환</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">10</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">tableView</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> tableView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UITableView</span><span class=\"token punctuation\">,</span> cellForRowAt indexPath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">IndexPath</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">UITableViewCell</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 셀을 생성하고 구성</span>\n        <span class=\"token keyword\">let</span> cell <span class=\"token operator\">=</span> <span class=\"token class-name\">UITableViewCell</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span> reuseIdentifier<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"cell\"</span></span><span class=\"token punctuation\">)</span>\n        cell<span class=\"token punctuation\">.</span>textLabel<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"행 </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">indexPath<span class=\"token punctuation\">.</span>row</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span>\n        <span class=\"token keyword\">return</span> cell\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">tableView</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> tableView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UITableView</span><span class=\"token punctuation\">,</span> heightForRowAt indexPath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">IndexPath</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">CGFloat</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 각 행의 높이를 반환</span>\n        <span class=\"token keyword\">if</span> indexPath<span class=\"token punctuation\">.</span>row <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">50.0</span> <span class=\"token comment\">// 짝수 번째 행은 높이 50</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">100.0</span> <span class=\"token comment\">// 홀수 번째 행은 높이 100</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// UITableViewDelegate 메소드</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">tableView</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> tableView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UITableView</span><span class=\"token punctuation\">,</span> didSelectRowAt indexPath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">IndexPath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Row </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">indexPath<span class=\"token punctuation\">.</span>row</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> 선택됨\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>테이블 뷰는 콘텐츠의 표시와 사용자 인터랙션을 처리하기 위해 델리게이트(UITableViewDelegate)와 데이터 소스(UITableViewDataSource)에 일부 책임을 위임하여 사용한다.</p>\n<p>리턴 값과 같은경우에는 테이블뷰의 각셀의 높이를 조절하기위해 사용한다.</p>\n<p><br><br></p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://velog.io/@nala/iOS-Delegate-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%B4%EB%B3%B4%EC%9E%90\">Delegate 패턴을 이해해보자</a>\n<a href=\"https://velog.io/@zooneon/Delegate-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C\">Delegate 패턴이란 무엇일까?</a>\n<a href=\"https://medium.com/@nimjea/delegation-pattern-in-swift-4-2-f6aca61f4bf5\">Delegation Pattern in Swift</a></p>\n<p><br><br></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\">들어가기 앞서</a></p>\n</li>\n<li>\n<p><a href=\"#viewcontroller%EA%B0%84-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%A3%BC%EA%B3%A0-%EB%B0%9B%EB%8A%94-%EB%B0%A9%EC%8B%9D\">ViewController간 데이터를 주고 받는 방식</a></p>\n<ul>\n<li><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-delegate%EA%B0%80-%EB%AD%98%EA%B9%8C\">그래서 Delegate가 뭘까?</a></li>\n<li><a href=\"#delegate-%ED%8C%A8%ED%84%B4%EC%9D%80-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%EB%90%A0%EA%B9%8C\">Delegate 패턴은 왜 사용해야될까?</a></li>\n<li><a href=\"#%EB%8D%B8%EB%A6%AC%EA%B2%8C%EC%9D%B4%ED%8A%B8-%EC%98%B5%EC%A0%80%EB%B2%84-%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98%EC%9D%98-%EB%B9%84%EA%B5%90\">델리게이트, 옵저버, 콜백함수의 비교</a></li>\n<li><a href=\"#delegate-%EC%97%90%EC%84%9C-%EB%B0%98%ED%99%98%EA%B0%92%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0%EB%8A%94\">Delegate 에서 반환값을 사용하는 경우는?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"March 25, 2024","title":"Swift Delegate Pattern 이란?","categories":"Swift","author":"황성진","emoji":"🙃"},"fields":{"slug":"/delegate/"}},"site":{"siteMetadata":{"siteUrl":"https://hsungjin.github.io","comments":{"utterances":{"repo":"Hsungjin/Hsungjin.github.io"}}}}},"pageContext":{"slug":"/asyncIamge/","nextSlug":"/generics/","prevSlug":"/delegate/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}