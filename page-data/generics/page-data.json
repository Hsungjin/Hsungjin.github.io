{"componentChunkName":"component---src-templates-blog-template-js","path":"/generics/","result":{"data":{"cur":{"id":"b5e45c8d-9571-5978-b03e-49d282544572","html":"<h2 id=\"들어가기-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기 앞서</h2>\n<p>해당 제네릭에 대해 작성된 내용은 야곰님의 스위프트 프로그래밍: Swift 5 책의 내용을 제가 이해할 부분과 추가로 알아간 내용에 대해 정리했습니다.</p>\n<p><br><br></p>\n<h2 id=\"generic에-이란\" style=\"position:relative;\"><a href=\"#generic%EC%97%90-%EC%9D%B4%EB%9E%80\" aria-label=\"generic에 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic에 이란?</h2>\n<p>Swift에서 제공하는 강력한 기능 중 하나로 제네릭을 이용해 코드를 구현하면 어떤 타입에도 유연하게 대응할 수 있습니다.</p>\n<p>또한 제네릭으로 구현한 기능과 타입은 재사용하기도 쉽고, 코드의 중복을 줄 일 수 있습니다.</p>\n<p><strong>야곰님의 책에 언급된 내용에 따르면 수많은 라이브러리에서 제네릭을 채택하고있다고 합니다!</strong></p>\n<p>제네릭은 기본적으로 타입 또는 메서드의 이름 뒤의 홀화살괄호 기호 &#x3C;> 사이에 제네릭을 위한 타입 매개 변수를 써주어 제네릭을 사용할 것임을 표시합니다.</p>\n<blockquote>\n<p>제네릭을 사용하고자 하는 타입 이름 &#x3C;타입 매개변수> <br>\n제네릭을 사용하고자 하는 함수 이름 &#x3C;타입 매개변수> (함수 매개변수…)</p>\n</blockquote>\n<p><br><br></p>\n<h2 id=\"generic의-중요성\" style=\"position:relative;\"><a href=\"#generic%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1\" aria-label=\"generic의 중요성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic의 중요성</h2>\n<ol>\n<li>\n<p>타입 안전성: 제네릭을 사용하면 다양한 타입에 대해 동일한 작업을 수행할 수 있으면서도 타입 안전성을 유지할 수 있습니다.</p>\n</li>\n<li>\n<p>재사용성: 한 번 정의한 제네릭 코드는 다양한 타입에 대해 재사용할 수 있어 코드 중복을 줄일 수 있습니다.</p>\n</li>\n<li>\n<p>유연성: 제네릭을 사용하면 특정 타입에 국한되지 않고 여러 타입에 대해 유연하게 함수나 클래스를 사용할 수 있습니다.</p>\n</li>\n</ol>\n<p><br><br></p>\n<h2 id=\"generic-타입의-제약-조건-설정-방법\" style=\"position:relative;\"><a href=\"#generic-%ED%83%80%EC%9E%85%EC%9D%98-%EC%A0%9C%EC%95%BD-%EC%A1%B0%EA%B1%B4-%EC%84%A4%EC%A0%95-%EB%B0%A9%EB%B2%95\" aria-label=\"generic 타입의 제약 조건 설정 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic 타입의 제약 조건 설정 방법</h2>\n<p>Swift에서 제네릭 타입에 제약 조건을 설정하는 것은 해당 타입이 특정 프로토콜을 준수하거나 특정 클래스를 상속받아야 함을 의미합니다.</p>\n<p>이를 통해 제네릭 함수나 클래스 내부에서 타입의 특정 속성이나 메소드를 안전하게 사용할 수 있습니다.</p>\n<p>예를 들어, Comparable 프로토콜을 준수하는 타입에 대해서만 작동하는 함수를 작성하려면 다음과 같이 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">compareTwoValues</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Comparable</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> value1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token omit keyword\">_</span> value2<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value1 <span class=\"token operator\">&lt;</span> value2\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>T는 Comparable을 준수해야 하므로 &#x3C;, >, == 등의 비교 연산자를 사용할 수 있습니다.</p>\n<p><br><br></p>\n<h2 id=\"generic-사용해보기\" style=\"position:relative;\"><a href=\"#generic-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"generic 사용해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic 사용해보기</h2>\n<p>제네릭의 기본적인 사용 방법을 코드 예시와 함께 살펴보겠습니다.</p>\n<br>\n<h3 id=\"전위-연산자\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%9C%84-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"전위 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전위 연산자</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 연산자를 구현하기 위해 미리 선언</span>\n<span class=\"token keyword\">prefix</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">**</span>\n\n<span class=\"token comment\">// 제곱을 수행하는 연산자를 정의</span>\n<span class=\"token keyword\">prefix</span> <span class=\"token keyword\">func</span> <span class=\"token operator\">**</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">*</span> value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> minusFive<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span>\n<span class=\"token keyword\">let</span> sqrtMinusFive<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">**</span>minusFive\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sqrtMinusFive<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 25</span>\n</code></pre></div>\n<p>위의 코드와 같이 일반적인 방법으로 구현했을때는 Int 타입에서만 사용자 정의 연산자를 사용할 수 있습니다. UInt 타입에서 Int 타입에 구현해준 사용자 정의 연산자를 사용하지 못합니다.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 연산자를 구현하기 위해 미리 선언</span>\n<span class=\"token keyword\">prefix</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">**</span>\n\n<span class=\"token comment\">// 제곱을 수행하는 연산자를 정의</span>\n<span class=\"token keyword\">prefix</span> <span class=\"token keyword\">func</span> <span class=\"token operator\">**</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UInt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">UInt</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">*</span> value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token class-name\">Five</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">UInt</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">let</span> sqrtFive<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UInt</span> <span class=\"token operator\">=</span> <span class=\"token operator\">**</span><span class=\"token class-name\">Five</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sqrtFive<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 25</span>\n</code></pre></div>\n<br>\n<p>UInt 타입으로 사용하기 위해선 다음과 같이 코드를 전체적으로 수정해 줘야하는 번거로움이 생깁니다.</p>\n<p>따라서 제네릭을 사용하면 다음과 같이 코드의 수정 없이 사용 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 연산자를 구현하기 위해 미리 선언</span>\n<span class=\"token keyword\">prefix</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">**</span>\n\n<span class=\"token comment\">// BinaryInteger - 정수 타입 프로토콜</span>\n<span class=\"token comment\">// 프로토콜이 해당값이면 연산을 수행</span>\n<span class=\"token keyword\">prefix</span> <span class=\"token keyword\">func</span> <span class=\"token operator\">**</span> <span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">BinaryInteger</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">*</span> value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> minusFive<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span>\n<span class=\"token keyword\">let</span> five<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UInt</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token keyword\">let</span> sqrtMinus<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">**</span>minusFive\n<span class=\"token keyword\">let</span> sqrtFive<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UInt</span> <span class=\"token operator\">=</span> <span class=\"token operator\">**</span>five\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sqrtMinus<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 25</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sqrtFive<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 25</span>\n</code></pre></div>\n<br>\n<p>위의 코드는 이전에 구현한 전위 연산자에 대해 제네릭으로 방식을 변환했습니다.</p>\n<p>프로토콜과 제네릭이라는 스위프트의 훌륭한 기능을 조합하여 정수타입 프로토콜(BinaryInteger) 일 경우 해당 연산자를 사용할 수 있도록 구현하였습니다.</p>\n<p><br><br></p>\n<h3 id=\"두개의-값을-바꿔주는-함수\" style=\"position:relative;\"><a href=\"#%EB%91%90%EA%B0%9C%EC%9D%98-%EA%B0%92%EC%9D%84-%EB%B0%94%EA%BF%94%EC%A3%BC%EB%8A%94-%ED%95%A8%EC%88%98\" aria-label=\"두개의 값을 바꿔주는 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두개의 값을 바꿔주는 함수</h3>\n<p>다음은 제네릭을 사용했을때와 사용하지 않았을때의 형변환 함수에 대해 코드를 통해 알아보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">swapToInts</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> temp<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> a\n    a <span class=\"token operator\">=</span> b\n    b <span class=\"token operator\">=</span> temp\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> numberOne<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">var</span> numberTwo<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n<span class=\"token function\">swapToInts</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>numberOne<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>numberTwo<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">numberOne</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">numberTwo</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10 5</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">swapToStrings</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> temp<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> a\n    a <span class=\"token operator\">=</span> b\n    b <span class=\"token operator\">=</span> temp\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> stringOne<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span>\n<span class=\"token keyword\">var</span> stringTwo<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span>\n\n<span class=\"token function\">swapToStrings</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>stringOne<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>stringTwo<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">stringOne</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">stringTwo</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// B A</span>\n</code></pre></div>\n<p>위의 코드들은 평소에 우리가 자주 접하는 방식으로 만들어진 변수 두개의 값을 변경하는 함수 입니다.</p>\n<p>이것을 제네릭 형식으로 바꿔보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">swapTwoValues</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> temp<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">=</span> a\n    a <span class=\"token operator\">=</span> b\n    b <span class=\"token operator\">=</span> a\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">swapTwoValues</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>numberOne<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>numberTwo<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10 5</span>\n<span class=\"token function\">swapTwoValues</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>stringOne<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>stringTwo<span class=\"token punctuation\">)</span> <span class=\"token comment\">// B A</span>\n</code></pre></div>\n<p>다음과 같이 변경해주면 T에 Int 타입이 들어와도, String 타입이 들어와도 값을 오류 없이 변경해 줄 수 있습니다.</p>\n<p><br><br></p>\n<h3 id=\"what-is-t\" style=\"position:relative;\"><a href=\"#what-is-t\" aria-label=\"what is t permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is T?</h3>\n<p>여기서 T는 플레이스 홀더라고 불립니다.</p>\n<p>T는 타입의 종류를 알려주지 않았지만 호출되는 순간 타입이 결정되면서 Int 타입의 변수가 전달 되었다면 Int 가 되고, String 타입의 변수가 전달되었다면 String 타입이 됩니다.</p>\n<p><br><br></p>\n<h3 id=\"그림-요약\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A6%BC-%EC%9A%94%EC%95%BD\" aria-label=\"그림 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그림 요약</h3>\n<p>야곰님 책의 내용입니다.</p>\n<p>이 사진은 보고 저는 제네릭에 대해 좀 더 쉽게 이해할 수 있어 첨부하였습니다.</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/70b53297-8688-40de-9b11-5a3c936f966d\">\n</p>\n<p><br><br></p>\n<h2 id=\"제네릭-타입\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85\" aria-label=\"제네릭 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭 타입</h2>\n<p>제네릭 함수에 이어 제네릭 타입을 구현하여 사용자 정의 구조체, 클래스 연거형 등 어떤 타입과도 연관되어 동작할 수 있습니다.</p>\n<p>Stack이라는 제네릭 컬렉션 타입을 통해 제네릭을 사용했을때와 사용하지 않았을때의 차이를 코드를 통해 알아보겠습니다.</p>\n<p><br><br></p>\n<h3 id=\"일반-구조체\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98-%EA%B5%AC%EC%A1%B0%EC%B2%B4\" aria-label=\"일반 구조체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반 구조체</h3>\n<p>일반적인 방법으로 Stack을 만들어 pop과 push를 통해 배열에 값을 추가하고 삭제하는 구조체를 만들어 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">IntStack</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">push</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> integerStack<span class=\"token punctuation\">:</span> <span class=\"token class-name\">IntStack</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">IntStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nintegerStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>integerStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3]</span>\n\nintegerStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>integerStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3,1]</span>\n\nintegerStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>integerStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3]</span>\n\nintegerStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>integerStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3,2]</span>\n</code></pre></div>\n<br>\n<p>다음과 같이 push 와 pop을 통해 값을 넣고 삭제하는 것을 볼 수 있습니다.</p>\n<p>이 구조체를 제네릭 타입으로 만들어 보겠습니다.</p>\n<p><br><br></p>\n<h3 id=\"제네릭-구조체\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%EA%B5%AC%EC%A1%B0%EC%B2%B4\" aria-label=\"제네릭 구조체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭 구조체</h3>\n<p>구조체를 제네릭 타입으로 만들면 아래 코드와 같이 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">push</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Element</span> <span class=\"token punctuation\">{</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> doubleStack<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ndoubleStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>doubleStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1.0]</span>\n\ndoubleStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>doubleStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1.0, 2.0]</span>\n\ndoubleStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>doubleStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1.0]</span>\n\n<span class=\"token keyword\">var</span> stringStack<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nstringStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>stringStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"A\"]</span>\n\nstringStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>stringStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"A\", \"V\"]</span>\n\nstringStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>stringStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"A\"]</span></code></pre></div>\n<br>\n<p>앞서 봤던 Stack 구조체에는 Int 대신 Element 라는 타입 매게변수를 사용했습니다.</p>\n<p>Stack 인스턴스를 생성할 때 실제로 Element 대신 어떤 타입을 사용할지 명시해주는 방법은 Stack<Type> 처럼 선언해 주면 됩니다.</p>\n<p>doubleStack에서는 Stack<Double> 이라는 타입을 선언해주고 stringStack Stack<String> 이라는 타입을 선언해서 사용해 주었습니다.</p>\n<p><br><br></p>\n<h2 id=\"제네릭과-관련된-성능-문제-해결-방법\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%EC%84%B1%EB%8A%A5-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"제네릭과 관련된 성능 문제 해결 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭과 관련된 성능 문제 해결 방법</h2>\n<ol>\n<li>타입 명확화(Type Erasure): 제네릭을 사용할 때, 컴파일러는 각 타입 인스턴스에 대해 별도의 코드를 생성합니다. 이는 메모리 사용과 실행 시간 측면에서 비효율적일 수 있습니다. 타입 명확화는 이러한 문제를 해결하기 위해 사용되며, 런타임에 타입 정보를 지워 단일 타입으로 처리합니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">substractTwoValue</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 보다는 타입을 명확화 하여사용</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">substractTwoValue</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">BinaryInteger</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<ol start=\"2\">\n<li>프로토콜 지향 프로그래밍: 제네릭 대신 프로토콜을 사용하여 유사한 기능을 구현할 수 있습니다. 프로토콜은 런타임 다형성을 제공하며, 컴파일 시 제네릭보다 더 효율적일 수 있습니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token class-name\">Container</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> count<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">append</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ItemType</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyContainer</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Container</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> items<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Int</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> count<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> items<span class=\"token punctuation\">.</span>count\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">append</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<ol start=\"3\">\n<li>최적화된 자료구조 사용: 특정 작업에 대해 최적화된 자료구조를 사용하여 성능을 향상시킬 수 있습니다. 예를 들어, 대용량 데이터를 다룰 때는 배열 대신 연결 리스트나 해시 테이블을 고려할 수 있습니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> uniqueElements <span class=\"token operator\">=</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 중복 요소 제거</span></code></pre></div>\n<br>\n<ol start=\"4\">\n<li>컴파일러 힌트 제공: 때로는 컴파일러에게 추가 정보를 제공하여 최적화를 돕는 것이 유용할 수 있습니다. 예를 들어, @inlinable 및 @inline(__always) 속성을 사용하여 특정 함수가 인라인 될 수 있도록 할 수 있습니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token attribute atrule\">@inlinable</span>\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">multiplyByTwo</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<ul>\n<li>@inlinable\n<ul>\n<li>\n<p>인라인이란, 메서드 호출을 해당 메서드의 본문으로 대체하는 컴파일러 최적화 방법</p>\n</li>\n<li>\n<p>인라인을 사용하면 오버헤드를 줄일 수 있으므로, 구현부가 간단한 메소드인 것들을 인라인으로 설정하여 오버헤드를 낮추어 컴파일러 최적화를 적용 (단 재귀호출 시 사용하면 더 비효율적)</p>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 일반적인 사용</span>\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">printPlusOne</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"value is </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">number <span class=\"token operator\">+</span> <span class=\"token number\">1</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute atrule\">@inlinable</span>\n<span class=\"token keyword\">func</span> <span class=\"token function-definition function\">printPlusOne</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"value is </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">number <span class=\"token operator\">+</span> <span class=\"token number\">1</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://search.shopping.naver.com/book/catalog/32436017914?cat_id=50010920&#x26;frm=PBOKPRO&#x26;query=%EC%95%BC%EA%B3%B0+swift&#x26;NaPm=ct%3Dlrdwh4g0%7Cci%3D446939692b6f9d4926afaebf6605d9cf7846fc2c%7Ctr%3Dboknx%7Csn%3D95694%7Chk%3D9f11df0e5bfec7a9ef6daa964a90d7f11381dfaa\">스위프트 프로그래밍: Swift 5</a></p>\n<p><br><br></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\">들어가기 앞서</a></p>\n</li>\n<li>\n<p><a href=\"#generic%EC%97%90-%EC%9D%B4%EB%9E%80\">Generic에 이란?</a></p>\n</li>\n<li>\n<p><a href=\"#generic%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1\">Generic의 중요성</a></p>\n</li>\n<li>\n<p><a href=\"#generic-%ED%83%80%EC%9E%85%EC%9D%98-%EC%A0%9C%EC%95%BD-%EC%A1%B0%EA%B1%B4-%EC%84%A4%EC%A0%95-%EB%B0%A9%EB%B2%95\">Generic 타입의 제약 조건 설정 방법</a></p>\n</li>\n<li>\n<p><a href=\"#generic-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\">Generic 사용해보기</a></p>\n<ul>\n<li><a href=\"#%EC%A0%84%EC%9C%84-%EC%97%B0%EC%82%B0%EC%9E%90\">전위 연산자</a></li>\n<li><a href=\"#%EB%91%90%EA%B0%9C%EC%9D%98-%EA%B0%92%EC%9D%84-%EB%B0%94%EA%BF%94%EC%A3%BC%EB%8A%94-%ED%95%A8%EC%88%98\">두개의 값을 바꿔주는 함수</a></li>\n<li><a href=\"#what-is-t\">What is T?</a></li>\n<li><a href=\"#%EA%B7%B8%EB%A6%BC-%EC%9A%94%EC%95%BD\">그림 요약</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85\">제네릭 타입</a></p>\n<ul>\n<li><a href=\"#%EC%9D%BC%EB%B0%98-%EA%B5%AC%EC%A1%B0%EC%B2%B4\">일반 구조체</a></li>\n<li><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%EA%B5%AC%EC%A1%B0%EC%B2%B4\">제네릭 구조체</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%EC%84%B1%EB%8A%A5-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\">제네릭과 관련된 성능 문제 해결 방법</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","excerpt":"들어가기 앞서 해당 제네릭에 대해 작성된 내용은 야곰님의 스위프트 프로그래밍: Swift 5 책의 내용을 제가 이해할 부분과 추가로 알아간 내용에 대해 정리했습니다.  Generic에 이란? Swift에서 제공하는 강력한 기능 중 하나로 제네릭을 이용해 코드를 구현하면 어떤 타입에도 유연하게 대응할 수 있습니다. 또한 제네릭으로 구현한 기능과 타입은 재사용하기도 쉽고, 코드의 중복을 줄 일 수 있습니다. 야곰님의 책에 언급된 내용에 따르면 수많은 라이브러리에서 제네릭을 채택하고있다고 합니다! 제네릭은 기본적으로 타입 또는 메서드의 이름 뒤의 홀화살괄호 기호 <> 사이에 제네릭을 위한 타입 매개 변수를 써주어 제네릭을 사용할 것임을 표시합니다. 제네릭을 사용하고자 하는 타입 이름 <타입 매개변수> \n제네릭을 사용하고자 하는 함수 이름 <타입 매개변수> (함수 매개변수…)  Generic의 중요성 타입 안전성: 제네릭을 사용하면 다양한 타입에 대해 동일한 작업을 수행할 수 있으면서도 …","frontmatter":{"date":"January 15, 2024","title":"Swift Generic에 대서","categories":"Swift","author":"황성진","emoji":"🙃"},"fields":{"slug":"/generics/"}},"next":{"id":"b782afdd-f568-5c6b-9779-1d7ad95b39da","html":"<h2 id=\"urlsession-이란\" style=\"position:relative;\"><a href=\"#urlsession-%EC%9D%B4%EB%9E%80\" aria-label=\"urlsession 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URLSession 이란?</h2>\n<p>Swift의 URLSession은 네트워크 작업을 수행하는 데 사용되는 API 중 하나입니다.</p>\n<p>URLSession은 URL을 통해 데이터를 가져오거나 전송하는 기능을 제공하며, 네트워크 요청 및 응답을 처리하는 데 유용합니다.</p>\n<p>URLSession은 비동기적으로 작동하며, 앱의 성능을 향상시키는 데 도움이 됩니다.</p>\n<p>URLSession은 기본적으로 세 가지 주요 작업을 수행합니다:</p>\n<ol>\n<li>\n<p>데이터 가져오기 (Data Fetching): 웹에서 데이터를 가져오는 데 사용됩니다. 주로 GET 요청과 함께 사용됩니다.</p>\n</li>\n<li>\n<p>데이터 전송 (Data Task): 서버에 데이터를 전송하는 데 사용됩니다. 주로 POST 또는 PUT 요청과 함께 사용됩니다.</p>\n</li>\n<li>\n<p>다운로드 작업 (Download Task): 파일이나 큰 데이터를 다운로드할 때 사용됩니다.</p>\n</li>\n</ol>\n<p><br><br></p>\n<h2 id=\"alamofire-란\" style=\"position:relative;\"><a href=\"#alamofire-%EB%9E%80\" aria-label=\"alamofire 란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Alamofire 란?</h2>\n<p>Alamofire는 Swift로 작성된 네트워킹 라이브러리로, URLSession을 기반으로 한 HTTP 요청 및 응답을 쉽게 다룰 수 있게 도와줍니다.</p>\n<p>Alamofire는 간편한 API, 네트워크 작업의 추상화, 자동으로 처리되는 헤더 및 응답의 파싱을 제공하여 개발자들이 네트워크 코드를 더 간편하게 작성할 수 있도록 돕는다는 특징이 있습니다.</p>\n<p>Alamofire의 주요 기능과 예제 코드를 살펴보겠습니다.</p>\n<ol>\n<li>\n<p>간편한 HTTP 요청: Alamofire는 HTTP 메서드(GET, POST, PUT, DELETE 등)에 대한 메서드를 제공하여 간단한 한 줄의 코드로 요청을 생성할 수 있습니다.</p>\n</li>\n<li>\n<p>파라미터 및 헤더 관리: 요청에 필요한 파라미터 및 헤더를 쉽게 추가할 수 있습니다.</p>\n</li>\n<li>\n<p>응답 처리: Alamofire는 응답을 쉽게 처리하고 JSON, String, 이미지 등의 데이터 형식으로 변환할 수 있도록 도와줍니다.</p>\n</li>\n<li>\n<p>업로드 및 다운로드 작업: 파일 업로드, 다운로드 등의 작업도 지원합니다.</p>\n</li>\n<li>\n<p>인증 및 보안: HTTP 기본 및 다이제스트 인증, SSL Pinning 등의 보안 기능을 지원합니다.</p>\n</li>\n</ol>\n<p><br><br></p>\n<h2 id=\"데이터-구조-정의\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EC%A0%95%EC%9D%98\" aria-label=\"데이터 구조 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 구조 정의</h2>\n<p>우선 URLSession 을 사용하거나 Alamofire를 사용해서 서버에서 json 구조의 데이터를 가져오기 위해서는 데이터 구조를 정의해야 됩니다.</p>\n<p><a href=\"https://itunes.apple.com/search?term=taylor+swift&#x26;entity=song\">itunesAPI</a></p>\n<p>데이터 구조는 다음 과 같이 생겼습니다.</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/fa4c0215-7ff7-4afa-8e54-27a51fc562ab\">\n</p>\n<p>처음 Json 구조를 접하신 분들은 무슨소리지 라는 생각이 드실 수 있습니다.</p>\n<p>하지만 구조만 이해하면 안에더 필요한 데이터의 구조를 정의하는 것은 어렵지 않습니다.</p>\n<p>제가 필요한 데이터는 결국 result 라는 배열안의 trackId, artistName, trackName, collectionName, artworkUrl100 이 필요하다고 가정하고 정의해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">Foundation</span>\n\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> result<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> trackId<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span>\n    <span class=\"token keyword\">var</span> artistName<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">var</span> trackName<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">var</span> collectionName<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">var</span> artworkUrl100<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음과 같이 struct를 정의해서 사용 할 수 있습니다.</p>\n<p><br><br></p>\n<h2 id=\"urlsession-사용해보기\" style=\"position:relative;\"><a href=\"#urlsession-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"urlsession 사용해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URLSession 사용해보기</h2>\n<p>위에 정의된 구조를 사용해서 데이터를 파싱해 보겠습니다.</p>\n<h3 id=\"urlsessionmanager\" style=\"position:relative;\"><a href=\"#urlsessionmanager\" aria-label=\"urlsessionmanager permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URLSessionManager</h3>\n<p>URL은 자신이 가져오고 싶은 URL 주소 위에서 정의한 itunes API 주소를 넣어줍니다.</p>\n<p>ObservableObject를 사용해서 다른 뷰에서 해당 데이터에 접근 가능하도록 선언해 주었습니다.</p>\n<p>guard let 구문을 통해 해당 URL 이 정상인지 확인합니다.</p>\n<p>async await를 통해 비동기 통신을 사용합니다.</p>\n<p>통신을 통해 data, meta 데이터를 가져옵니다.</p>\n<p>data 를 JSONDecoder를 통해 파싱합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">URLSessionManager</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ObservableObject</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://itunes.apple.com/search?term=taylor+swift&amp;entity=song\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Invalid URL\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> meta<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token keyword\">await</span> <span class=\"token class-name\">URLSession</span><span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> url<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>meta<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> decodedResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token class-name\">JSONDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Response</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                results <span class=\"token operator\">=</span> decodedResponse<span class=\"token punctuation\">.</span>results\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Invalid data\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<h3 id=\"urlsessionview\" style=\"position:relative;\"><a href=\"#urlsessionview\" aria-label=\"urlsessionview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URLSessionView</h3>\n<p>ObservedObject URLSessionManager를 불러오고 해당 값을 List에 넣어 사용하는 모습 입니다.</p>\n<p>trackId는 id값으로 사용하기 위해 불러와 주었고,</p>\n<p>이미지는 URL 형식으로 전달되기 때문에 AsyncImage 를 사용해 주었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">URLSessionView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    \n    <span class=\"token attribute atrule\">@ObservedObject</span> <span class=\"token keyword\">var</span> urlSessionManager <span class=\"token operator\">=</span> <span class=\"token class-name\">URLSessionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token punctuation\">(</span>urlSessionManager<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">.</span>trackId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> item <span class=\"token keyword\">in</span>\n            \n            <span class=\"token class-name\">HStack</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">AsyncImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>artworkUrl100<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                \n                <span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Tack Name - </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">item<span class=\"token punctuation\">.</span>trackName</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">Divider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"CollectionName - </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">item<span class=\"token punctuation\">.</span>collectionName</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">Divider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Artist - </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">item<span class=\"token punctuation\">.</span>artistName</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">foregroundStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>gray<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>task <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">await</span> urlSessionManager<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>다음과 같은 결과를 볼 수 있습니다.</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/12bc018a-5717-4b39-830f-c118de352149\"> <br>\n</p>\n<p><br><br></p>\n<h2 id=\"alamofire-사용해보기\" style=\"position:relative;\"><a href=\"#alamofire-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"alamofire 사용해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Alamofire 사용해보기</h2>\n<p>다음은 URLSession의 방식과 Alamofire 방식의 차이를 보기 위해서 Alamofire로 똑같은 코드를 만들어 보겠습니다.</p>\n<p>우선 spm 설치를 진행 해 줍니다.</p>\n<p><a href=\"https://tech.kakao.com/2022/06/02/swift-package-manager/\">spm설치 관련 링크</a> 해당 링크를 참고하여 <a href=\"https://github.com/Alamofire/Alamofire\">https://github.com/Alamofire/Alamofire</a> 를 설치해 줍니다.</p>\n<p><br><br></p>\n<h3 id=\"alamofiremanager\" style=\"position:relative;\"><a href=\"#alamofiremanager\" aria-label=\"alamofiremanager permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AlamoFireManager</h3>\n<p>URLSession 때와 똑같이 ObservableObject로 사용해 주었습니다.</p>\n<p>guard let 구문을 통해 url의 유효성 검사를 진행 해 주었습니다.</p>\n<p>async await를 통해 비동기 통신을 사용합니다.</p>\n<p>AF.request 의 url 구문에는 API 통신에 필요한 url을 넣어줍니다.</p>\n<p>method는 get, post, put, delete 등의 메소드가 사용가능합니다.</p>\n<p>파라미터, 헤더를 쉽게 추가 할 수 있습니다.</p>\n<p>validate 를 통해 상태코드가 200~300 사이의 값이면 정상 값으로 간주하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">Alamofire</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AlamoFireManager</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ObservableObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://itunes.apple.com/search?term=taylor+swift&amp;entity=song\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Invalid URL\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token constant\">AF</span><span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>\n                   method<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// HTTP메서드 설정</span>\n                   parameters<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 파라미터 설정</span>\n                   encoding<span class=\"token punctuation\">:</span> <span class=\"token class-name\">URLEncoding</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 인코딩 타입 설정</span>\n                   headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"Content-Type\"</span></span><span class=\"token punctuation\">:</span><span class=\"token string-literal\"><span class=\"token string\">\"application/json\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"Accept\"</span></span><span class=\"token punctuation\">:</span><span class=\"token string-literal\"><span class=\"token string\">\"application/json\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 헤더 설정</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>statusCode<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token operator\">..&lt;</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 유효성 검사</span>\n        <span class=\"token comment\">// responseDecodable을 통해 UserDatas form으로 디코딩, response의 성공 여부에 따라 작업 분기</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">responseDecodable</span> <span class=\"token punctuation\">(</span>of<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> response <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">switch</span> response<span class=\"token punctuation\">.</span>result <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>results <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>results\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<h3 id=\"alamofireview\" style=\"position:relative;\"><a href=\"#alamofireview\" aria-label=\"alamofireview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AlamoFireView</h3>\n<p>URLSessionView 와 마찬가지로 사용해 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">AlamoFireView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    \n    <span class=\"token attribute atrule\">@ObservedObject</span> <span class=\"token keyword\">var</span> alamofireManager <span class=\"token operator\">=</span> <span class=\"token class-name\">AlamoFireManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token punctuation\">(</span>alamofireManager<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">.</span>trackId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> item <span class=\"token keyword\">in</span>\n            \n            <span class=\"token class-name\">HStack</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">AsyncImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>artworkUrl100<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                \n                <span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Tack Name - </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">item<span class=\"token punctuation\">.</span>trackName</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">Divider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"CollectionName - </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">item<span class=\"token punctuation\">.</span>collectionName</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">Divider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Artist - </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">item<span class=\"token punctuation\">.</span>artistName</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">foregroundStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>gray<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>task <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">await</span> alamofireManager<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/12bc018a-5717-4b39-830f-c118de352149\"> <br>\n</p>\n<p>결과는 URLSession과 똑같이 나오는걸 볼 수 있습니다.</p>\n<p><br><br></p>\n<h2 id=\"전체코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4%EC%BD%94%EB%93%9C\" aria-label=\"전체코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체코드</h2>\n<p>위에서 사용된 전체 코드는 Github에서 볼 수 있습니다. <a href=\"https://github.com/Hsungjin/SwiftUI-Study/tree/main/URLSessionAndAlamofire\">github-code</a></p>\n<video width=\"600\" height=\"400\" controls>\n  <source src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/89f11f2f-5616-46c0-b07b-d3b086225186\" type=\"video/mp4\">\n</video>\n<p><br><br></p>\n<h2 id=\"그래서-두개의-차이점이-뭘까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%91%90%EA%B0%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%B4-%EB%AD%98%EA%B9%8C\" aria-label=\"그래서 두개의 차이점이 뭘까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 두개의 차이점이 뭘까?</h2>\n<p>Swift의 URLSession과 Alamofire은 둘 다 네트워킹 작업을 수행하기 위한 도구로 사용됩니다. 그러나 각각의 특징과 목적이 다르며, 다음은 두 라이브러리 간의 주요 차이점입니다:</p>\n<h3 id=\"크기와-복잡성\" style=\"position:relative;\"><a href=\"#%ED%81%AC%EA%B8%B0%EC%99%80-%EB%B3%B5%EC%9E%A1%EC%84%B1\" aria-label=\"크기와 복잡성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>크기와 복잡성</h3>\n<ul>\n<li>\n<p>URLSession: Swift의 표준 라이브러리에 포함된 내장 네트워킹 라이브러리입니다. 무겁지 않고 기본적인 네트워킹 작업을 수행하는 데 사용됩니다.</p>\n</li>\n<li>\n<p>Alamofire: URLSession을 감싸고 있는 외부 라이브러리로, 좀 더 추상화된 인터페이스와 편의성을 제공합니다. 좀 더 간편하게 네트워킹 작업을 처리할 수 있도록 도와줍니다.</p>\n</li>\n</ul>\n<h3 id=\"간편성-및-가독성\" style=\"position:relative;\"><a href=\"#%EA%B0%84%ED%8E%B8%EC%84%B1-%EB%B0%8F-%EA%B0%80%EB%8F%85%EC%84%B1\" aria-label=\"간편성 및 가독성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간편성 및 가독성</h3>\n<ul>\n<li>\n<p>URLSession: 기본적인 사용법은 상대적으로 직접적이고 명시적입니다. URLSession을 사용하면 네트워크 요청 및 응답을 직접 다룰 수 있습니다.</p>\n</li>\n<li>\n<p>Alamofire: 더 간결하고 명시적인 문법을 제공하며, 코드의 가독성을 높여줍니다. Request 및 Response를 추상화하여 개발자가 더 직관적으로 코드를 작성할 수 있도록 돕습니다.</p>\n</li>\n</ul>\n<h3 id=\"기능-및-확장성\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%8A%A5-%EB%B0%8F-%ED%99%95%EC%9E%A5%EC%84%B1\" aria-label=\"기능 및 확장성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기능 및 확장성</h3>\n<ul>\n<li>URLSession: 기본적인 기능을 제공하며, 필요한 경우 직접 확장하여 사용할 수 있습니다. 하지만 추가적인 기능을 수동으로 구현해야 합니다.</li>\n<li>Alamofire: 다양한 기능을 제공하며, JSON 파싱, 업로드 및 다운로드 지원, 헤더 및 인증 관리 등을 내장하고 있습니다. 또한 플러그인 아키텍처를 통해 기능을 확장할 수 있습니다.</li>\n</ul>\n<h3 id=\"유지보수와-업데이트\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EC%99%80-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\" aria-label=\"유지보수와 업데이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유지보수와 업데이트</h3>\n<ul>\n<li>URLSession: Apple이 제공하는 정식 라이브러리이기 때문에 Swift 및 iOS 업데이트에 자연스럽게 포함됩니다.</li>\n<li>Alamofire: 외부 라이브러리이기 때문에 개발자가 직접 업데이트를 관리해야 합니다. 하지만 Alamofire는 활발하게 관리되고 업데이트되고 있으므로 최신 기능 및 보안 업데이트를 받을 수 있습니다.</li>\n</ul>\n<h3 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<p>URLSession은 기본적이고 직접적인 네트워킹 작업을 위한 것이며, Alamofire는 좀 더 편리하고 추상화된 인터페이스를 제공하여 개발자에게 더 풍부한 기능과 가독성을 제공합니다. 선택은 프로젝트의 요구사항 및 개발자의 선호도에 따라 다를 수 있습니다.</p>\n<p><br><br></p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://velog.io/@simh3077/URLSession%EA%B3%BC-Alamofire%EB%A5%BC-%EB%B9%84%EA%B5%90%ED%95%B4%EB%B3%B4%EC%9E%90.-with-SwiftUI\">URLSession과 Alamofire를 비교해보자. with SwiftUI</a></p>\n<p><a href=\"https://code-algo.tistory.com/113\">[SwiftUI] URLSession을 이용한 간단한 JSON 통신 및 데이터 파싱</a></p>\n<p><br><br></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#urlsession-%EC%9D%B4%EB%9E%80\">URLSession 이란?</a></p>\n</li>\n<li>\n<p><a href=\"#alamofire-%EB%9E%80\">Alamofire 란?</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EC%A0%95%EC%9D%98\">데이터 구조 정의</a></p>\n</li>\n<li>\n<p><a href=\"#urlsession-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\">URLSession 사용해보기</a></p>\n<ul>\n<li><a href=\"#urlsessionmanager\">URLSessionManager</a></li>\n<li><a href=\"#urlsessionview\">URLSessionView</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#alamofire-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\">Alamofire 사용해보기</a></p>\n<ul>\n<li><a href=\"#alamofiremanager\">AlamoFireManager</a></li>\n<li><a href=\"#alamofireview\">AlamoFireView</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A0%84%EC%B2%B4%EC%BD%94%EB%93%9C\">전체코드</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%91%90%EA%B0%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%B4-%EB%AD%98%EA%B9%8C\">그래서 두개의 차이점이 뭘까?</a></p>\n<ul>\n<li><a href=\"#%ED%81%AC%EA%B8%B0%EC%99%80-%EB%B3%B5%EC%9E%A1%EC%84%B1\">크기와 복잡성</a></li>\n<li><a href=\"#%EA%B0%84%ED%8E%B8%EC%84%B1-%EB%B0%8F-%EA%B0%80%EB%8F%85%EC%84%B1\">간편성 및 가독성</a></li>\n<li><a href=\"#%EA%B8%B0%EB%8A%A5-%EB%B0%8F-%ED%99%95%EC%9E%A5%EC%84%B1\">기능 및 확장성</a></li>\n<li><a href=\"#%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EC%99%80-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\">유지보수와 업데이트</a></li>\n<li><a href=\"#%EC%9A%94%EC%95%BD\">요약</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 08, 2024","title":"URLSession 과 Alamofire 비교해서 사용하기","categories":"API","author":"황성진","emoji":"🙃"},"fields":{"slug":"/api/"}},"prev":{"id":"c799c317-1990-579a-b69e-3d67db26b432","html":"<h2 id=\"들어가기-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기 앞서</h2>\n<p>Xcode 프로젝트 Assert에 이미지를 추가하여 이미지를 로드하는 경우도 있지만, 네트워킹을 통해 웹의 이미지를 로드하는 경우는 일일이 이미지를 저장하여 불러오는 것이 불가능하다.</p>\n<p>이때 Kingfisher 또는 Async Image 를 사용하면 웹 이미지를 보여줄 수 있다.</p>\n<p>Async Image는 SwiftUI가 iOS 15부터 제공하는 새로운 기능으로, URL에서 이미지를 비동기적으로 로드하고 캐시하는 역할을 합니다.</p>\n<p>이로 인해 이미지 로딩 및 표시가 더욱 원활하고 성능이 향상됩니다.</p>\n<p>Kingfisher는 Swift 기반의 이미지 다운로딩 및 캐싱 라이브러리로, UIKit 및 SwiftUI에서 사용할 수 있습니다.</p>\n<p>Kingfisher를 사용하면 더 많은 커스터마이제이션과 기능을 활용할 수 있습니다.</p>\n<p><br><br></p>\n<h2 id=\"asyncimage\" style=\"position:relative;\"><a href=\"#asyncimage\" aria-label=\"asyncimage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AsyncImage</h2>\n<p>이미지를 비동기적으로 로드하고 표시하는 뷰입니다.</p>\n<p>Async Image는 SwiftUI에서 도입된 이미지 로딩 및 표시를 위한 내장된 컴포넌트입니다.</p>\n<p>이를 사용하면 이미지를 비동기적으로 로드하고 캐싱하여 효율적으로 처리할 수 있습니다.</p>\n<p><br><br></p>\n<h3 id=\"asyncimage-예제\" style=\"position:relative;\"><a href=\"#asyncimage-%EC%98%88%EC%A0%9C\" aria-label=\"asyncimage 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AsyncImage 예제</h3>\n<h4 id=\"기본적인-사용-방법\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-label=\"기본적인 사용 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본적인 사용 방법</h4>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    <span class=\"token keyword\">var</span> imageURL <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://avatars.githubusercontent.com/u/120264964?v=4\"</span></span>\n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AsyncImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> heith<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>사용 결과 입니다.</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/4d2cf751-9068-4471-b37b-4664dc149397\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/41e7f4bf-3368-49b9-8f28-c31b3d61e507\">\n</p>\n<p>이미지가 로드될 때까지 뷰에는 사용 가능한 공간을 채우는 표준 자리 표시자가 표시됩니다.</p>\n<p>로드가 성공적으로 완료되면 보기가 업데이트되어 이미지가 표시됩니다.</p>\n<p>위의 예에서 이미지는 프레임보다 크므로 자리 표시자보다 크게 나타납니다.</p>\n<p>여기서 주의해야 할 점은 AsyncImage 에 프레임으로 크기를 설정해 주어도 이미지가 로드되기 이전의 뷰에만 사용이 가능하고 이미지에는 적용이 불가능 합니다.</p>\n<p>이것을 해결하고 이미지 관련 modifier 또한 적용하기 위해선 아래와 같이 사용해 주어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    <span class=\"token keyword\">var</span> imageURL <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://avatars.githubusercontent.com/u/120264964?v=4\"</span></span>\n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AsyncImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> image <span class=\"token keyword\">in</span>\n            image<span class=\"token punctuation\">.</span><span class=\"token function\">resizable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> placeholder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ProgressView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>다음과 같이 placeholder를 사용하면 이미지가 로드 되기전에 ProgressView가 나타난 후에 이미지가 나타나게 됩니다.</p>\n<p>그러면 에러를 처리하거나 하면 어떻게 해야될까요?</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">\n<span class=\"token comment\">// 조건문을 사용한 에러처리 방법</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    <span class=\"token keyword\">var</span> imageURL <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://avatars.githubusercontent.com/u/120264964?v=4\"</span></span>\n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AsyncImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> phase <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> image <span class=\"token operator\">=</span> phase<span class=\"token punctuation\">.</span>image <span class=\"token punctuation\">{</span>\n                image <span class=\"token comment\">// Displays the loaded image.</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> phase<span class=\"token punctuation\">.</span>error <span class=\"token operator\">!=</span> <span class=\"token nil constant\">nil</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>red <span class=\"token comment\">// Indicates an error.</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>blue <span class=\"token comment\">// Acts as a placeholder.</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// switch case를 이용한 에러처리 방법</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">AsyncImageView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> imageURL <span class=\"token operator\">=</span>  <span class=\"token string-literal\"><span class=\"token string\">\"https://avatars.githubusercontent.com/u/120264964?v=4\"</span></span>\n    \n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AsyncImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> phase <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">switch</span> phase <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">:</span>\n                <span class=\"token class-name\">ProgressView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                image\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">resizable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">scaledToFit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span>systemName<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"exclamationmark.icloud\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token attribute atrule\">@unknown</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                <span class=\"token class-name\">EmptyView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>다음과 같이 사용하면 에러 처리를 해 줄 수 있습니다.</p>\n<p><br><br></p>\n<h2 id=\"kingfisher\" style=\"position:relative;\"><a href=\"#kingfisher\" aria-label=\"kingfisher permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KingFisher</h2>\n<p>Kingfisher는 이미지 다운로드와 캐싱을 용이하게 만드는 강력한 라이브러리로, URL 기반의 이미지 로딩, 캐싱, 프리로딩 및 다양한 이미지 처리 옵션을 제공합니다.</p>\n<p>Kingfisher 공식 문서에서 제공하는 특징으로는</p>\n<ul>\n<li>\n<p>비동기 이미지 다운로드 및 캐싱.</p>\n</li>\n<li>\n<p>URLSession기반 네트워킹 또는 로컬 제공 데이터 에서 이미지를 로드합니다.</p>\n</li>\n<li>\n<p>유용한 이미지 프로세서와 필터가 제공됩니다.</p>\n</li>\n<li>\n<p>메모리와 디스크 모두를 위한 다중 계층 하이브리드 캐시.</p>\n</li>\n<li>\n<p>캐시 동작을 미세하게 제어합니다. 만료 날짜 및 크기 제한을 사용자 정의할 수 있습니다.</p>\n</li>\n<li>\n<p>성능 향상을 위해 다운로드를 취소하고 이전에 다운로드한 콘텐츠를 자동으로 재사용합니다.</p>\n</li>\n<li>\n<p>독립 구성 요소. 필요에 따라 다운로더, 캐싱 시스템, 이미지 프로세서를 별도로 사용하세요.</p>\n</li>\n<li>\n<p>이미지를 미리 가져오고 캐시에서 표시하여 앱을 강화합니다.</p>\n</li>\n<li>\n<p>UIImageView, NSImageView, NSButton, UIButton, NSTextAttachment, WKInterfaceImage, TVMonogramView및 CPListItemURL에서 이미지를 직접 설정하는 확장자입니다.</p>\n</li>\n<li>\n<p>이미지 설정 시 내장된 전환 애니메이션.</p>\n</li>\n<li>\n<p>이미지를 로드하는 동안 사용자 정의 가능한 자리 표시자 및 표시기.</p>\n</li>\n<li>\n<p>이미지 처리 및 이미지 포맷을 쉽게 확장할 수 있습니다.</p>\n</li>\n<li>\n<p>저데이터 모드 지원.</p>\n</li>\n<li>\n<p>SwiftUI 지원.</p>\n</li>\n</ul>\n<p><br><br></p>\n<h3 id=\"설치\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치</h3>\n<p>cocoapod</p>\n<blockquote>\n<p>pod ‘Kingfisher’</p>\n</blockquote>\n<p>swift package</p>\n<blockquote>\n<p><a href=\"https://github.com/onevcat/Kingfisher.git\">https://github.com/onevcat/Kingfisher.git</a></p>\n</blockquote>\n<p><br><br></p>\n<h3 id=\"간단-사용-예제\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%A0%9C\" aria-label=\"간단 사용 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단 사용 예제</h3>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">Kingfisher</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">KingFisher</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    <span class=\"token keyword\">let</span> imageURL <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://avatars.githubusercontent.com/u/120264964?v=4\"</span></span>\n    \n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">KFImage</span><span class=\"token punctuation\">(</span><span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>kingfisher를 사용하면 바로 이미지에 Modifier를 사용할 수 있습니다.</p>\n<p>그러면 오류를 처리하기 위해선 어떻게 해야 할 까요?</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">KingFisher</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    <span class=\"token keyword\">let</span> imageURL <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://avatars.githubusercontent.com/u/120264964?v=4\"</span></span>\n    \n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"KingFisher\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token class-name\">KFImage</span><span class=\"token punctuation\">(</span><span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token keyword\">in</span>\n                    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Error : </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">error</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">resizable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>다음과 같이 사용하면 오류 처리를 할 수 있습니다.</p>\n<p>Kingfisher 에서는 우리가 일반적으로 사용하는 Modifier 외에도 일부 다른 Modifier도 사용가능 합니다.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">    <span class=\"token class-name\">KFImage</span><span class=\"token punctuation\">(</span><span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>placeholder <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Placeholder while downloading.</span>\n            <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span>systemName<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"arrow.2.circlepath.circle\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">font</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>largeTitle<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">opacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">retry</span><span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> interval<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>onSuccess <span class=\"token punctuation\">{</span> r <span class=\"token keyword\">in</span>\n            <span class=\"token comment\">// r: RetrieveImageResult</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"success: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">r</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>onFailure <span class=\"token punctuation\">{</span> e <span class=\"token keyword\">in</span>\n            <span class=\"token comment\">// e: KingfisherError</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"failure: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">e</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>또한 리스트에 넣어서 관리 할 수도 있습니다.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token class-name\">List</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ForEach</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">..&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> i <span class=\"token keyword\">in</span>\n        <span class=\"token class-name\">KFImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>urls<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">cancelOnDisappear</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<h2 id=\"그래서-두개가-뭐가-다를까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%91%90%EA%B0%9C%EA%B0%80-%EB%AD%90%EA%B0%80-%EB%8B%A4%EB%A5%BC%EA%B9%8C\" aria-label=\"그래서 두개가 뭐가 다를까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 두개가 뭐가 다를까?</h2>\n<ol>\n<li>\n<p>캐싱: Kingfisher는 이미지 캐싱에 있어서 매우 강력합니다. 디스크 및 메모리 캐싱을 지원하며, 맞춤 설정도 가능합니다. 반면, AsyncImage는 기본적인 캐싱만 제공합니다.</p>\n</li>\n<li>\n<p>이미지 처리 및 변환: Kingfisher는 이미지를 로드하기 전이나 후에 다양한 처리를 할 수 있는 옵션을 제공합니다. AsyncImage는 이러한 추가 기능이 없습니다.</p>\n</li>\n<li>\n<p>UI 커스터마이징: AsyncImage는 로딩 및 에러 상태에 대한 간단한 커스터마이징을 제공하지만, Kingfisher는 더 많은 커스터마이징 옵션을 제공합니다.</p>\n</li>\n<li>\n<p>성능: AsyncImage는 시스템에 통합되어 있어 빠른 성능을 제공합니다. 하지만 Kingfisher는 고급 기능을 많이 사용할수록 성능이 다소 떨어질 수 있습니다.</p>\n</li>\n</ol>\n<p><br><br></p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<ul>\n<li>\n<p>간단한 사용 목적이라면 AsyncImage가 적합할 수 있습니다.</p>\n</li>\n<li>\n<p>복잡하거나 고급 기능이 필요한 경우 Kingfisher가 더 나은 선택일 수 있습니다.</p>\n</li>\n</ul>\n<p><br><br></p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://github.com/onevcat/Kingfisher/wiki/SwiftUI-Support\">Kingfisher 공식문서</a>\n<a href=\"https://developer.apple.com/documentation/swiftui/asyncimage\">Apple async Image 공식문서</a></p>\n<p><br><br></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\">들어가기 앞서</a></p>\n</li>\n<li>\n<p><a href=\"#asyncimage\">AsyncImage</a></p>\n<ul>\n<li>\n<p><a href=\"#asyncimage-%EC%98%88%EC%A0%9C\">AsyncImage 예제</a></p>\n<ul>\n<li><a href=\"#%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\">기본적인 사용 방법</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#kingfisher\">KingFisher</a></p>\n<ul>\n<li><a href=\"#%EC%84%A4%EC%B9%98\">설치</a></li>\n<li><a href=\"#%EA%B0%84%EB%8B%A8-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%A0%9C\">간단 사용 예제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%91%90%EA%B0%9C%EA%B0%80-%EB%AD%90%EA%B0%80-%EB%8B%A4%EB%A5%BC%EA%B9%8C\">그래서 두개가 뭐가 다를까?</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 23, 2024","title":"SwiftUI KingFisher 와 Async Image 사용 비교","categories":"Swift","author":"황성진","emoji":"🙃"},"fields":{"slug":"/asyncIamge/"}},"site":{"siteMetadata":{"siteUrl":"https://hsungjin.github.io","comments":{"utterances":{"repo":"Hsungjin/Hsungjin.github.io"}}}}},"pageContext":{"slug":"/generics/","nextSlug":"/api/","prevSlug":"/asyncIamge/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}