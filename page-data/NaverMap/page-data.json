{"componentChunkName":"component---src-templates-blog-template-js","path":"/NaverMap/","result":{"data":{"cur":{"id":"fa56437a-a1b3-564f-ad82-ae15f7794260","html":"<!-- <p align=\"center\">\n  <img src=\"https://github.com/4T2F/ThinkBig/assets/120264964/6e0c20b0-947a-4422-81e0-b9696ee274e2\"> <br>\n  Happy 2024\n</p> -->\n<h2 id=\"naver-api-발급\" style=\"position:relative;\"><a href=\"#naver-api-%EB%B0%9C%EA%B8%89\" aria-label=\"naver api 발급 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Naver API 발급</h2>\n<p><a href=\"https://www.ncloud.com\">네이버 클라우드 사이트</a>에 접속하여 회원가입, 로그인을 합니다.</p>\n<p>로그인 후 콘솔에 들어갑니다.</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/6415d1e2-5cda-4df4-b1c9-f949a6c6208a\">\n</p>\n네이버 지도는 Products &amp; Services에서 AI-Application Service 하위의 AI·NAVER API에 포함되어 있습니다.\n<p>해당 API를 선택합니다.</p>\n<p>그 다음 API 등록 버튼을 누르고</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/51ca1cea-bf32-4544-ab2f-ebdf63341d2a\">\n</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/b3f7a140-aba4-4bfb-8439-40c1f1af178a\">\n</p>\n<p>현 예제에서는 Mobile Map 만 사용하므로 체크 하고 Bundel ID를 입력해 줍니다.</p>\n<p>이렇게 진행하면 Client ID 값을 받을 수 있습니다.</p>\n<p><br><br></p>\n<h2 id=\"키값-숨기기\" style=\"position:relative;\"><a href=\"#%ED%82%A4%EA%B0%92-%EC%88%A8%EA%B8%B0%EA%B8%B0\" aria-label=\"키값 숨기기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>키값 숨기기</h2>\n<p>보통 로컬환경에서 작업하면 크게 문제가 없지만 깃허브와 같은 환경에 올려 작업하면 키값이 노출되는 문제가 생깁니다.</p>\n<p>이것을 방지해주기 위해서는 다음과 같이</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/3214d69e-ce00-439f-a3f1-607e25f9cbbc\">\n</p>\n<p>config파일을 만들어 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Config.xcconfig 파일 내부</span>\n<span class=\"token class-name\">NMFClientId</span> <span class=\"token operator\">=</span> 발급받은 <span class=\"token class-name\">Naver</span> <span class=\"token class-name\">Client</span> id를 넣어줍니다</code></pre></div>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/49170565-e63e-442c-b302-4dcffeaaf228\">\n</p>\n<p>그 다음 info.plist에 다음과 같이 $(NMFClientId) 를 넣어준 다음</p>\n<p>.gitignore에 Config.xcconfig 을 추가해주면 키값 노출 없이 깃허브에 올릴수 있게 됩니다.</p>\n<p><br><br></p>\n<h2 id=\"cocoapod으로-navaermap-설치\" style=\"position:relative;\"><a href=\"#cocoapod%EC%9C%BC%EB%A1%9C-navaermap-%EC%84%A4%EC%B9%98\" aria-label=\"cocoapod으로 navaermap 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cocoapod으로 NavaerMap 설치</h2>\n<p>터미널을 통해 프로젝트 폴더로 이동합니다.</p>\n<p>다음의 명령어를 차례대로 입력합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pod init\n\nvi Podfile</code></pre></div>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/d22e6fa7-0897-4dd4-8dec-e8de6caa4d45\">\n</p>\n<p>저는 추후에 파이어베이스에서 저장된 위치값을 받아올수 있도록 하기 위해 다음과같이 Firebase도 설치하였습니다.</p>\n<p>간단하게 NavaeMap만 사용하실분은 Firebase부분 없이 pod ‘NMapsMap’ 만 사용해 주시면 됩니다.</p>\n<p>정상적인 설치가 되었으면 프로젝트 파일을 열고 import NMapsMap 가 정상적으로 작동 되는 것을 볼 수 있습니다.</p>\n<p><br><br></p>\n<h3 id=\"빌드-시-오류-사항\" style=\"position:relative;\"><a href=\"#%EB%B9%8C%EB%93%9C-%EC%8B%9C-%EC%98%A4%EB%A5%98-%EC%82%AC%ED%95%AD\" aria-label=\"빌드 시 오류 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빌드 시 오류 사항</h3>\n<p>여기서 저와같은 경우에는 빌드를 했을때</p>\n<blockquote>\n<p>Sandbox: rsync.samba(69150) deny(1) file-read-data</p>\n</blockquote>\n<p>오류가 발생했었는데 당황하지 마시고</p>\n<p>proejct - buildsetting - User Script Sandboxing 값을 No 로 변경하시면</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/5adcc22e-e6b9-44ed-9fe9-5701db2c4842\">\n</p>\n<p><br><br></p>\n<h2 id=\"위치-권한-설정\" style=\"position:relative;\"><a href=\"#%EC%9C%84%EC%B9%98-%EA%B6%8C%ED%95%9C-%EC%84%A4%EC%A0%95\" aria-label=\"위치 권한 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>위치 권한 설정</h2>\n<p>iOS는 앱이 사용되는 동안 ‘나의 위치 정보를 제공하겠는가?‘에 대한 <strong>세부적인 통제권을 사용자가 소유하고</strong> 있습니다. 따라서 개발자는 다양한 상황에 대한 권한을 사용자에게 요청해야 하고, 사용자가 이를 <strong>허용했을 때 비로소 그 정보에 접근</strong>할 수 있습니다.</p>\n<ul>\n<li>\n<p><strong>Privacy - Location When <em>In Use</em> Usage Description (iOS 11 이상)</strong></p>\n<p>→ 앱이 <em>포그라운드에서 실행 중일 때만</em> 위치 정보에 엑세스</p>\n</li>\n<li>\n<p><strong>Privacy - Location <em>Always</em> and When <em>In Use</em> Usage Description (iOS 11 이상)</strong></p>\n<p>→ 앱이 <em>백그라운드에서 실행</em>되는 동안 위치 정보에 엑세스</p>\n</li>\n<li>\n<p><strong>Privacy - Location Always Usage Description (iOS 11 이전, deprecated)</strong></p>\n<p>→ 앱이 <em>백그라운드</em>에서 위치 정보에 엑세스 하고, iOS 11이전의 대상에 배포하는 경우!</p>\n</li>\n<li>\n<p><strong>Privacy - Location Temporary Usage <em>Description</em> Dictionary</strong></p>\n<p>→ 앱의 한 부분에서 사용자 위치에 대한 임시 엑세스를 요청하는 <em>이유</em>를 설명</p>\n</li>\n<li>\n<p><strong>Privacy - Location Usage Description(mac)</strong></p>\n<p>→ macOS 앱이 사용자의 위치 정보에 엑세스하는 API를 사용하는 경우에만 필요</p>\n</li>\n<li>\n<p><strong>Privacy - Location Default <em>Accuracy</em> Reduced (iOS 14 이상)</strong></p>\n<p>→ <em>위치 정확도</em>에 대한 <strong>앱의 기본 동작</strong>을 설정하려면 정보 속성 목록에 이 키를 포함할 수 있음</p>\n</li>\n</ul>\n<p>이렇게 다양한 권한 설정이 있는데 주로 사용하는 내용은</p>\n<p><strong>Privacy - Location Default Accuracy Reduced</strong></p>\n<p><strong>Privacy - Location Always Usage Description</strong></p>\n<p><strong>Privacy - Location Always and When In Use Usage Description</strong></p>\n<p>이렇게 3가지가 주로 사용된다고 합니다.</p>\n<p>이 3가지를 Info.plist를 통해 사용해 주시면 됩니다.</p>\n<p>아래는 Info.plist 의 소스 코드 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">plist</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//Apple//DTD PLIST 1.0//EN\"</span> <span class=\"token string\">\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plist</span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dict</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>key</span><span class=\"token punctuation\">></span></span>NSLocationDefaultAccuracyReduced<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>key</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>true</span><span class=\"token punctuation\">/></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>key</span><span class=\"token punctuation\">></span></span>NSLocationAlwaysUsageDescription<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>key</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>key</span><span class=\"token punctuation\">></span></span>NSLocationAlwaysAndWhenInUseUsageDescription<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>key</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>key</span><span class=\"token punctuation\">></span></span>NMFCliendId<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>key</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dict</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plist</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><br><br></p>\n<h2 id=\"navermap-사용하기\" style=\"position:relative;\"><a href=\"#navermap-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"navermap 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NaverMap 사용하기</h2>\n<p>지금까지 따라오셨으면 NaverMap을 사용하기 위한 기본적인 준비는 완료 되었습니다.</p>\n<p><a href=\"https://navermaps.github.io/ios-map-sdk/guide-ko/0.html\">네이버 공식문서</a> 공식문서를 보시면 어떤 값을 넣어 사용하는지 이해가 더 잘될거라고 생각됩니다.</p>\n<h3 id=\"contentviewswift\" style=\"position:relative;\"><a href=\"#contentviewswift\" aria-label=\"contentviewswift permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ContentView.swift</h3>\n<p>ContentView 에서 NaverMap 서브 뷰를 호출해서 사용합니다.</p>\n<p>onAppear 부분은 앱이 처음 실행되었을때 위치정보 동의를 얻기위한 함수를 호출하는 부분입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@StateObject</span> <span class=\"token keyword\">var</span> coordinator<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Coordinator</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Coordinator</span><span class=\"token punctuation\">.</span>shared\n    \n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">NaverMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">ignoresSafeArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>all<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>onAppear <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Coordinator</span><span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">checkIfLocationServiceIsEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token other-directive property\">#Preview</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<h3 id=\"mapviewswift\" style=\"position:relative;\"><a href=\"#mapviewswift\" aria-label=\"mapviewswift permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MapView.swift</h3>\n<p>기본적으로 NaverMap은 UIkit 기반이므로 SwiftUI에서 사용하기 위해서는 UIViewRepresentable 를 사용해야 됩니다.</p>\n<p>Coordinator는 SwiftUI-UIKit간의 브릿지 역할을 하는 녀석 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">NMapsMap</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">NaverMap</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIViewRepresentable</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeCoordinator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Coordinator</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Coordinator</span><span class=\"token punctuation\">.</span>shared\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeUIView</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">NMFNaverMapView</span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token punctuation\">.</span>coordinator<span class=\"token punctuation\">.</span><span class=\"token function\">getNaverMapView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">updateUIView</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> uiView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NMFNaverMapView</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Coordinator의 경우 UIKit -> SwiftUI로의 데이터 전달이</p>\n<p>Coordinator라고 해서 새로운 개념 같지만, 사실상 “delegate”의 역할을 한다고 봐도 무방합니다.</p>\n<p>Naver Map에 필요한 Delegate를 사용하기 위해 Coordinator를 사용하려고 합니다.</p>\n<p>makeCoordinator() 함수는 말그대로 Cooridnator를 만드는 함수고,\n코디네이터 클래스는 UIView -> SwiftUI로의 브릿지 역할을 하는 delegate라고 보면 됩니다.</p>\n<p><br><br></p>\n<h3 id=\"coordinatorswift\" style=\"position:relative;\"><a href=\"#coordinatorswift\" aria-label=\"coordinatorswift permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Coordinator.swift</h3>\n<p>각자 코드에 주석을 사용해서 정리 했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">UIKit</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">NMapsMap</span>\n\n<span class=\"token comment\">// - NMFMapViewCameraDelegate 카메라 이동에 필요한 델리게이트,</span>\n<span class=\"token comment\">// - NMFMapViewTouchDelegate 맵 터치할 때 필요한 델리게이트,</span>\n<span class=\"token comment\">// - CLLocationManagerDelegate 위치 관련해서 필요한 델리게이트</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Coordinator</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSObject</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObservableObject</span><span class=\"token punctuation\">,</span>\n                         <span class=\"token class-name\">NMFMapViewCameraDelegate</span><span class=\"token punctuation\">,</span>\n                         <span class=\"token class-name\">NMFMapViewTouchDelegate</span><span class=\"token punctuation\">,</span>\n                         <span class=\"token class-name\">CLLocationManagerDelegate</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> shared <span class=\"token operator\">=</span> <span class=\"token class-name\">Coordinator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> coord<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> userLocation<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">var</span> locationManager<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CLLocationManager</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">let</span> startInfoWindow <span class=\"token operator\">=</span> <span class=\"token class-name\">NMFInfoWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token class-name\">NMFNaverMapView</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        view<span class=\"token punctuation\">.</span>mapView<span class=\"token punctuation\">.</span>positionMode <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>direction\n        view<span class=\"token punctuation\">.</span>mapView<span class=\"token punctuation\">.</span>isNightModeEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        \n        view<span class=\"token punctuation\">.</span>mapView<span class=\"token punctuation\">.</span>zoomLevel <span class=\"token operator\">=</span> <span class=\"token number\">15</span> <span class=\"token comment\">// 기본 맵이 표시될때 줌 레벨</span>\n        view<span class=\"token punctuation\">.</span>mapView<span class=\"token punctuation\">.</span>minZoomLevel <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 최소 줌 레벨</span>\n        view<span class=\"token punctuation\">.</span>mapView<span class=\"token punctuation\">.</span>maxZoomLevel <span class=\"token operator\">=</span> <span class=\"token number\">17</span> <span class=\"token comment\">// 최대 줌 레벨</span>\n        \n        view<span class=\"token punctuation\">.</span>showLocationButton <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 현위치 버튼: 위치 추적 모드를 표현합니다. 탭하면 모드가 변경됩니다.</span>\n        view<span class=\"token punctuation\">.</span>showZoomControls <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 줌 버튼: 탭하면 지도의 줌 레벨을 1씩 증가 또는 감소합니다.</span>\n        view<span class=\"token punctuation\">.</span>showCompass <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">//  나침반 : 카메라의 회전 및 틸트 상태를 표현합니다. 탭하면 카메라의 헤딩과 틸트가 0으로 초기화됩니다. 헤딩과 틸트가 0이 되면 자동으로 사라집니다</span>\n        view<span class=\"token punctuation\">.</span>showScaleBar <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 스케일 바 : 지도의 축척을 표현합니다. 지도를 조작하는 기능은 없습니다.</span>\n        \n        view<span class=\"token punctuation\">.</span>mapView<span class=\"token punctuation\">.</span><span class=\"token function\">addCameraDelegate</span><span class=\"token punctuation\">(</span>delegate<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n        view<span class=\"token punctuation\">.</span>mapView<span class=\"token punctuation\">.</span>touchDelegate <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span>\n        \n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">mapView</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> mapView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NMFMapView</span><span class=\"token punctuation\">,</span> cameraWillChangeByReason reason<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> animated<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 카메라 이동이 시작되기 전 호출되는 함수</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">mapView</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> mapView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NMFMapView</span><span class=\"token punctuation\">,</span> cameraIsChangingByReason reason<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 카메라의 위치가 변경되면 호출되는 함수</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// MARK: - 위치 정보 동의 확인</span>\n    \n    <span class=\"token comment\">/*\n     ContetView 에서 .onAppear 에서 위치 정보 제공을 동의 했는지 확인하는 함수를 호출한다.\n     위치 정보 제공 동의 순서\n     1. MapView에서 .onAppear에서 checkIfLocationServiceIsEnabled() 호출\n     2. checkIfLocationServiceIsEnabled() 함수 안에서 locationServicesEnabled() 값이 true인지 체크\n     3. true일 경우(동의한 경우), checkLocationAuthorization() 호출\n     4. case .authorizedAlways(항상 허용), .authorizedWhenInUse(앱 사용중에만 허용) 일 경우에만 fetchUserLocation() 호출\n     */</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">checkLocationAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> locationManager <span class=\"token operator\">=</span> locationManager <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">switch</span> locationManager<span class=\"token punctuation\">.</span>authorizationStatus <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>notDetermined<span class=\"token punctuation\">:</span>\n            locationManager<span class=\"token punctuation\">.</span><span class=\"token function\">requestWhenInUseAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>restricted<span class=\"token punctuation\">:</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"위치 정보 접근이 제한되었습니다.\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>denied<span class=\"token punctuation\">:</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"위치 정보 접근을 거절했습니다. 설정에 가서 변경하세요.\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>authorizedAlways<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>authorizedWhenInUse<span class=\"token punctuation\">:</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Success\"</span></span><span class=\"token punctuation\">)</span>\n            \n            coord <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span>locationManager<span class=\"token punctuation\">.</span>location<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>coordinate<span class=\"token punctuation\">.</span>latitude <span class=\"token operator\">??</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span>locationManager<span class=\"token punctuation\">.</span>location<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>coordinate<span class=\"token punctuation\">.</span>longitude <span class=\"token operator\">??</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            userLocation <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span>locationManager<span class=\"token punctuation\">.</span>location<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>coordinate<span class=\"token punctuation\">.</span>latitude <span class=\"token operator\">??</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span>locationManager<span class=\"token punctuation\">.</span>location<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>coordinate<span class=\"token punctuation\">.</span>longitude <span class=\"token operator\">??</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token function\">fetchUserLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            \n        <span class=\"token attribute atrule\">@unknown</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">checkIfLocationServiceIsEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">DispatchQueue</span><span class=\"token punctuation\">.</span><span class=\"token function\">global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token class-name\">CLLocationManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">locationServicesEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">DispatchQueue</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>locationManager <span class=\"token operator\">=</span> <span class=\"token class-name\">CLLocationManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>locationManager<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>delegate <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span>\n                    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkLocationAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Show an alert letting them know this is off and to go turn i on\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// MARK: - NMFMapView에서 제공하는 locationOverlay를 현재 위치로 설정</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">fetchUserLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> locationManager <span class=\"token operator\">=</span> locationManager <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> lat <span class=\"token operator\">=</span> locationManager<span class=\"token punctuation\">.</span>location<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>coordinate<span class=\"token punctuation\">.</span>latitude\n            <span class=\"token keyword\">let</span> lng <span class=\"token operator\">=</span> locationManager<span class=\"token punctuation\">.</span>location<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>coordinate<span class=\"token punctuation\">.</span>longitude\n            <span class=\"token keyword\">let</span> cameraUpdate <span class=\"token operator\">=</span> <span class=\"token class-name\">NMFCameraUpdate</span><span class=\"token punctuation\">(</span>scrollTo<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NMGLatLng</span><span class=\"token punctuation\">(</span>lat<span class=\"token punctuation\">:</span> lat <span class=\"token operator\">??</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> lng<span class=\"token punctuation\">:</span> lng <span class=\"token operator\">??</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> zoomTo<span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n            cameraUpdate<span class=\"token punctuation\">.</span>animation <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>easeIn\n            cameraUpdate<span class=\"token punctuation\">.</span>animationDuration <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            \n            <span class=\"token keyword\">let</span> locationOverlay <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>mapView<span class=\"token punctuation\">.</span>locationOverlay\n            locationOverlay<span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> <span class=\"token class-name\">NMGLatLng</span><span class=\"token punctuation\">(</span>lat<span class=\"token punctuation\">:</span> lat <span class=\"token operator\">??</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> lng<span class=\"token punctuation\">:</span> lng <span class=\"token operator\">??</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n            locationOverlay<span class=\"token punctuation\">.</span>hidden <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n            \n            locationOverlay<span class=\"token punctuation\">.</span>icon <span class=\"token operator\">=</span> <span class=\"token class-name\">NMFOverlayImage</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"location_overlay_icon\"</span></span><span class=\"token punctuation\">)</span>\n            locationOverlay<span class=\"token punctuation\">.</span>iconWidth <span class=\"token operator\">=</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NMF_LOCATION_OVERLAY_SIZE_AUTO</span><span class=\"token punctuation\">)</span>\n            locationOverlay<span class=\"token punctuation\">.</span>iconHeight <span class=\"token operator\">=</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NMF_LOCATION_OVERLAY_SIZE_AUTO</span><span class=\"token punctuation\">)</span>\n            locationOverlay<span class=\"token punctuation\">.</span>anchor <span class=\"token operator\">=</span> <span class=\"token class-name\">CGPoint</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            \n            view<span class=\"token punctuation\">.</span>mapView<span class=\"token punctuation\">.</span><span class=\"token function\">moveCamera</span><span class=\"token punctuation\">(</span>cameraUpdate<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">getNaverMapView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">NMFNaverMapView</span> <span class=\"token punctuation\">{</span>\n        view\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 마커 부분의 lat lng를 init 부분에 호출해서 사용하면 바로 사용가능하지만</span>\n    <span class=\"token comment\">// 파이어베이스 연동의 문제를 생각해서 받아오도록 만들었습니다.</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">setMarker</span><span class=\"token punctuation\">(</span>lat <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> lng<span class=\"token punctuation\">:</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> marker <span class=\"token operator\">=</span> <span class=\"token class-name\">NMFMarker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        marker<span class=\"token punctuation\">.</span>iconImage <span class=\"token operator\">=</span> <span class=\"token constant\">NMF_MARKER_IMAGE_PINK</span>\n        marker<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> <span class=\"token class-name\">NMGLatLng</span><span class=\"token punctuation\">(</span>lat<span class=\"token punctuation\">:</span> lat<span class=\"token punctuation\">,</span> lng<span class=\"token punctuation\">:</span> lng<span class=\"token punctuation\">)</span>\n        marker<span class=\"token punctuation\">.</span>mapView <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>mapView\n        \n        <span class=\"token keyword\">let</span> infoWindow <span class=\"token operator\">=</span> <span class=\"token class-name\">NMFInfoWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> dataSource <span class=\"token operator\">=</span> <span class=\"token class-name\">NMFInfoWindowDefaultTextSource</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        dataSource<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"서울특별시청\"</span></span>\n        infoWindow<span class=\"token punctuation\">.</span>dataSource <span class=\"token operator\">=</span> dataSource\n        infoWindow<span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> marker<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><br><br></p>\n<h2 id=\"firebase와의-연동\" style=\"position:relative;\"><a href=\"#firebase%EC%99%80%EC%9D%98-%EC%97%B0%EB%8F%99\" aria-label=\"firebase와의 연동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Firebase와의 연동</h2>\n<p><a href=\"https://dev-workplace.tistory.com/9\">Firebase 연동방법</a> 다음 블로그를 참고해서 Firebase를 연동해 주어야 됩니다!</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/638d4c3d-144e-421a-850c-83a2214e0f9a\">\n</p>\n<p>제가 사용한 데이터베이스의 구조 입니다.</p>\n<p>코드를 통해 let, lng 값을 불러와 사용합니다.</p>\n<p><br><br></p>\n<h3 id=\"contentviewswift-1\" style=\"position:relative;\"><a href=\"#contentviewswift-1\" aria-label=\"contentviewswift 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ContentView.swift</h3>\n<p>파이어 베이스를 사용해서 위도 경도 값을 불러오는데 비동기로 코드를 작성해서 값이 불러와진 상태에서 작업할 수 있도록 수정했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@StateObject</span> <span class=\"token keyword\">var</span> coordinator<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Coordinator</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Coordinator</span><span class=\"token punctuation\">.</span>shared\n    <span class=\"token attribute atrule\">@StateObject</span> <span class=\"token keyword\">var</span> firestoreManager <span class=\"token operator\">=</span> <span class=\"token class-name\">FireStoreManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ZStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">NaverMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">ignoresSafeArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>all<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">Spacer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>onAppear <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Coordinator</span><span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">checkIfLocationServiceIsEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token class-name\">Task</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">await</span> firestoreManager<span class=\"token punctuation\">.</span><span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token class-name\">Coordinator</span><span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">setMarker</span><span class=\"token punctuation\">(</span>lat<span class=\"token punctuation\">:</span> firestoreManager<span class=\"token punctuation\">.</span>mylat<span class=\"token punctuation\">,</span> lng<span class=\"token punctuation\">:</span> firestoreManager<span class=\"token punctuation\">.</span>mylng<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<h3 id=\"firestoremanagerswift\" style=\"position:relative;\"><a href=\"#firestoremanagerswift\" aria-label=\"firestoremanagerswift permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FireStoreManager.swift</h3>\n<p>FireStoreManager는  ObservableObject를 따르도록 만들어 줍니다.</p>\n<p>fetchData는 Firebase에 올라간 데이터에 접근해서 lat, leg를 불러오는 함수 입니다.</p>\n<p>@Published 로 사용해서 ContentView에서도 접근할수 있도록 선언해 주었고,</p>\n<p>let docRef = db.collection(“freeboard”).document(“EBvvECgiQidPmdWf0Byq”)</p>\n<p>collection에는 컬렉션 이름을 document에는 document 값을 넣어줍니다.</p>\n<p>여기서 읽어와야 될 데이터 정보가 lat, lng 이기 떄문에</p>\n<blockquote>\n<p>self.mylat = data[“lat”] as? Double ?? 0 <br>\nself.mylng = data[“lng”] as? Double ?? 0</p>\n</blockquote>\n<p>다음과 같이 사용해 주었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">Foundation</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">FirebaseFirestore</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FireStoreManager</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ObservableObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> mylat<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> mylng<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> db <span class=\"token operator\">=</span> <span class=\"token class-name\">Firestore</span><span class=\"token punctuation\">.</span><span class=\"token function\">firestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> docRef <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"freeboard\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">document</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"EBvvECgiQidPmdWf0Byq\"</span></span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> document <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token keyword\">await</span> docRef<span class=\"token punctuation\">.</span><span class=\"token function\">getDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> document<span class=\"token punctuation\">.</span>exists <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>mylat <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"lat\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">??</span> <span class=\"token number\">0</span>\n                    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>mylng <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"lng\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">??</span> <span class=\"token number\">0</span>\n                    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>mylat<span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>mylng<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Error fetching document: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">error</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<h3 id=\"navermapappswift\" style=\"position:relative;\"><a href=\"#navermapappswift\" aria-label=\"navermapappswift permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NaverMapApp.swift</h3>\n<p>Firebase 사용을 위해 Firebase에서 제공해주는 예시를 추가한 코드 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">FirebaseCore</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AppDelegate</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSObject</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UIApplicationDelegate</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">application</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> application<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIApplication</span><span class=\"token punctuation\">,</span>\n                     didFinishLaunchingWithOptions launchOptions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">UIApplication</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">LaunchOptionsKey</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">Any</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">FirebaseApp</span><span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute atrule\">@main</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">NaverMapApp</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// register app delegate for Firebase setup</span>\n    <span class=\"token attribute atrule\">@UIApplicationDelegateAdaptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AppDelegate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> delegate\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">Scene</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">WindowGroup</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">NavigationView</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<p>다음과 같이 코드를 작성해서 넣어주면 파이어 베이스에서 위도 경도를 읽어들여 마커가 찍히는 것을 볼수 있습니다.</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/0fe92e7e-4cf9-4278-99b2-056abb3bf156\">\n</p>\n<p>막상 코드를 보면 이해가 되었는데 역시 글로 쓰면서 설명하는건 쉽지 않은것 같습니다.</p>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p><a href=\"https://github.com/Hsungjin/SwiftUI-Study/tree/main/NaverMap/NaverMap\">깃허브 소스코드</a> 전체 소스 코드입니다.</p>\n<p><br><br></p>\n<h2 id=\"참고-블로그\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EB%B8%94%EB%A1%9C%EA%B7%B8\" aria-label=\"참고 블로그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 블로그</h2>\n<p><a href=\"https://jeong9216.tistory.com/198\">[iOS/Swift] 네이버 지도(Maps) 사용하기</a>\n<a href=\"https://dev-workplace.tistory.com/9\">SwiftUI Firebase firestore 연동 (2)</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#naver-api-%EB%B0%9C%EA%B8%89\">Naver API 발급</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%82%A4%EA%B0%92-%EC%88%A8%EA%B8%B0%EA%B8%B0\">키값 숨기기</a></p>\n</li>\n<li>\n<p><a href=\"#cocoapod%EC%9C%BC%EB%A1%9C-navaermap-%EC%84%A4%EC%B9%98\">Cocoapod으로 NavaerMap 설치</a></p>\n<ul>\n<li><a href=\"#%EB%B9%8C%EB%93%9C-%EC%8B%9C-%EC%98%A4%EB%A5%98-%EC%82%AC%ED%95%AD\">빌드 시 오류 사항</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9C%84%EC%B9%98-%EA%B6%8C%ED%95%9C-%EC%84%A4%EC%A0%95\">위치 권한 설정</a></p>\n</li>\n<li>\n<p><a href=\"#navermap-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">NaverMap 사용하기</a></p>\n<ul>\n<li><a href=\"#contentviewswift\">ContentView.swift</a></li>\n<li><a href=\"#mapviewswift\">MapView.swift</a></li>\n<li><a href=\"#coordinatorswift\">Coordinator.swift</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#firebase%EC%99%80%EC%9D%98-%EC%97%B0%EB%8F%99\">Firebase와의 연동</a></p>\n<ul>\n<li><a href=\"#contentviewswift-1\">ContentView.swift</a></li>\n<li><a href=\"#firestoremanagerswift\">FireStoreManager.swift</a></li>\n<li><a href=\"#navermapappswift\">NaverMapApp.swift</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\">전체 코드</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0-%EB%B8%94%EB%A1%9C%EA%B7%B8\">참고 블로그</a></p>\n</li>\n</ul>\n</div>","excerpt":"Naver API 발급 네이버 클라우드 사이트에 접속하여 회원가입, 로그인을 합니다. 로그인 후 콘솔에 들어갑니다. 해당 API를 선택합니다. 그 다음 API 등록 버튼을 누르고 현 예제에서는 Mobile Map 만 사용하므로 체크 하고 Bundel ID를 입력해 줍니다. 이렇게 진행하면 Client ID 값을 받을 수 있습니다.  키값 숨기기 보통 로컬환경에서 작업하면 크게 문제가 없지만 깃허브와 같은 환경에 올려 작업하면 키값이 노출되는 문제가 생깁니다. 이것을 방지해주기 위해서는 다음과 같이 config파일을 만들어 줍니다. 그 다음 info.plist에 다음과 같이 $(NMFClientId) 를 넣어준 다음 .gitignore에 Config.xcconfig 을 추가해주면 키값 노출 없이 깃허브에 올릴수 있게 됩니다.  Cocoapod으로 NavaerMap 설치 터미널을 통해 프로젝트 폴더로 이동합니다. 다음의 명령어를 차례대로 입력합니다. 저는 추후에 파이어베이스에서 저장된…","frontmatter":{"date":"January 02, 2024","title":"SwiftUI로 NaverMap 사용하기","categories":"API","author":"황성진","emoji":"🔑"},"fields":{"slug":"/NaverMap/"}},"next":{"id":"b633c8b2-d6dc-55f8-8b5b-54556246de01","html":"<h2 id=\"객체object-란\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4object-%EB%9E%80\" aria-label=\"객체object 란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체(Object) 란?</h2>\n<p>CS에서 객체는 물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에 자신의 속성을 가지고 있고 다른것과 식별 가능한 것을 말합니다.</p>\n<p>즉 컴퓨터로 예를 들면 키보드, 마우스, 스피커 등이 객체가 될 수 있고, 이것들은 각각 입력, 소리출력, 인터페이스 조작 등의 기능이 포함 됩니다.</p>\n<p><br><br></p>\n<h2 id=\"객체지향-프로그래밍-oop-object-oriented-programming\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-oop-object-oriented-programming\" aria-label=\"객체지향 프로그래밍 oop object oriented programming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체지향 프로그래밍 (OOP, Object Oriented Programming)</h2>\n<blockquote>\n<p>객체들의 상호작용으로 서술하는 프로그래밍 기법\n현실세계의 객체를 소프트웨어 객체로 설계 하는 것</p>\n</blockquote>\n<p><br><br></p>\n<h3 id=\"특징\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A7%95\" aria-label=\"특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특징</h3>\n<p>객체지향 프로그래밍은 소프트웨어를 개발할 때 현실 세계의 객체를 모델링하고, 이러한 객체들 간의 상호 작용을 중심으로 프로그래밍하는 방법론입니다.</p>\n<ul>\n<li>재사용성: 상속을 통해 코드의 재사용성을 높일 수 있다.</li>\n<li>생산성 향상: 잘 설계된 클래스를 만들어서 독립적인 객체를 사용함으로써 개발의 생산성을 향상시킬 수 있다.</li>\n<li>자연적인 모델링: 일상생활에서 모습의 구조가 객체에 자연스럽게 녹아들었기 때문에 생각하고 있는 것을 그대로 자연스럽게 구현할 수 있다. (기능별로 나눠서 구현한다거나,,)</li>\n<li>유지보수의 우수성: 기존 기능을 수정 시 함수를 새롭게 바꾸더라도 캡슐화 되어 그 함수의 세부 정보가 은닉되어 있기 때문에 주변에 미치는 영향을 최소화 하기 때문에 유지보수의 우수성을 갖는다. 새로운 객체의 종류를 추가 시에는 상속을 통해서 기존의 기능을 활용하고, 존재하지 않은 새로운 속성만 추가하면 되므로 매우 경제적이다.</li>\n</ul>\n<p><br><br></p>\n<h3 id=\"추상화\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"추상화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추상화</h3>\n<ul>\n<li>복잡한 시스템을 간단한 개념으로 변환하는 프로세스</li>\n<li>코드의 간결성 - 추상화를 통해 코드의 복잡성을 줄이고 이해하기 쉽게 만들어줌</li>\n<li>타입 안정성 - 타입 안정성을 제공하여 런타임 오류의 가능성을 줄임</li>\n<li>확장성 - 추상 클래스를 사용하면 새로운 기능을 추가하기 쉬움.</li>\n</ul>\n<p>즉, 현실세계의 사물을 객체로 보고, 필요한 공통특성만 다루어 현실의 복잡성을 제거하고 목적에 집중할 수 있도록 합니다.</p>\n<p><br><br></p>\n<h4 id=\"procotol로-추상화-하기\" style=\"position:relative;\"><a href=\"#procotol%EB%A1%9C-%EC%B6%94%EC%83%81%ED%99%94-%ED%95%98%EA%B8%B0\" aria-label=\"procotol로 추상화 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Procotol로 추상화 하기</h4>\n<p>아래 예제는 동물(강아지, 고양이) 에 공통된 특징을 protocol 바탕으로 추상화 한 것 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">는 왈왈!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">는 야옹!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> myDog<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Animal</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"진돌이\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> myCat<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Animal</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"길동이\"</span></span><span class=\"token punctuation\">)</span>\n\nmyDog<span class=\"token punctuation\">.</span><span class=\"token function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 진돌이는 왈왈!</span>\nmyCat<span class=\"token punctuation\">.</span><span class=\"token function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 길동이는 야옹!</span>\n</code></pre></div>\n<p align=\"center\">\n  <img src=\"https://velog.velcdn.com/images/hsungjin__/post/3a7faba4-dfc6-4ee7-b50c-5c11cdab7073/image.png\"> <br>\n</p>\n<p>이렇게 Animal이라는 프로토콜로 동물의 울음소리 속성과 메서드들을 선언해 줍니다.</p>\n<p>그리고 Dog, Cat 객체 클레스 생선시 Animal 프로토콜을 채택하여 name 과 makeNoise 함수에 각자 맞게 구현해 줍니다.</p>\n<p><br><br></p>\n<h4 id=\"class로-추상화-하기\" style=\"position:relative;\"><a href=\"#class%EB%A1%9C-%EC%B6%94%EC%83%81%ED%99%94-%ED%95%98%EA%B8%B0\" aria-label=\"class로 추상화 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class로 추상화 하기</h4>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">는 왈왈\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">는 야옹\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> myDog<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Animal</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"진돌이\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> myCat<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Animal</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"길동이\"</span></span><span class=\"token punctuation\">)</span>\n\nmyDog<span class=\"token punctuation\">.</span><span class=\"token function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 진돌이는 왈왈!</span>\nmyCat<span class=\"token punctuation\">.</span><span class=\"token function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 길동이는 야옹!</span></code></pre></div>\n<p align=\"center\">\n  <img src=\"https://velog.velcdn.com/images/hsungjin__/post/ac978259-1cde-4e48-bc09-0c3c4d05d8c7/image.png\"> <br>\n</p>\n<p>이렇게 구현이 가능합니다.</p>\n<p>Animal 클래스 타입으로 만들어 주고 Animal을 상속받는 하위 객체에서 override를 사용하여 각 역할을 프로토콜을 채택하고 실제 구현하는 것 처럼 기능을 구현 할 수 있지만,</p>\n<p>프로토콜로 충분히 더 간단하게 사용할 수 있습니다.</p>\n<p><br><br></p>\n<h3 id=\"다형성\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%ED%98%95%EC%84%B1\" aria-label=\"다형성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다형성</h3>\n<p>Polymorphism이라고 부르는 다형성은 사전적 의미로는 하나의 타입에 여러 형태를 가질 수 있는 성질을 말합니다.</p>\n<p>즉, 같은 속성 및 기능에 대해 다양한 현태의 객체가 서로 다른 동작을 수행하게 하는 것이죠!</p>\n<p>우리가 바로 위에서 추상화를 하면서 계속 같이 자연스럽게 나왔던 부분인데요.</p>\n<p>Dog는 Animal을 상속 및 채택하여 makeNoise 메서드를 구현하고 Cat도 그와 마찬가지죠.</p>\n<p>그런데 makeNoise 메서드의 기능은 Dog와 Cat이 서로 다릅니다.</p>\n<p>이렇게 Dog, Cat은 모두 부모 클래스나 프로토콜인 Animal의 makeNoise() 메서드를 공통적으로 가지고 있지만, 각각 다른 동작을 수행합니다.</p>\n<blockquote>\n<p>이처럼 다형성은 같은 함수 이름을 가진 메서드가 객체의 타입에 따라 다르게 동작하는 특성입니다.</p>\n</blockquote>\n<p>결국 다형성은 하나의 인터페이스를 가지고 있지만, 다른 객체마다 그 인터페이스에 따라 다양한 동작을 수행할 수 있도록 하는 방법 입니다.</p>\n<p>코드의 재사용성을 높여주는 동시에 유지보수를 훨씬 더 편하게 해줄 수 있습니다.</p>\n<p align=\"center\">\n  <img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FFgeRG%2FbtrMqtA5Xij%2FkdXRDU9TgBhdYuCaDOH4wk%2Fimg.png\">\n</p>\n<p><br><br></p>\n<h4 id=\"오버라이드override\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%93%9Coverride\" aria-label=\"오버라이드override permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오버라이드(override)</h4>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"왈왈\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"야옹\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> myDog <span class=\"token operator\">=</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> myCat <span class=\"token operator\">=</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmyDog<span class=\"token punctuation\">.</span><span class=\"token function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 왈왈</span>\nmyCat<span class=\"token punctuation\">.</span><span class=\"token function\">makeNoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 야옹</span>\n</code></pre></div>\n<p>이렇게 Animal 클래스를 상속받고 오버라이드 키워드를 붙여 해당 makeNoise 메서드를 재정의 해줍니다.</p>\n<p>또한 오버라이딩 말고도 오버로딩(Overloading)이라는 것도 있습니다.</p>\n<p>오버로딩은 같은 이름의 메서드 명을 가지면서 매개변수의 타입과 갯수가 다른 경우를 뜻합니다.</p>\n<p><br><br></p>\n<h4 id=\"오버로딩overroading\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9overroading\" aria-label=\"오버로딩overroading permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오버로딩(overroading)</h4>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> primate <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> gorilla\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> mammalia <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> dog\n    <span class=\"token keyword\">case</span> cat\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">printAnimal</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">:</span> primate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"영장류\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">printAnimal</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">:</span> mammalia<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"포유류\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> animal <span class=\"token operator\">=</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nanimal<span class=\"token punctuation\">.</span><span class=\"token function\">printAnimal</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>gorilla<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 영장류</span>\nanimal<span class=\"token punctuation\">.</span><span class=\"token function\">printAnimal</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>dog<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 표유류</span></code></pre></div>\n<p>간단하게 동물을 영장류, 포유류 열거형 타입으로 만들어줬습니다.</p>\n<p>이때 Animal 객체 구현 시 같은 메서드 명을 가진 printAnimal을 가지고 매개변수의 타입만 다른 두개의 메서드를 만들어 줬습니다.</p>\n<p>그리고 실제 animal 인스턴스를 만들고 printAnimal 메서드 호출 시 method 매개 변수에 primate, mammalia에 해당하는 각기 다른 인자를 넣어주면 그에 맞게 동장합니다.</p>\n<p>이것이 오버로딩 입니다.</p>\n<p><br><br></p>\n<h3 id=\"캡슐화\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94\" aria-label=\"캡슐화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캡슐화</h3>\n<p>객체의 내부 구현을 외부에서 숨기고, 오직 공개된 인터페이스만을 통해 객체에 접근할 수 있도록 하는 것을 의미합니다.</p>\n<p>이를 통해 객체의 상태를 보호하고 안정성을 유지할 수 있습니다.</p>\n<p>Swift에서는 캡슐화를 위해 속성 (Properties)과 메서드 (Methods)에 대한 접근 제어 수준 (Access Control)을 사용합니다.</p>\n<p>다음은 간단한 예제를 통해 Swift에서의 캡슐화를 설명하겠습니다.</p>\n<p>예제에서는 Person 클래스를 정의하고, 이 클래스의 내부 속성에 대한 접근을 캡슐화할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 내부 속성은 private으로 선언하여 외부에서 접근 불가능하게 함</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 외부에서 접근 가능한 메서드를 통해 속성에 접근</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"안녕하세요, 제 이름은 </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">이고, </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">age</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">살입니다.\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 외부에서 속성에 직접 접근하지 못하도록 하는 메서드</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">haveBirthday</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        age <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">이 생일을 맞이하여 </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">age</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">살이 되었습니다.\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 외부에서 Person 클래스의 인스턴스 생성</span>\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"황성진\"</span></span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 외부에서는 private으로 선언된 속성에 직접 접근할 수 없음</span>\nperson<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// 에러 발생!</span>\n\n<span class=\"token comment\">// 외부에서는 공개된 메서드를 통해 속성에 접근</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 안녕하세요, 제 이름은 황성진이고, 26살입니다.</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">haveBirthday</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 황성진이 생일을 맞이하여 27살이 되었습니다.</span></code></pre></div>\n<p>위의 예제에서 Person 클래스의 name과 age 속성은 private으로 선언되어 있어 외부에서 직접 접근할 수 없습니다.</p>\n<p>대신, introduce()와 haveBirthday() 메서드를 통해 속성에 접근할 수 있습니다.</p>\n<p>이를 통해 캡슐화가 구현되어 객체의 내부 상태를 외부로부터 보호하고 있습니다.</p>\n<p><br><br></p>\n<h3 id=\"상속\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%86%8D\" aria-label=\"상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상속</h3>\n<p>Swift에서 상속은 클래스 간의 관계를 구축하여 코드를 재사용하고 확장하는 데 사용되는 객체 지향 프로그래밍의 핵심 개념 중 하나입니다.</p>\n<p>부모 클래스에서 정의된 속성과 메서드를 자식 클래스에서 상속받아 사용할 수 있습니다.</p>\n<p>이를 통해 코드의 재사용성이 높아지며, 계층적인 구조를 형성할 수 있습니다.</p>\n<p>다음은 간단한 예제를 통해 Swift에서의 상속을 설명하겠습니다.</p>\n<p>예제 에서는 Vehicle 부모 클래스를 정의하고, 이를 상속받는 Car 자식 클래스를 만들어 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 부모 클래스</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> brand<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>brand<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> brand\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"차량이 출발합니다.\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"차량이 정지합니다.\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 자식 클래스</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> model<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>brand<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model\n        <span class=\"token comment\">// 부모 클래스의 이니셜라이저 호출</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>brand<span class=\"token punctuation\">:</span> brand<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 부모 클래스에서 상속받은 메서드를 재정의</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">brand</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">model</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">가 출발합니다.\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 자식 클래스에서 추가된 메서드</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">honk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">brand</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">model</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">가 경적을 울립니다.\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 자식 클래스의 인스턴스 생성</span>\n<span class=\"token keyword\">let</span> myCar <span class=\"token operator\">=</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span>brand<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"현대\"</span></span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"벨로스터\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 부모 클래스에서 상속받은 메서드 호출</span>\nmyCar<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 현대 벨로스터가 출발합니다.</span>\nmyCar<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 차량이 정지합니다.</span>\n\n<span class=\"token comment\">// 자식 클래스에서 추가된 메서드 호출</span>\nmyCar<span class=\"token punctuation\">.</span><span class=\"token function\">honk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 현대 벨로스터가 경적을 울립니다.</span></code></pre></div>\n<p><br><br></p>\n<h2 id=\"상충의-예제\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%B6%A9%EC%9D%98-%EC%98%88%EC%A0%9C\" aria-label=\"상충의 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상충의 예제</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Generic animal sound\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Woof!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Zoo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> animals<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Animal</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">addAnimal</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        animals<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드에서 Animal 클래스는 name 속성을 가지고 있고, Dog 클래스는 이를 상속받아 특정한 소리를 출력합니다.</p>\n<p>그리고 Zoo 클래스는 Animal 타입의 배열을 관리합니다.</p>\n<p>Zoo 클래스는 Animal 배열을 외부에 노출하고 있으며, 이로 인해 캡슐화가 깨집니다.</p>\n<p>외부에서는 어떤 동물이 Zoo에 추가되었는지를 쉽게 알 수 있습니다.</p>\n<p>즉, Zoo 클래스가 내부의 동물 목록에 대한 세부 정보를 숨기지 못하고 노출하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Generic animal sound\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Zoo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> animals<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Animal</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">addAnimal</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        animals<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">displayAnimalNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> animal <span class=\"token keyword\">in</span> animals <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Zoo 클래스에서는 Animal 객체의 getName() 메서드를 통해 동물의 이름을 가져올 수 있도록 수정합니다.</p>\n<p>Zoo 클래스는 외부에 동물 목록의 세부 정보를 노출하지 않으면서, 필요한 정보에 대한 접근은 getName() 메서드를 통해 가능해졌습니다.</p>\n<p>이렇게 함으로써 캡슐화를 보호하면서도 Zoo 클래스에서 동물의 이름을 가져올 수 있게 되었습니다.</p>\n<p><br><br></p>\n<h2 id=\"참고-블로그\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EB%B8%94%EB%A1%9C%EA%B7%B8\" aria-label=\"참고 블로그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 블로그</h2>\n<p><a href=\"https://didu-story.tistory.com/320\">(iOS/Swift 기준) 객체지향 프로그래밍 (OOP)</a></p>\n<p><a href=\"https://green1229.tistory.com/429#recentComments\">추상화와 다형성</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EA%B0%9D%EC%B2%B4object-%EB%9E%80\">객체(Object) 란?</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-oop-object-oriented-programming\">객체지향 프로그래밍 (OOP, Object Oriented Programming)</a></p>\n<ul>\n<li>\n<p><a href=\"#%ED%8A%B9%EC%A7%95\">특징</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B6%94%EC%83%81%ED%99%94\">추상화</a></p>\n<ul>\n<li><a href=\"#procotol%EB%A1%9C-%EC%B6%94%EC%83%81%ED%99%94-%ED%95%98%EA%B8%B0\">Procotol로 추상화 하기</a></li>\n<li><a href=\"#class%EB%A1%9C-%EC%B6%94%EC%83%81%ED%99%94-%ED%95%98%EA%B8%B0\">Class로 추상화 하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A4%ED%98%95%EC%84%B1\">다형성</a></p>\n<ul>\n<li><a href=\"#%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%93%9Coverride\">오버라이드(override)</a></li>\n<li><a href=\"#%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9overroading\">오버로딩(overroading)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94\">캡슐화</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%83%81%EC%86%8D\">상속</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%83%81%EC%B6%A9%EC%9D%98-%EC%98%88%EC%A0%9C\">상충의 예제</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0-%EB%B8%94%EB%A1%9C%EA%B7%B8\">참고 블로그</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 01, 2024","title":"Swift 객체지향프로그래밍(OOP) 이란?","categories":"Swift","author":"황성진","emoji":"🙃"},"fields":{"slug":"/OPP/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://hsungjin.github.io","comments":{"utterances":{"repo":"Hsungjin/Hsungjin.github.io"}}}}},"pageContext":{"slug":"/NaverMap/","nextSlug":"/OPP/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}