{"componentChunkName":"component---src-templates-blog-template-js","path":"/delegate/","result":{"data":{"cur":{"id":"01f7db59-d847-5402-acf8-25a216220c13","html":"<h2 id=\"들어가기-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기 앞서</h2>\n<p>기존 SwiftUI 로 입문을 한 입장에서 Delegate Pattern 이란 단어가 약간 생소하였다.</p>\n<p>왜 뷰간에 데이터 전달을 하는데 Delegate Pattern을 사용하는거지?</p>\n<p>SwiftUI에선 State, Binding으로 전달하면 되는데? 이런 의문을 갖고 공부를 하기 시작했다.</p>\n<p><br><br></p>\n<h2 id=\"viewcontroller간-데이터를-주고-받는-방식\" style=\"position:relative;\"><a href=\"#viewcontroller%EA%B0%84-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%A3%BC%EA%B3%A0-%EB%B0%9B%EB%8A%94-%EB%B0%A9%EC%8B%9D\" aria-label=\"viewcontroller간 데이터를 주고 받는 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ViewController간 데이터를 주고 받는 방식</h2>\n<p>Swift에선 ViewController간의 데이터를 주고 받는 방법이 여러가지가 있다.</p>\n<ol>\n<li>직접 프로퍼티에 접근</li>\n<li>함수를 통한 접근</li>\n<li>Segue</li>\n<li>Delegate</li>\n<li>Closure</li>\n<li>NotificationCenter</li>\n</ol>\n<p>이렇게 다양한 방법들이 있는데 이번엔 Delegate 에 대해서 공부해보았다.</p>\n<p><br><br></p>\n<h3 id=\"그래서-delegate가-뭘까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-delegate%EA%B0%80-%EB%AD%98%EA%B9%8C\" aria-label=\"그래서 delegate가 뭘까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 Delegate가 뭘까?</h3>\n<p>UIKit에서 가장쉽게 접하는 예제는 UITableView를 구현하기 위해서 UITableViewDateSource와 UITableViewDelegate를 채택하여 사용한다.</p>\n<p>근데 막상 사용하는 입장에서 이것에 대해 정의하는것은 쉽지 않다.</p>\n<p>Delegate란 단어는 “위임하다” 라는 사전적 의미를 갖고있다.</p>\n<p>Delegate Pattern 은 위임자를 갖고있는 객체가 다른 객체에게 자신의 일을 위임하는 형태의 디자인 패턴이다.</p>\n<p>아래는 간단한 예제의 입력값을 받는 예제로 FirstViewContoroller 와 SecondViewController 간의 데이터 통신을 알아보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token class-name\">DeveloperEntryDelegate</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">AnyObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">textDeveloperPlatform</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> text<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">textDeveloperLanguage</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> text<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FirstViewController</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIViewController</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token attribute atrule\">@IBOutlet</span> <span class=\"token keyword\">weak</span> <span class=\"token keyword\">var</span> labelPlatformDetails<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UILabel</span><span class=\"token operator\">!</span>\n    <span class=\"token attribute atrule\">@IBOutlet</span> <span class=\"token keyword\">weak</span> <span class=\"token keyword\">var</span> labelDeveloperLanguage<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UILabel</span><span class=\"token operator\">!</span>\n    \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">//MARK: - Navigation</span>\n    <span class=\"token attribute atrule\">@IBAction</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">actionAddDetail</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> sender<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIButton</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">guard</span>  <span class=\"token keyword\">let</span> secondView <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>storyboard<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">instantiateViewController</span><span class=\"token punctuation\">(</span>withIdentifier<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"SecondViewController\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">SecondViewController</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"View Controller not found\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        secondView<span class=\"token punctuation\">.</span>delegate <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span>\n        navigationController<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">pushViewController</span><span class=\"token punctuation\">(</span>secondView<span class=\"token punctuation\">,</span> animated<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">FirstViewController</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">DeveloperEntryDelegate</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">textDeveloperPlatform</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> text<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n        labelPlatformDetails<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Platform: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">text</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">textDeveloperLanguage</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> text<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n        labelDeveloperLanguage<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Language: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">text</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SecondViewController</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIViewController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">weak</span> <span class=\"token keyword\">var</span> delegate<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DeveloperEntryDelegate</span><span class=\"token operator\">?</span>\n    \n    <span class=\"token attribute atrule\">@IBOutlet</span> <span class=\"token keyword\">weak</span> <span class=\"token keyword\">var</span> textPlateform<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UITextField</span><span class=\"token operator\">!</span>\n    <span class=\"token attribute atrule\">@IBOutlet</span> <span class=\"token keyword\">weak</span> <span class=\"token keyword\">var</span> textLanguage<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UITextField</span><span class=\"token operator\">!</span>\n    \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">viewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token attribute atrule\">@IBAction</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">actionDone</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> sender<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIButton</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>navigationController<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">popViewController</span><span class=\"token punctuation\">(</span>animated<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>delegate<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">textDeveloperPlatform</span><span class=\"token punctuation\">(</span>textPlateform<span class=\"token punctuation\">.</span>text <span class=\"token operator\">??</span> <span class=\"token string-literal\"><span class=\"token string\">\"\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>delegate<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">textDeveloperLanguage</span><span class=\"token punctuation\">(</span>textLanguage<span class=\"token punctuation\">.</span>text <span class=\"token operator\">??</span> <span class=\"token string-literal\"><span class=\"token string\">\"\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>textDeveloperPlatform 과 textDeveloperLanguage 함수를 갖는 DeveloperEntryDelegate 프로토콜을 선언해준다.\n그리고 delegate 변수를 SecondViewController에서 선언해 주는데 이 변수의 자료형은 DeveloperEntryDelegate 프로토콜로 선언하였다.\n이로써 delegate 변수는 일을 위임할 준비를 마친 것이다.</p>\n<p>actionDone() 메서드에는 Second View에서 버튼이 눌렸을때 delegat 변수를 통해 위임받은 객체에서 textDeveloperPlatform 와 textDeveloperLanguage 를 실행하도록 하였다.</p>\n<p>FirstView의 actionAddDetail 메서드를 만들어 주었고,\nactionAddDetail 메서드에는 SecondView를 찾아서 보여주고, Second View의 delegate 변수와 연결해주는 코드가 있다.</p>\n<p>DeveloperEntryDelegate를 채택한 FirstViewController에는 위임자가 메서드를 호출하였을 때 실행할 함수들에 대해 작성해 주어야 한다.</p>\n<p>이렇게 작성한 함수를 통해 Second View 에서 Done 버튼이 눌러 일을 시키면 First View에서 그 일을 대신 수행하는 것이다.</p>\n<p>여기서 Second View의 위임자는 일을 시키기만 할 뿐이지 어떤 일을 하는지에 대한 구체적인 내용을 모른다.\n이것이 Delegate 패턴의 장점이다.</p>\n<p><br><br></p>\n<h3 id=\"delegate-패턴은-왜-사용해야될까\" style=\"position:relative;\"><a href=\"#delegate-%ED%8C%A8%ED%84%B4%EC%9D%80-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%EB%90%A0%EA%B9%8C\" aria-label=\"delegate 패턴은 왜 사용해야될까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Delegate 패턴은 왜 사용해야될까?</h3>\n<p>위의 예제들에서 위임자들은 그저 일을 시킬 뿐, 일을 어떻게 처리해야하는지는 모른다.\n일을 처리하는 방법은 그 일을 수행하는 객체에 구현되어 있다.\n이미 눈치 챈 사람들도 있겠지만, 이렇게 작성하면 코드를 재사용하고 유지보수하기 쉬워진다.\n어떤 일을 해야 하는지를 정해놓기만 하고, 상황에 맞는 코드를 작성하면 된다.\n예를 들어 우리가 어떤 작업을 처리해야 하는데, 동일한 작업인데도 불구하고 객체마다 다른 내용을 처리해야한다고 생각해보자.\n이럴 경우 동일한 작업에 대해서는 함수를 전달하기만 하고, 각각의 내용은 전달 받은 객체에서 처리하기만 하면 된다.\n또한 작업을 전달할 때 공통된 부분을 제외하고 처리해야 하는 부분만을 전달하여 처리할 수도 있다.</p>\n<p><br><br></p>\n<h3 id=\"델리게이트-옵저버-콜백함수의-비교\" style=\"position:relative;\"><a href=\"#%EB%8D%B8%EB%A6%AC%EA%B2%8C%EC%9D%B4%ED%8A%B8-%EC%98%B5%EC%A0%80%EB%B2%84-%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98%EC%9D%98-%EB%B9%84%EA%B5%90\" aria-label=\"델리게이트 옵저버 콜백함수의 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>델리게이트, 옵저버, 콜백함수의 비교</h3>\n<p>CallBack 함수는 특정 작업이 완료 후 실행되어야 하는 함수이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">fetchData</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">:</span> <span class=\"token attribute atrule\">@escaping</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 비동기로 데이터를 갖고오는 작업 가정</span>\n\n    <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"가져온 데이터\"</span></span>\n    <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nfetchData <span class=\"token punctuation\">{</span> data <span class=\"token keyword\">in</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"받은 데이터: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">data</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<p>옵저버 패턴은 객체의 상태 변화를 관찰하는 관찰자(옵저버) 목록을 객체에 등록한 후, 객체 상태 변화가 있을 때마다 이 관찰자들에게 변화를 알리는 디자인 패턴으로 일대다의 의존성을 가지며, MVC, MVVM 등의 아키텍처에서 상태 관리를 위해 자주 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">NotificationCenter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">:</span> <span class=\"token other-directive property\">#selector</span><span class=\"token punctuation\">(</span><span class=\"token function\">handleNotification</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>someNotification<span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token attribute atrule\">@objc</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">handleNotification</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> notification<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"알림 받음\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">deinit</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">NotificationCenter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Name</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> someNotification <span class=\"token operator\">=</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"someNotification\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 옵저버 생성</span>\n<span class=\"token keyword\">let</span> observer <span class=\"token operator\">=</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 알림 발송</span>\n<span class=\"token class-name\">NotificationCenter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>someNotification<span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<ul>\n<li>\n<p><strong>델리게이트 패턴</strong>은 객체 간의 일대일 커뮤니케이션을 위해, 특정 객체가 다른 객체의 행동을 대신 수행하도록 합니다.</p>\n</li>\n<li>\n<p><strong>콜백 함수</strong>는 비동기 작업의 완료 후 실행되어야 하는 로직을 처리하기 위해 사용되며, 클로저를 통해 구현됩니다.</p>\n</li>\n<li>\n<p><strong>옵저버 패턴</strong>은 하나의 객체가 변경될 때 그 변경 사항을 다수의 객체에게 알리고자 할 때 사용됩니다. 이 패턴은 앱의 다양한 부분에서 낮은 결합도를 유지하면서 효과적인 이벤트 기반 커뮤니케이션을 가능하게 합니다.</p>\n</li>\n</ul>\n<p><br><br></p>\n<h3 id=\"delegate-에서-반환값을-사용하는-경우는\" style=\"position:relative;\"><a href=\"#delegate-%EC%97%90%EC%84%9C-%EB%B0%98%ED%99%98%EA%B0%92%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0%EB%8A%94\" aria-label=\"delegate 에서 반환값을 사용하는 경우는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Delegate 에서 반환값을 사용하는 경우는?</h3>\n<p>UIKit에서 TableView를 생각해보면 쉽게 생각할수 있다.\n만약 MyViewController 라는 ViewController 가 있다고 가정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">MyViewController</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">UITableViewDataSource</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UITableViewDelegate</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// UITableViewDataSource 메소드</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">tableView</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> tableView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UITableView</span><span class=\"token punctuation\">,</span> numberOfRowsInSection section<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 섹션당 행의 개수를 반환</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">10</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">tableView</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> tableView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UITableView</span><span class=\"token punctuation\">,</span> cellForRowAt indexPath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">IndexPath</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">UITableViewCell</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 셀을 생성하고 구성</span>\n        <span class=\"token keyword\">let</span> cell <span class=\"token operator\">=</span> <span class=\"token class-name\">UITableViewCell</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span> reuseIdentifier<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"cell\"</span></span><span class=\"token punctuation\">)</span>\n        cell<span class=\"token punctuation\">.</span>textLabel<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"행 </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">indexPath<span class=\"token punctuation\">.</span>row</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span>\n        <span class=\"token keyword\">return</span> cell\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">tableView</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> tableView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UITableView</span><span class=\"token punctuation\">,</span> heightForRowAt indexPath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">IndexPath</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">CGFloat</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 각 행의 높이를 반환</span>\n        <span class=\"token keyword\">if</span> indexPath<span class=\"token punctuation\">.</span>row <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">50.0</span> <span class=\"token comment\">// 짝수 번째 행은 높이 50</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">100.0</span> <span class=\"token comment\">// 홀수 번째 행은 높이 100</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// UITableViewDelegate 메소드</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">tableView</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> tableView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UITableView</span><span class=\"token punctuation\">,</span> didSelectRowAt indexPath<span class=\"token punctuation\">:</span> <span class=\"token class-name\">IndexPath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Row </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">indexPath<span class=\"token punctuation\">.</span>row</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> 선택됨\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>테이블 뷰는 콘텐츠의 표시와 사용자 인터랙션을 처리하기 위해 델리게이트(UITableViewDelegate)와 데이터 소스(UITableViewDataSource)에 일부 책임을 위임하여 사용한다.</p>\n<p>리턴 값과 같은경우에는 테이블뷰의 각셀의 높이를 조절하기위해 사용한다.</p>\n<p><br><br></p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://velog.io/@nala/iOS-Delegate-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%B4%EB%B3%B4%EC%9E%90\">Delegate 패턴을 이해해보자</a>\n<a href=\"https://velog.io/@zooneon/Delegate-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C\">Delegate 패턴이란 무엇일까?</a>\n<a href=\"https://medium.com/@nimjea/delegation-pattern-in-swift-4-2-f6aca61f4bf5\">Delegation Pattern in Swift</a></p>\n<p><br><br></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\">들어가기 앞서</a></p>\n</li>\n<li>\n<p><a href=\"#viewcontroller%EA%B0%84-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%A3%BC%EA%B3%A0-%EB%B0%9B%EB%8A%94-%EB%B0%A9%EC%8B%9D\">ViewController간 데이터를 주고 받는 방식</a></p>\n<ul>\n<li><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-delegate%EA%B0%80-%EB%AD%98%EA%B9%8C\">그래서 Delegate가 뭘까?</a></li>\n<li><a href=\"#delegate-%ED%8C%A8%ED%84%B4%EC%9D%80-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%EB%90%A0%EA%B9%8C\">Delegate 패턴은 왜 사용해야될까?</a></li>\n<li><a href=\"#%EB%8D%B8%EB%A6%AC%EA%B2%8C%EC%9D%B4%ED%8A%B8-%EC%98%B5%EC%A0%80%EB%B2%84-%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98%EC%9D%98-%EB%B9%84%EA%B5%90\">델리게이트, 옵저버, 콜백함수의 비교</a></li>\n<li><a href=\"#delegate-%EC%97%90%EC%84%9C-%EB%B0%98%ED%99%98%EA%B0%92%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0%EB%8A%94\">Delegate 에서 반환값을 사용하는 경우는?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","excerpt":"들어가기 앞서 기존 SwiftUI 로 입문을 한 입장에서 Delegate Pattern 이란 단어가 약간 생소하였다. 왜 뷰간에 데이터 전달을 하는데 Delegate Pattern을 사용하는거지? SwiftUI에선 State, Binding으로 전달하면 되는데? 이런 의문을 갖고 공부를 하기 시작했다.  ViewController간 데이터를 주고 받는 방식 Swift에선 ViewController간의 데이터를 주고 받는 방법이 여러가지가 있다. 직접 프로퍼티에 접근 함수를 통한 접근 Segue Delegate Closure NotificationCenter 이렇게 다양한 방법들이 있는데 이번엔 Delegate 에 대해서 공부해보았다.  그래서 Delegate가 뭘까? UIKit에서 가장쉽게 접하는 예제는 UITableView를 구현하기 위해서 UITableViewDateSource와 UITableViewDelegate를 채택하여 사용한다. 근데 막상 사용하는 입장에서 이것에 대해 …","frontmatter":{"date":"March 25, 2024","title":"Swift Delegate Pattern 이란?","categories":"Swift","author":"황성진","emoji":"🙃"},"fields":{"slug":"/delegate/"}},"next":{"id":"c799c317-1990-579a-b69e-3d67db26b432","html":"<h2 id=\"들어가기-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기 앞서</h2>\n<p>Xcode 프로젝트 Assert에 이미지를 추가하여 이미지를 로드하는 경우도 있지만, 네트워킹을 통해 웹의 이미지를 로드하는 경우는 일일이 이미지를 저장하여 불러오는 것이 불가능하다.</p>\n<p>이때 Kingfisher 또는 Async Image 를 사용하면 웹 이미지를 보여줄 수 있다.</p>\n<p>Async Image는 SwiftUI가 iOS 15부터 제공하는 새로운 기능으로, URL에서 이미지를 비동기적으로 로드하고 캐시하는 역할을 합니다.</p>\n<p>이로 인해 이미지 로딩 및 표시가 더욱 원활하고 성능이 향상됩니다.</p>\n<p>Kingfisher는 Swift 기반의 이미지 다운로딩 및 캐싱 라이브러리로, UIKit 및 SwiftUI에서 사용할 수 있습니다.</p>\n<p>Kingfisher를 사용하면 더 많은 커스터마이제이션과 기능을 활용할 수 있습니다.</p>\n<p><br><br></p>\n<h2 id=\"asyncimage\" style=\"position:relative;\"><a href=\"#asyncimage\" aria-label=\"asyncimage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AsyncImage</h2>\n<p>이미지를 비동기적으로 로드하고 표시하는 뷰입니다.</p>\n<p>Async Image는 SwiftUI에서 도입된 이미지 로딩 및 표시를 위한 내장된 컴포넌트입니다.</p>\n<p>이를 사용하면 이미지를 비동기적으로 로드하고 캐싱하여 효율적으로 처리할 수 있습니다.</p>\n<p><br><br></p>\n<h3 id=\"asyncimage-예제\" style=\"position:relative;\"><a href=\"#asyncimage-%EC%98%88%EC%A0%9C\" aria-label=\"asyncimage 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AsyncImage 예제</h3>\n<h4 id=\"기본적인-사용-방법\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-label=\"기본적인 사용 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본적인 사용 방법</h4>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    <span class=\"token keyword\">var</span> imageURL <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://avatars.githubusercontent.com/u/120264964?v=4\"</span></span>\n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AsyncImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> heith<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>사용 결과 입니다.</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/4d2cf751-9068-4471-b37b-4664dc149397\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/41e7f4bf-3368-49b9-8f28-c31b3d61e507\">\n</p>\n<p>이미지가 로드될 때까지 뷰에는 사용 가능한 공간을 채우는 표준 자리 표시자가 표시됩니다.</p>\n<p>로드가 성공적으로 완료되면 보기가 업데이트되어 이미지가 표시됩니다.</p>\n<p>위의 예에서 이미지는 프레임보다 크므로 자리 표시자보다 크게 나타납니다.</p>\n<p>여기서 주의해야 할 점은 AsyncImage 에 프레임으로 크기를 설정해 주어도 이미지가 로드되기 이전의 뷰에만 사용이 가능하고 이미지에는 적용이 불가능 합니다.</p>\n<p>이것을 해결하고 이미지 관련 modifier 또한 적용하기 위해선 아래와 같이 사용해 주어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    <span class=\"token keyword\">var</span> imageURL <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://avatars.githubusercontent.com/u/120264964?v=4\"</span></span>\n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AsyncImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> image <span class=\"token keyword\">in</span>\n            image<span class=\"token punctuation\">.</span><span class=\"token function\">resizable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> placeholder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ProgressView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>다음과 같이 placeholder를 사용하면 이미지가 로드 되기전에 ProgressView가 나타난 후에 이미지가 나타나게 됩니다.</p>\n<p>그러면 에러를 처리하거나 하면 어떻게 해야될까요?</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">\n<span class=\"token comment\">// 조건문을 사용한 에러처리 방법</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    <span class=\"token keyword\">var</span> imageURL <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://avatars.githubusercontent.com/u/120264964?v=4\"</span></span>\n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AsyncImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> phase <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> image <span class=\"token operator\">=</span> phase<span class=\"token punctuation\">.</span>image <span class=\"token punctuation\">{</span>\n                image <span class=\"token comment\">// Displays the loaded image.</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> phase<span class=\"token punctuation\">.</span>error <span class=\"token operator\">!=</span> <span class=\"token nil constant\">nil</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>red <span class=\"token comment\">// Indicates an error.</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>blue <span class=\"token comment\">// Acts as a placeholder.</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// switch case를 이용한 에러처리 방법</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">AsyncImageView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> imageURL <span class=\"token operator\">=</span>  <span class=\"token string-literal\"><span class=\"token string\">\"https://avatars.githubusercontent.com/u/120264964?v=4\"</span></span>\n    \n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AsyncImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> phase <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">switch</span> phase <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">:</span>\n                <span class=\"token class-name\">ProgressView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                image\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">resizable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">scaledToFit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span>systemName<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"exclamationmark.icloud\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token attribute atrule\">@unknown</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                <span class=\"token class-name\">EmptyView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>다음과 같이 사용하면 에러 처리를 해 줄 수 있습니다.</p>\n<p><br><br></p>\n<h2 id=\"kingfisher\" style=\"position:relative;\"><a href=\"#kingfisher\" aria-label=\"kingfisher permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KingFisher</h2>\n<p>Kingfisher는 이미지 다운로드와 캐싱을 용이하게 만드는 강력한 라이브러리로, URL 기반의 이미지 로딩, 캐싱, 프리로딩 및 다양한 이미지 처리 옵션을 제공합니다.</p>\n<p>Kingfisher 공식 문서에서 제공하는 특징으로는</p>\n<ul>\n<li>\n<p>비동기 이미지 다운로드 및 캐싱.</p>\n</li>\n<li>\n<p>URLSession기반 네트워킹 또는 로컬 제공 데이터 에서 이미지를 로드합니다.</p>\n</li>\n<li>\n<p>유용한 이미지 프로세서와 필터가 제공됩니다.</p>\n</li>\n<li>\n<p>메모리와 디스크 모두를 위한 다중 계층 하이브리드 캐시.</p>\n</li>\n<li>\n<p>캐시 동작을 미세하게 제어합니다. 만료 날짜 및 크기 제한을 사용자 정의할 수 있습니다.</p>\n</li>\n<li>\n<p>성능 향상을 위해 다운로드를 취소하고 이전에 다운로드한 콘텐츠를 자동으로 재사용합니다.</p>\n</li>\n<li>\n<p>독립 구성 요소. 필요에 따라 다운로더, 캐싱 시스템, 이미지 프로세서를 별도로 사용하세요.</p>\n</li>\n<li>\n<p>이미지를 미리 가져오고 캐시에서 표시하여 앱을 강화합니다.</p>\n</li>\n<li>\n<p>UIImageView, NSImageView, NSButton, UIButton, NSTextAttachment, WKInterfaceImage, TVMonogramView및 CPListItemURL에서 이미지를 직접 설정하는 확장자입니다.</p>\n</li>\n<li>\n<p>이미지 설정 시 내장된 전환 애니메이션.</p>\n</li>\n<li>\n<p>이미지를 로드하는 동안 사용자 정의 가능한 자리 표시자 및 표시기.</p>\n</li>\n<li>\n<p>이미지 처리 및 이미지 포맷을 쉽게 확장할 수 있습니다.</p>\n</li>\n<li>\n<p>저데이터 모드 지원.</p>\n</li>\n<li>\n<p>SwiftUI 지원.</p>\n</li>\n</ul>\n<p><br><br></p>\n<h3 id=\"설치\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치</h3>\n<p>cocoapod</p>\n<blockquote>\n<p>pod ‘Kingfisher’</p>\n</blockquote>\n<p>swift package</p>\n<blockquote>\n<p><a href=\"https://github.com/onevcat/Kingfisher.git\">https://github.com/onevcat/Kingfisher.git</a></p>\n</blockquote>\n<p><br><br></p>\n<h3 id=\"간단-사용-예제\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%A0%9C\" aria-label=\"간단 사용 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단 사용 예제</h3>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">Kingfisher</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">KingFisher</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    <span class=\"token keyword\">let</span> imageURL <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://avatars.githubusercontent.com/u/120264964?v=4\"</span></span>\n    \n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">KFImage</span><span class=\"token punctuation\">(</span><span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>kingfisher를 사용하면 바로 이미지에 Modifier를 사용할 수 있습니다.</p>\n<p>그러면 오류를 처리하기 위해선 어떻게 해야 할 까요?</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">KingFisher</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    <span class=\"token keyword\">let</span> imageURL <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://avatars.githubusercontent.com/u/120264964?v=4\"</span></span>\n    \n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"KingFisher\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token class-name\">KFImage</span><span class=\"token punctuation\">(</span><span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token keyword\">in</span>\n                    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Error : </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">error</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">resizable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>다음과 같이 사용하면 오류 처리를 할 수 있습니다.</p>\n<p>Kingfisher 에서는 우리가 일반적으로 사용하는 Modifier 외에도 일부 다른 Modifier도 사용가능 합니다.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">    <span class=\"token class-name\">KFImage</span><span class=\"token punctuation\">(</span><span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> imageURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>placeholder <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Placeholder while downloading.</span>\n            <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span>systemName<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"arrow.2.circlepath.circle\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">font</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>largeTitle<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">opacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">retry</span><span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> interval<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">seconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>onSuccess <span class=\"token punctuation\">{</span> r <span class=\"token keyword\">in</span>\n            <span class=\"token comment\">// r: RetrieveImageResult</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"success: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">r</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>onFailure <span class=\"token punctuation\">{</span> e <span class=\"token keyword\">in</span>\n            <span class=\"token comment\">// e: KingfisherError</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"failure: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">e</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>또한 리스트에 넣어서 관리 할 수도 있습니다.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token class-name\">List</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ForEach</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">..&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> i <span class=\"token keyword\">in</span>\n        <span class=\"token class-name\">KFImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>urls<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">cancelOnDisappear</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<h2 id=\"그래서-두개가-뭐가-다를까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%91%90%EA%B0%9C%EA%B0%80-%EB%AD%90%EA%B0%80-%EB%8B%A4%EB%A5%BC%EA%B9%8C\" aria-label=\"그래서 두개가 뭐가 다를까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 두개가 뭐가 다를까?</h2>\n<ol>\n<li>\n<p>캐싱: Kingfisher는 이미지 캐싱에 있어서 매우 강력합니다. 디스크 및 메모리 캐싱을 지원하며, 맞춤 설정도 가능합니다. 반면, AsyncImage는 기본적인 캐싱만 제공합니다.</p>\n</li>\n<li>\n<p>이미지 처리 및 변환: Kingfisher는 이미지를 로드하기 전이나 후에 다양한 처리를 할 수 있는 옵션을 제공합니다. AsyncImage는 이러한 추가 기능이 없습니다.</p>\n</li>\n<li>\n<p>UI 커스터마이징: AsyncImage는 로딩 및 에러 상태에 대한 간단한 커스터마이징을 제공하지만, Kingfisher는 더 많은 커스터마이징 옵션을 제공합니다.</p>\n</li>\n<li>\n<p>성능: AsyncImage는 시스템에 통합되어 있어 빠른 성능을 제공합니다. 하지만 Kingfisher는 고급 기능을 많이 사용할수록 성능이 다소 떨어질 수 있습니다.</p>\n</li>\n</ol>\n<p><br><br></p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<ul>\n<li>\n<p>간단한 사용 목적이라면 AsyncImage가 적합할 수 있습니다.</p>\n</li>\n<li>\n<p>복잡하거나 고급 기능이 필요한 경우 Kingfisher가 더 나은 선택일 수 있습니다.</p>\n</li>\n</ul>\n<p><br><br></p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://github.com/onevcat/Kingfisher/wiki/SwiftUI-Support\">Kingfisher 공식문서</a>\n<a href=\"https://developer.apple.com/documentation/swiftui/asyncimage\">Apple async Image 공식문서</a></p>\n<p><br><br></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\">들어가기 앞서</a></p>\n</li>\n<li>\n<p><a href=\"#asyncimage\">AsyncImage</a></p>\n<ul>\n<li>\n<p><a href=\"#asyncimage-%EC%98%88%EC%A0%9C\">AsyncImage 예제</a></p>\n<ul>\n<li><a href=\"#%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\">기본적인 사용 방법</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#kingfisher\">KingFisher</a></p>\n<ul>\n<li><a href=\"#%EC%84%A4%EC%B9%98\">설치</a></li>\n<li><a href=\"#%EA%B0%84%EB%8B%A8-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%A0%9C\">간단 사용 예제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%91%90%EA%B0%9C%EA%B0%80-%EB%AD%90%EA%B0%80-%EB%8B%A4%EB%A5%BC%EA%B9%8C\">그래서 두개가 뭐가 다를까?</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 23, 2024","title":"SwiftUI KingFisher 와 Async Image 사용 비교","categories":"Swift","author":"황성진","emoji":"🙃"},"fields":{"slug":"/asyncIamge/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://hsungjin.github.io","comments":{"utterances":{"repo":"Hsungjin/Hsungjin.github.io"}}}}},"pageContext":{"slug":"/delegate/","nextSlug":"/asyncIamge/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}