{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Swift","result":{"pageContext":{"currentCategory":"Swift","categories":["All","Swift","API","AboueMe"],"edges":[{"node":{"id":"b5e45c8d-9571-5978-b03e-49d282544572","excerpt":"들어가기 앞서 해당 제네릭에 대해 작성된 내용은 야곰님의 스위프트 프로그래밍: Swift 5 책의 내용을 제가 이해할 부분과 추가로 알아간 내용에 대해 정리했습니다.  Generic에 이란? Swift에서 제공하는 강력한 기능 중 하나로 제네릭을 이용해 코드를 구현하면 어떤 타입에도 유연하게 대응할 수 있습니다. 또한 제네릭으로 구현한 기능과 타입은 재사용하기도 쉽고, 코드의 중복을 줄 일 수 있습니다. 야곰님의 책에 언급된 내용에 따르면 수많은 라이브러리에서 제네릭을 채택하고있다고 합니다! 제네릭은 기본적으로 타입 또는 메서드의 이름 뒤의 홀화살괄호 기호 <> 사이에 제네릭을 위한 타입 매개 변수를 써주어 제네릭을 사용할 것임을 표시합니다. 제네릭을 사용하고자 하는 타입 이름 <타입 매개변수> \n제네릭을 사용하고자 하는 함수 이름 <타입 매개변수> (함수 매개변수…)  Generic의 중요성 타입 안전성: 제네릭을 사용하면 다양한 타입에 대해 동일한 작업을 수행할 수 있으면서도 …","fields":{"slug":"/generics/"},"frontmatter":{"categories":"Swift","title":"Swift Generic에 대서","date":"January 15, 2024"}},"next":{"fields":{"slug":"/api/"}},"previous":null},{"node":{"id":"b633c8b2-d6dc-55f8-8b5b-54556246de01","excerpt":"객체(Object) 란? CS에서 객체는 물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에 자신의 속성을 가지고 있고 다른것과 식별 가능한 것을 말합니다. 즉 컴퓨터로 예를 들면 키보드, 마우스, 스피커 등이 객체가 될 수 있고, 이것들은 각각 입력, 소리출력, 인터페이스 조작 등의 기능이 포함 됩니다.  객체지향 프로그래밍 (OOP, Object Oriented Programming) 객체들의 상호작용으로 서술하는 프로그래밍 기법\n현실세계의 객체를 소프트웨어 객체로 설계 하는 것  특징 객체지향 프로그래밍은 소프트웨어를 개발할 때 현실 세계의 객체를 모델링하고, 이러한 객체들 간의 상호 작용을 중심으로 프로그래밍하는 방법론입니다. 재사용성: 상속을 통해 코드의 재사용성을 높일 수 있다. 생산성 향상: 잘 설계된 클래스를 만들어서 독립적인 객체를 사용함으로써 개발의 생산성을 향상시킬 수 있다. 자연적인 모델링: 일상생활에서 모습의 구조가 객체에 자연스럽게 녹아들었기 때문에 …","fields":{"slug":"/OPP/"},"frontmatter":{"categories":"Swift","title":"Swift 객체지향프로그래밍(OOP) 이란?","date":"January 01, 2024"}},"next":{"fields":{"slug":"/Hello/"}},"previous":{"fields":{"slug":"/NaverMap/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}