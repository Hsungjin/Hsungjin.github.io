{"componentChunkName":"component---src-templates-blog-template-js","path":"/api/","result":{"data":{"cur":{"id":"b782afdd-f568-5c6b-9779-1d7ad95b39da","html":"<h2 id=\"urlsession-이란\" style=\"position:relative;\"><a href=\"#urlsession-%EC%9D%B4%EB%9E%80\" aria-label=\"urlsession 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URLSession 이란?</h2>\n<p>Swift의 URLSession은 네트워크 작업을 수행하는 데 사용되는 API 중 하나입니다.</p>\n<p>URLSession은 URL을 통해 데이터를 가져오거나 전송하는 기능을 제공하며, 네트워크 요청 및 응답을 처리하는 데 유용합니다.</p>\n<p>URLSession은 비동기적으로 작동하며, 앱의 성능을 향상시키는 데 도움이 됩니다.</p>\n<p>URLSession은 기본적으로 세 가지 주요 작업을 수행합니다:</p>\n<ol>\n<li>\n<p>데이터 가져오기 (Data Fetching): 웹에서 데이터를 가져오는 데 사용됩니다. 주로 GET 요청과 함께 사용됩니다.</p>\n</li>\n<li>\n<p>데이터 전송 (Data Task): 서버에 데이터를 전송하는 데 사용됩니다. 주로 POST 또는 PUT 요청과 함께 사용됩니다.</p>\n</li>\n<li>\n<p>다운로드 작업 (Download Task): 파일이나 큰 데이터를 다운로드할 때 사용됩니다.</p>\n</li>\n</ol>\n<p><br><br></p>\n<h2 id=\"alamofire-란\" style=\"position:relative;\"><a href=\"#alamofire-%EB%9E%80\" aria-label=\"alamofire 란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Alamofire 란?</h2>\n<p>Alamofire는 Swift로 작성된 네트워킹 라이브러리로, URLSession을 기반으로 한 HTTP 요청 및 응답을 쉽게 다룰 수 있게 도와줍니다.</p>\n<p>Alamofire는 간편한 API, 네트워크 작업의 추상화, 자동으로 처리되는 헤더 및 응답의 파싱을 제공하여 개발자들이 네트워크 코드를 더 간편하게 작성할 수 있도록 돕는다는 특징이 있습니다.</p>\n<p>Alamofire의 주요 기능과 예제 코드를 살펴보겠습니다.</p>\n<ol>\n<li>\n<p>간편한 HTTP 요청: Alamofire는 HTTP 메서드(GET, POST, PUT, DELETE 등)에 대한 메서드를 제공하여 간단한 한 줄의 코드로 요청을 생성할 수 있습니다.</p>\n</li>\n<li>\n<p>파라미터 및 헤더 관리: 요청에 필요한 파라미터 및 헤더를 쉽게 추가할 수 있습니다.</p>\n</li>\n<li>\n<p>응답 처리: Alamofire는 응답을 쉽게 처리하고 JSON, String, 이미지 등의 데이터 형식으로 변환할 수 있도록 도와줍니다.</p>\n</li>\n<li>\n<p>업로드 및 다운로드 작업: 파일 업로드, 다운로드 등의 작업도 지원합니다.</p>\n</li>\n<li>\n<p>인증 및 보안: HTTP 기본 및 다이제스트 인증, SSL Pinning 등의 보안 기능을 지원합니다.</p>\n</li>\n</ol>\n<p><br><br></p>\n<h2 id=\"데이터-구조-정의\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EC%A0%95%EC%9D%98\" aria-label=\"데이터 구조 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 구조 정의</h2>\n<p>우선 URLSession 을 사용하거나 Alamofire를 사용해서 서버에서 json 구조의 데이터를 가져오기 위해서는 데이터 구조를 정의해야 됩니다.</p>\n<p><a href=\"https://itunes.apple.com/search?term=taylor+swift&#x26;entity=song\">itunesAPI</a></p>\n<p>데이터 구조는 다음 과 같이 생겼습니다.</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/fa4c0215-7ff7-4afa-8e54-27a51fc562ab\">\n</p>\n<p>처음 Json 구조를 접하신 분들은 무슨소리지 라는 생각이 드실 수 있습니다.</p>\n<p>하지만 구조만 이해하면 안에더 필요한 데이터의 구조를 정의하는 것은 어렵지 않습니다.</p>\n<p>제가 필요한 데이터는 결국 result 라는 배열안의 trackId, artistName, trackName, collectionName, artworkUrl100 이 필요하다고 가정하고 정의해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">Foundation</span>\n\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> result<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> trackId<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span>\n    <span class=\"token keyword\">var</span> artistName<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">var</span> trackName<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">var</span> collectionName<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">var</span> artworkUrl100<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음과 같이 struct를 정의해서 사용 할 수 있습니다.</p>\n<p><br><br></p>\n<h2 id=\"urlsession-사용해보기\" style=\"position:relative;\"><a href=\"#urlsession-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"urlsession 사용해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URLSession 사용해보기</h2>\n<p>위에 정의된 구조를 사용해서 데이터를 파싱해 보겠습니다.</p>\n<h3 id=\"urlsessionmanager\" style=\"position:relative;\"><a href=\"#urlsessionmanager\" aria-label=\"urlsessionmanager permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URLSessionManager</h3>\n<p>URL은 자신이 가져오고 싶은 URL 주소 위에서 정의한 itunes API 주소를 넣어줍니다.</p>\n<p>ObservableObject를 사용해서 다른 뷰에서 해당 데이터에 접근 가능하도록 선언해 주었습니다.</p>\n<p>guard let 구문을 통해 해당 URL 이 정상인지 확인합니다.</p>\n<p>async await를 통해 비동기 통신을 사용합니다.</p>\n<p>통신을 통해 data, meta 데이터를 가져옵니다.</p>\n<p>data 를 JSONDecoder를 통해 파싱합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">URLSessionManager</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ObservableObject</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://itunes.apple.com/search?term=taylor+swift&amp;entity=song\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Invalid URL\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> meta<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token keyword\">await</span> <span class=\"token class-name\">URLSession</span><span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> url<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>meta<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> decodedResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token class-name\">JSONDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Response</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                results <span class=\"token operator\">=</span> decodedResponse<span class=\"token punctuation\">.</span>results\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Invalid data\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<h3 id=\"urlsessionview\" style=\"position:relative;\"><a href=\"#urlsessionview\" aria-label=\"urlsessionview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URLSessionView</h3>\n<p>ObservedObject URLSessionManager를 불러오고 해당 값을 List에 넣어 사용하는 모습 입니다.</p>\n<p>trackId는 id값으로 사용하기 위해 불러와 주었고,</p>\n<p>이미지는 URL 형식으로 전달되기 때문에 AsyncImage 를 사용해 주었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">URLSessionView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    \n    <span class=\"token attribute atrule\">@ObservedObject</span> <span class=\"token keyword\">var</span> urlSessionManager <span class=\"token operator\">=</span> <span class=\"token class-name\">URLSessionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token punctuation\">(</span>urlSessionManager<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">.</span>trackId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> item <span class=\"token keyword\">in</span>\n            \n            <span class=\"token class-name\">HStack</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">AsyncImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>artworkUrl100<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                \n                <span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Tack Name - </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">item<span class=\"token punctuation\">.</span>trackName</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">Divider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"CollectionName - </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">item<span class=\"token punctuation\">.</span>collectionName</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">Divider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Artist - </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">item<span class=\"token punctuation\">.</span>artistName</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">foregroundStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>gray<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>task <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">await</span> urlSessionManager<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>다음과 같은 결과를 볼 수 있습니다.</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/12bc018a-5717-4b39-830f-c118de352149\"> <br>\n</p>\n<p><br><br></p>\n<h2 id=\"alamofire-사용해보기\" style=\"position:relative;\"><a href=\"#alamofire-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"alamofire 사용해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Alamofire 사용해보기</h2>\n<p>다음은 URLSession의 방식과 Alamofire 방식의 차이를 보기 위해서 Alamofire로 똑같은 코드를 만들어 보겠습니다.</p>\n<p>우선 spm 설치를 진행 해 줍니다.</p>\n<p><a href=\"https://tech.kakao.com/2022/06/02/swift-package-manager/\">spm설치 관련 링크</a> 해당 링크를 참고하여 <a href=\"https://github.com/Alamofire/Alamofire\">https://github.com/Alamofire/Alamofire</a> 를 설치해 줍니다.</p>\n<p><br><br></p>\n<h3 id=\"alamofiremanager\" style=\"position:relative;\"><a href=\"#alamofiremanager\" aria-label=\"alamofiremanager permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AlamoFireManager</h3>\n<p>URLSession 때와 똑같이 ObservableObject로 사용해 주었습니다.</p>\n<p>guard let 구문을 통해 url의 유효성 검사를 진행 해 주었습니다.</p>\n<p>async await를 통해 비동기 통신을 사용합니다.</p>\n<p>AF.request 의 url 구문에는 API 통신에 필요한 url을 넣어줍니다.</p>\n<p>method는 get, post, put, delete 등의 메소드가 사용가능합니다.</p>\n<p>파라미터, 헤더를 쉽게 추가 할 수 있습니다.</p>\n<p>validate 를 통해 상태코드가 200~300 사이의 값이면 정상 값으로 간주하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">Alamofire</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AlamoFireManager</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ObservableObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"https://itunes.apple.com/search?term=taylor+swift&amp;entity=song\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Invalid URL\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token constant\">AF</span><span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>\n                   method<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// HTTP메서드 설정</span>\n                   parameters<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 파라미터 설정</span>\n                   encoding<span class=\"token punctuation\">:</span> <span class=\"token class-name\">URLEncoding</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 인코딩 타입 설정</span>\n                   headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"Content-Type\"</span></span><span class=\"token punctuation\">:</span><span class=\"token string-literal\"><span class=\"token string\">\"application/json\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"Accept\"</span></span><span class=\"token punctuation\">:</span><span class=\"token string-literal\"><span class=\"token string\">\"application/json\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 헤더 설정</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>statusCode<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token operator\">..&lt;</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 유효성 검사</span>\n        <span class=\"token comment\">// responseDecodable을 통해 UserDatas form으로 디코딩, response의 성공 여부에 따라 작업 분기</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">responseDecodable</span> <span class=\"token punctuation\">(</span>of<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> response <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">switch</span> response<span class=\"token punctuation\">.</span>result <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>results <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>results\n            <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<h3 id=\"alamofireview\" style=\"position:relative;\"><a href=\"#alamofireview\" aria-label=\"alamofireview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AlamoFireView</h3>\n<p>URLSessionView 와 마찬가지로 사용해 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">AlamoFireView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MARK: - PROPERTY</span>\n    \n    <span class=\"token attribute atrule\">@ObservedObject</span> <span class=\"token keyword\">var</span> alamofireManager <span class=\"token operator\">=</span> <span class=\"token class-name\">AlamoFireManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// MARK: - BODY</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token punctuation\">(</span>alamofireManager<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">.</span>trackId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> item <span class=\"token keyword\">in</span>\n            \n            <span class=\"token class-name\">HStack</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">AsyncImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>artworkUrl100<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                \n                <span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Tack Name - </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">item<span class=\"token punctuation\">.</span>trackName</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">Divider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"CollectionName - </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">item<span class=\"token punctuation\">.</span>collectionName</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">Divider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Artist - </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">item<span class=\"token punctuation\">.</span>artistName</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">foregroundStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>gray<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>task <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">await</span> alamofireManager<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/12bc018a-5717-4b39-830f-c118de352149\"> <br>\n</p>\n<p>결과는 URLSession과 똑같이 나오는걸 볼 수 있습니다.</p>\n<p><br><br></p>\n<h2 id=\"전체코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4%EC%BD%94%EB%93%9C\" aria-label=\"전체코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체코드</h2>\n<p>위에서 사용된 전체 코드는 Github에서 볼 수 있습니다. <a href=\"https://github.com/Hsungjin/SwiftUI-Study/tree/main/URLSessionAndAlamofire\">github-code</a></p>\n<video width=\"600\" height=\"400\" controls>\n  <source src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/89f11f2f-5616-46c0-b07b-d3b086225186\" type=\"video/mp4\">\n</video>\n<p><br><br></p>\n<h2 id=\"그래서-두개의-차이점이-뭘까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%91%90%EA%B0%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%B4-%EB%AD%98%EA%B9%8C\" aria-label=\"그래서 두개의 차이점이 뭘까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 두개의 차이점이 뭘까?</h2>\n<p>Swift의 URLSession과 Alamofire은 둘 다 네트워킹 작업을 수행하기 위한 도구로 사용됩니다. 그러나 각각의 특징과 목적이 다르며, 다음은 두 라이브러리 간의 주요 차이점입니다:</p>\n<h3 id=\"크기와-복잡성\" style=\"position:relative;\"><a href=\"#%ED%81%AC%EA%B8%B0%EC%99%80-%EB%B3%B5%EC%9E%A1%EC%84%B1\" aria-label=\"크기와 복잡성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>크기와 복잡성</h3>\n<ul>\n<li>\n<p>URLSession: Swift의 표준 라이브러리에 포함된 내장 네트워킹 라이브러리입니다. 무겁지 않고 기본적인 네트워킹 작업을 수행하는 데 사용됩니다.</p>\n</li>\n<li>\n<p>Alamofire: URLSession을 감싸고 있는 외부 라이브러리로, 좀 더 추상화된 인터페이스와 편의성을 제공합니다. 좀 더 간편하게 네트워킹 작업을 처리할 수 있도록 도와줍니다.</p>\n</li>\n</ul>\n<h3 id=\"간편성-및-가독성\" style=\"position:relative;\"><a href=\"#%EA%B0%84%ED%8E%B8%EC%84%B1-%EB%B0%8F-%EA%B0%80%EB%8F%85%EC%84%B1\" aria-label=\"간편성 및 가독성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간편성 및 가독성</h3>\n<ul>\n<li>\n<p>URLSession: 기본적인 사용법은 상대적으로 직접적이고 명시적입니다. URLSession을 사용하면 네트워크 요청 및 응답을 직접 다룰 수 있습니다.</p>\n</li>\n<li>\n<p>Alamofire: 더 간결하고 명시적인 문법을 제공하며, 코드의 가독성을 높여줍니다. Request 및 Response를 추상화하여 개발자가 더 직관적으로 코드를 작성할 수 있도록 돕습니다.</p>\n</li>\n</ul>\n<h3 id=\"기능-및-확장성\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%8A%A5-%EB%B0%8F-%ED%99%95%EC%9E%A5%EC%84%B1\" aria-label=\"기능 및 확장성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기능 및 확장성</h3>\n<ul>\n<li>URLSession: 기본적인 기능을 제공하며, 필요한 경우 직접 확장하여 사용할 수 있습니다. 하지만 추가적인 기능을 수동으로 구현해야 합니다.</li>\n<li>Alamofire: 다양한 기능을 제공하며, JSON 파싱, 업로드 및 다운로드 지원, 헤더 및 인증 관리 등을 내장하고 있습니다. 또한 플러그인 아키텍처를 통해 기능을 확장할 수 있습니다.</li>\n</ul>\n<h3 id=\"유지보수와-업데이트\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EC%99%80-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\" aria-label=\"유지보수와 업데이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유지보수와 업데이트</h3>\n<ul>\n<li>URLSession: Apple이 제공하는 정식 라이브러리이기 때문에 Swift 및 iOS 업데이트에 자연스럽게 포함됩니다.</li>\n<li>Alamofire: 외부 라이브러리이기 때문에 개발자가 직접 업데이트를 관리해야 합니다. 하지만 Alamofire는 활발하게 관리되고 업데이트되고 있으므로 최신 기능 및 보안 업데이트를 받을 수 있습니다.</li>\n</ul>\n<h3 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<p>URLSession은 기본적이고 직접적인 네트워킹 작업을 위한 것이며, Alamofire는 좀 더 편리하고 추상화된 인터페이스를 제공하여 개발자에게 더 풍부한 기능과 가독성을 제공합니다. 선택은 프로젝트의 요구사항 및 개발자의 선호도에 따라 다를 수 있습니다.</p>\n<p><br><br></p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://velog.io/@simh3077/URLSession%EA%B3%BC-Alamofire%EB%A5%BC-%EB%B9%84%EA%B5%90%ED%95%B4%EB%B3%B4%EC%9E%90.-with-SwiftUI\">URLSession과 Alamofire를 비교해보자. with SwiftUI</a></p>\n<p><a href=\"https://code-algo.tistory.com/113\">[SwiftUI] URLSession을 이용한 간단한 JSON 통신 및 데이터 파싱</a></p>\n<p><br><br></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#urlsession-%EC%9D%B4%EB%9E%80\">URLSession 이란?</a></p>\n</li>\n<li>\n<p><a href=\"#alamofire-%EB%9E%80\">Alamofire 란?</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EC%A0%95%EC%9D%98\">데이터 구조 정의</a></p>\n</li>\n<li>\n<p><a href=\"#urlsession-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\">URLSession 사용해보기</a></p>\n<ul>\n<li><a href=\"#urlsessionmanager\">URLSessionManager</a></li>\n<li><a href=\"#urlsessionview\">URLSessionView</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#alamofire-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\">Alamofire 사용해보기</a></p>\n<ul>\n<li><a href=\"#alamofiremanager\">AlamoFireManager</a></li>\n<li><a href=\"#alamofireview\">AlamoFireView</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A0%84%EC%B2%B4%EC%BD%94%EB%93%9C\">전체코드</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%91%90%EA%B0%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%B4-%EB%AD%98%EA%B9%8C\">그래서 두개의 차이점이 뭘까?</a></p>\n<ul>\n<li><a href=\"#%ED%81%AC%EA%B8%B0%EC%99%80-%EB%B3%B5%EC%9E%A1%EC%84%B1\">크기와 복잡성</a></li>\n<li><a href=\"#%EA%B0%84%ED%8E%B8%EC%84%B1-%EB%B0%8F-%EA%B0%80%EB%8F%85%EC%84%B1\">간편성 및 가독성</a></li>\n<li><a href=\"#%EA%B8%B0%EB%8A%A5-%EB%B0%8F-%ED%99%95%EC%9E%A5%EC%84%B1\">기능 및 확장성</a></li>\n<li><a href=\"#%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EC%99%80-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\">유지보수와 업데이트</a></li>\n<li><a href=\"#%EC%9A%94%EC%95%BD\">요약</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","excerpt":"URLSession 이란? Swift의 URLSession은 네트워크 작업을 수행하는 데 사용되는 API 중 하나입니다. URLSession은 URL을 통해 데이터를 가져오거나 전송하는 기능을 제공하며, 네트워크 요청 및 응답을 처리하는 데 유용합니다. URLSession은 비동기적으로 작동하며, 앱의 성능을 향상시키는 데 도움이 됩니다. URLSession은 기본적으로 세 가지 주요 작업을 수행합니다: 데이터 가져오기 (Data Fetching): 웹에서 데이터를 가져오는 데 사용됩니다. 주로 GET 요청과 함께 사용됩니다. 데이터 전송 (Data Task): 서버에 데이터를 전송하는 데 사용됩니다. 주로 POST 또는 PUT 요청과 함께 사용됩니다. 다운로드 작업 (Download Task): 파일이나 큰 데이터를 다운로드할 때 사용됩니다.  Alamofire 란? Alamofire는 Swift로 작성된 네트워킹 라이브러리로, URLSession을 기반으로 한 HTTP 요청 및…","frontmatter":{"date":"January 08, 2024","title":"URLSession 과 Alamofire 비교해서 사용하기","categories":"API","author":"황성진","emoji":"🙃"},"fields":{"slug":"/api/"}},"next":{"id":"fa56437a-a1b3-564f-ad82-ae15f7794260","html":"<!-- <p align=\"center\">\n  <img src=\"https://github.com/4T2F/ThinkBig/assets/120264964/6e0c20b0-947a-4422-81e0-b9696ee274e2\"> <br>\n  Happy 2024\n</p> -->\n<h2 id=\"naver-api-발급\" style=\"position:relative;\"><a href=\"#naver-api-%EB%B0%9C%EA%B8%89\" aria-label=\"naver api 발급 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Naver API 발급</h2>\n<p><a href=\"https://www.ncloud.com\">네이버 클라우드 사이트</a>에 접속하여 회원가입, 로그인을 합니다.</p>\n<p>로그인 후 콘솔에 들어갑니다.</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/6415d1e2-5cda-4df4-b1c9-f949a6c6208a\">\n</p>\n네이버 지도는 Products &amp; Services에서 AI-Application Service 하위의 AI·NAVER API에 포함되어 있습니다.\n<p>해당 API를 선택합니다.</p>\n<p>그 다음 API 등록 버튼을 누르고</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/51ca1cea-bf32-4544-ab2f-ebdf63341d2a\">\n</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/b3f7a140-aba4-4bfb-8439-40c1f1af178a\">\n</p>\n<p>현 예제에서는 Mobile Map 만 사용하므로 체크 하고 Bundel ID를 입력해 줍니다.</p>\n<p>이렇게 진행하면 Client ID 값을 받을 수 있습니다.</p>\n<p><br><br></p>\n<h2 id=\"키값-숨기기\" style=\"position:relative;\"><a href=\"#%ED%82%A4%EA%B0%92-%EC%88%A8%EA%B8%B0%EA%B8%B0\" aria-label=\"키값 숨기기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>키값 숨기기</h2>\n<p>보통 로컬환경에서 작업하면 크게 문제가 없지만 깃허브와 같은 환경에 올려 작업하면 키값이 노출되는 문제가 생깁니다.</p>\n<p>이것을 방지해주기 위해서는 다음과 같이</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/3214d69e-ce00-439f-a3f1-607e25f9cbbc\">\n</p>\n<p>config파일을 만들어 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Config.xcconfig 파일 내부</span>\n<span class=\"token class-name\">NMFClientId</span> <span class=\"token operator\">=</span> 발급받은 <span class=\"token class-name\">Naver</span> <span class=\"token class-name\">Client</span> id를 넣어줍니다</code></pre></div>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/49170565-e63e-442c-b302-4dcffeaaf228\">\n</p>\n<p>그 다음 info.plist에 다음과 같이 $(NMFClientId) 를 넣어준 다음</p>\n<p>.gitignore에 Config.xcconfig 을 추가해주면 키값 노출 없이 깃허브에 올릴수 있게 됩니다.</p>\n<p><br><br></p>\n<h2 id=\"cocoapod으로-navaermap-설치\" style=\"position:relative;\"><a href=\"#cocoapod%EC%9C%BC%EB%A1%9C-navaermap-%EC%84%A4%EC%B9%98\" aria-label=\"cocoapod으로 navaermap 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cocoapod으로 NavaerMap 설치</h2>\n<p>터미널을 통해 프로젝트 폴더로 이동합니다.</p>\n<p>다음의 명령어를 차례대로 입력합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pod init\n\nvi Podfile</code></pre></div>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/d22e6fa7-0897-4dd4-8dec-e8de6caa4d45\">\n</p>\n<p>저는 추후에 파이어베이스에서 저장된 위치값을 받아올수 있도록 하기 위해 다음과같이 Firebase도 설치하였습니다.</p>\n<p>간단하게 NavaeMap만 사용하실분은 Firebase부분 없이 pod ‘NMapsMap’ 만 사용해 주시면 됩니다.</p>\n<p>정상적인 설치가 되었으면 프로젝트 파일을 열고 import NMapsMap 가 정상적으로 작동 되는 것을 볼 수 있습니다.</p>\n<p><br><br></p>\n<h3 id=\"빌드-시-오류-사항\" style=\"position:relative;\"><a href=\"#%EB%B9%8C%EB%93%9C-%EC%8B%9C-%EC%98%A4%EB%A5%98-%EC%82%AC%ED%95%AD\" aria-label=\"빌드 시 오류 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빌드 시 오류 사항</h3>\n<p>여기서 저와같은 경우에는 빌드를 했을때</p>\n<blockquote>\n<p>Sandbox: rsync.samba(69150) deny(1) file-read-data</p>\n</blockquote>\n<p>오류가 발생했었는데 당황하지 마시고</p>\n<p>proejct - buildsetting - User Script Sandboxing 값을 No 로 변경하시면</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/5adcc22e-e6b9-44ed-9fe9-5701db2c4842\">\n</p>\n<p><br><br></p>\n<h2 id=\"위치-권한-설정\" style=\"position:relative;\"><a href=\"#%EC%9C%84%EC%B9%98-%EA%B6%8C%ED%95%9C-%EC%84%A4%EC%A0%95\" aria-label=\"위치 권한 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>위치 권한 설정</h2>\n<p>iOS는 앱이 사용되는 동안 ‘나의 위치 정보를 제공하겠는가?‘에 대한 <strong>세부적인 통제권을 사용자가 소유하고</strong> 있습니다. 따라서 개발자는 다양한 상황에 대한 권한을 사용자에게 요청해야 하고, 사용자가 이를 <strong>허용했을 때 비로소 그 정보에 접근</strong>할 수 있습니다.</p>\n<ul>\n<li>\n<p><strong>Privacy - Location When <em>In Use</em> Usage Description (iOS 11 이상)</strong></p>\n<p>→ 앱이 <em>포그라운드에서 실행 중일 때만</em> 위치 정보에 엑세스</p>\n</li>\n<li>\n<p><strong>Privacy - Location <em>Always</em> and When <em>In Use</em> Usage Description (iOS 11 이상)</strong></p>\n<p>→ 앱이 <em>백그라운드에서 실행</em>되는 동안 위치 정보에 엑세스</p>\n</li>\n<li>\n<p><strong>Privacy - Location Always Usage Description (iOS 11 이전, deprecated)</strong></p>\n<p>→ 앱이 <em>백그라운드</em>에서 위치 정보에 엑세스 하고, iOS 11이전의 대상에 배포하는 경우!</p>\n</li>\n<li>\n<p><strong>Privacy - Location Temporary Usage <em>Description</em> Dictionary</strong></p>\n<p>→ 앱의 한 부분에서 사용자 위치에 대한 임시 엑세스를 요청하는 <em>이유</em>를 설명</p>\n</li>\n<li>\n<p><strong>Privacy - Location Usage Description(mac)</strong></p>\n<p>→ macOS 앱이 사용자의 위치 정보에 엑세스하는 API를 사용하는 경우에만 필요</p>\n</li>\n<li>\n<p><strong>Privacy - Location Default <em>Accuracy</em> Reduced (iOS 14 이상)</strong></p>\n<p>→ <em>위치 정확도</em>에 대한 <strong>앱의 기본 동작</strong>을 설정하려면 정보 속성 목록에 이 키를 포함할 수 있음</p>\n</li>\n</ul>\n<p>이렇게 다양한 권한 설정이 있는데 주로 사용하는 내용은</p>\n<p><strong>Privacy - Location Default Accuracy Reduced</strong></p>\n<p><strong>Privacy - Location Always Usage Description</strong></p>\n<p><strong>Privacy - Location Always and When In Use Usage Description</strong></p>\n<p>이렇게 3가지가 주로 사용된다고 합니다.</p>\n<p>이 3가지를 Info.plist를 통해 사용해 주시면 됩니다.</p>\n<p>아래는 Info.plist 의 소스 코드 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">plist</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//Apple//DTD PLIST 1.0//EN\"</span> <span class=\"token string\">\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plist</span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dict</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>key</span><span class=\"token punctuation\">></span></span>NSLocationDefaultAccuracyReduced<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>key</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>true</span><span class=\"token punctuation\">/></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>key</span><span class=\"token punctuation\">></span></span>NSLocationAlwaysUsageDescription<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>key</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>key</span><span class=\"token punctuation\">></span></span>NSLocationAlwaysAndWhenInUseUsageDescription<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>key</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>key</span><span class=\"token punctuation\">></span></span>NMFCliendId<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>key</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dict</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plist</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><br><br></p>\n<h2 id=\"navermap-사용하기\" style=\"position:relative;\"><a href=\"#navermap-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"navermap 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NaverMap 사용하기</h2>\n<p>지금까지 따라오셨으면 NaverMap을 사용하기 위한 기본적인 준비는 완료 되었습니다.</p>\n<p><a href=\"https://navermaps.github.io/ios-map-sdk/guide-ko/0.html\">네이버 공식문서</a> 공식문서를 보시면 어떤 값을 넣어 사용하는지 이해가 더 잘될거라고 생각됩니다.</p>\n<p><br><br></p>\n<h3 id=\"contentviewswift\" style=\"position:relative;\"><a href=\"#contentviewswift\" aria-label=\"contentviewswift permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ContentView.swift</h3>\n<p>ContentView 에서 NaverMap 서브 뷰를 호출해서 사용합니다.</p>\n<p>onAppear 부분은 앱이 처음 실행되었을때 위치정보 동의를 얻기위한 함수를 호출하는 부분입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@StateObject</span> <span class=\"token keyword\">var</span> coordinator<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Coordinator</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Coordinator</span><span class=\"token punctuation\">.</span>shared\n    \n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">NaverMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">ignoresSafeArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>all<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>onAppear <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Coordinator</span><span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">checkIfLocationServiceIsEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token other-directive property\">#Preview</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<h3 id=\"mapviewswift\" style=\"position:relative;\"><a href=\"#mapviewswift\" aria-label=\"mapviewswift permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MapView.swift</h3>\n<p>기본적으로 NaverMap은 UIkit 기반이므로 SwiftUI에서 사용하기 위해서는 UIViewRepresentable 를 사용해야 됩니다.</p>\n<p>Coordinator는 SwiftUI-UIKit간의 브릿지 역할을 하는 녀석 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">NMapsMap</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">NaverMap</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIViewRepresentable</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeCoordinator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Coordinator</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Coordinator</span><span class=\"token punctuation\">.</span>shared\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeUIView</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">NMFNaverMapView</span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token punctuation\">.</span>coordinator<span class=\"token punctuation\">.</span><span class=\"token function\">getNaverMapView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">updateUIView</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> uiView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NMFNaverMapView</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Coordinator의 경우 UIKit -> SwiftUI로의 데이터 전달이</p>\n<p>Coordinator라고 해서 새로운 개념 같지만, 사실상 “delegate”의 역할을 한다고 봐도 무방합니다.</p>\n<p>Naver Map에 필요한 Delegate를 사용하기 위해 Coordinator를 사용하려고 합니다.</p>\n<p>makeCoordinator() 함수는 말그대로 Cooridnator를 만드는 함수고,\n코디네이터 클래스는 UIView -> SwiftUI로의 브릿지 역할을 하는 delegate라고 보면 됩니다.</p>\n<p><br><br></p>\n<h3 id=\"coordinatorswift\" style=\"position:relative;\"><a href=\"#coordinatorswift\" aria-label=\"coordinatorswift permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Coordinator.swift</h3>\n<p>각자 코드에 주석을 사용해서 정리 했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">UIKit</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">NMapsMap</span>\n\n<span class=\"token comment\">// - NMFMapViewCameraDelegate 카메라 이동에 필요한 델리게이트,</span>\n<span class=\"token comment\">// - NMFMapViewTouchDelegate 맵 터치할 때 필요한 델리게이트,</span>\n<span class=\"token comment\">// - CLLocationManagerDelegate 위치 관련해서 필요한 델리게이트</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Coordinator</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSObject</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObservableObject</span><span class=\"token punctuation\">,</span>\n                         <span class=\"token class-name\">NMFMapViewCameraDelegate</span><span class=\"token punctuation\">,</span>\n                         <span class=\"token class-name\">NMFMapViewTouchDelegate</span><span class=\"token punctuation\">,</span>\n                         <span class=\"token class-name\">CLLocationManagerDelegate</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> shared <span class=\"token operator\">=</span> <span class=\"token class-name\">Coordinator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> coord<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> userLocation<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">var</span> locationManager<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CLLocationManager</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">let</span> startInfoWindow <span class=\"token operator\">=</span> <span class=\"token class-name\">NMFInfoWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token class-name\">NMFNaverMapView</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        view<span class=\"token punctuation\">.</span>mapView<span class=\"token punctuation\">.</span>positionMode <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>direction\n        view<span class=\"token punctuation\">.</span>mapView<span class=\"token punctuation\">.</span>isNightModeEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        \n        view<span class=\"token punctuation\">.</span>mapView<span class=\"token punctuation\">.</span>zoomLevel <span class=\"token operator\">=</span> <span class=\"token number\">15</span> <span class=\"token comment\">// 기본 맵이 표시될때 줌 레벨</span>\n        view<span class=\"token punctuation\">.</span>mapView<span class=\"token punctuation\">.</span>minZoomLevel <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 최소 줌 레벨</span>\n        view<span class=\"token punctuation\">.</span>mapView<span class=\"token punctuation\">.</span>maxZoomLevel <span class=\"token operator\">=</span> <span class=\"token number\">17</span> <span class=\"token comment\">// 최대 줌 레벨</span>\n        \n        view<span class=\"token punctuation\">.</span>showLocationButton <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 현위치 버튼: 위치 추적 모드를 표현합니다. 탭하면 모드가 변경됩니다.</span>\n        view<span class=\"token punctuation\">.</span>showZoomControls <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 줌 버튼: 탭하면 지도의 줌 레벨을 1씩 증가 또는 감소합니다.</span>\n        view<span class=\"token punctuation\">.</span>showCompass <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">//  나침반 : 카메라의 회전 및 틸트 상태를 표현합니다. 탭하면 카메라의 헤딩과 틸트가 0으로 초기화됩니다. 헤딩과 틸트가 0이 되면 자동으로 사라집니다</span>\n        view<span class=\"token punctuation\">.</span>showScaleBar <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 스케일 바 : 지도의 축척을 표현합니다. 지도를 조작하는 기능은 없습니다.</span>\n        \n        view<span class=\"token punctuation\">.</span>mapView<span class=\"token punctuation\">.</span><span class=\"token function\">addCameraDelegate</span><span class=\"token punctuation\">(</span>delegate<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n        view<span class=\"token punctuation\">.</span>mapView<span class=\"token punctuation\">.</span>touchDelegate <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span>\n        \n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">mapView</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> mapView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NMFMapView</span><span class=\"token punctuation\">,</span> cameraWillChangeByReason reason<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> animated<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 카메라 이동이 시작되기 전 호출되는 함수</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">mapView</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> mapView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NMFMapView</span><span class=\"token punctuation\">,</span> cameraIsChangingByReason reason<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 카메라의 위치가 변경되면 호출되는 함수</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// MARK: - 위치 정보 동의 확인</span>\n    \n    <span class=\"token comment\">/*\n     ContetView 에서 .onAppear 에서 위치 정보 제공을 동의 했는지 확인하는 함수를 호출한다.\n     위치 정보 제공 동의 순서\n     1. MapView에서 .onAppear에서 checkIfLocationServiceIsEnabled() 호출\n     2. checkIfLocationServiceIsEnabled() 함수 안에서 locationServicesEnabled() 값이 true인지 체크\n     3. true일 경우(동의한 경우), checkLocationAuthorization() 호출\n     4. case .authorizedAlways(항상 허용), .authorizedWhenInUse(앱 사용중에만 허용) 일 경우에만 fetchUserLocation() 호출\n     */</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">checkLocationAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> locationManager <span class=\"token operator\">=</span> locationManager <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">switch</span> locationManager<span class=\"token punctuation\">.</span>authorizationStatus <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>notDetermined<span class=\"token punctuation\">:</span>\n            locationManager<span class=\"token punctuation\">.</span><span class=\"token function\">requestWhenInUseAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>restricted<span class=\"token punctuation\">:</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"위치 정보 접근이 제한되었습니다.\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>denied<span class=\"token punctuation\">:</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"위치 정보 접근을 거절했습니다. 설정에 가서 변경하세요.\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>authorizedAlways<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>authorizedWhenInUse<span class=\"token punctuation\">:</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Success\"</span></span><span class=\"token punctuation\">)</span>\n            \n            coord <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span>locationManager<span class=\"token punctuation\">.</span>location<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>coordinate<span class=\"token punctuation\">.</span>latitude <span class=\"token operator\">??</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span>locationManager<span class=\"token punctuation\">.</span>location<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>coordinate<span class=\"token punctuation\">.</span>longitude <span class=\"token operator\">??</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            userLocation <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span>locationManager<span class=\"token punctuation\">.</span>location<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>coordinate<span class=\"token punctuation\">.</span>latitude <span class=\"token operator\">??</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span>locationManager<span class=\"token punctuation\">.</span>location<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>coordinate<span class=\"token punctuation\">.</span>longitude <span class=\"token operator\">??</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token function\">fetchUserLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            \n        <span class=\"token attribute atrule\">@unknown</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">checkIfLocationServiceIsEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">DispatchQueue</span><span class=\"token punctuation\">.</span><span class=\"token function\">global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token class-name\">CLLocationManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">locationServicesEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">DispatchQueue</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>locationManager <span class=\"token operator\">=</span> <span class=\"token class-name\">CLLocationManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>locationManager<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>delegate <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span>\n                    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkLocationAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Show an alert letting them know this is off and to go turn i on\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// MARK: - NMFMapView에서 제공하는 locationOverlay를 현재 위치로 설정</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">fetchUserLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> locationManager <span class=\"token operator\">=</span> locationManager <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> lat <span class=\"token operator\">=</span> locationManager<span class=\"token punctuation\">.</span>location<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>coordinate<span class=\"token punctuation\">.</span>latitude\n            <span class=\"token keyword\">let</span> lng <span class=\"token operator\">=</span> locationManager<span class=\"token punctuation\">.</span>location<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>coordinate<span class=\"token punctuation\">.</span>longitude\n            <span class=\"token keyword\">let</span> cameraUpdate <span class=\"token operator\">=</span> <span class=\"token class-name\">NMFCameraUpdate</span><span class=\"token punctuation\">(</span>scrollTo<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NMGLatLng</span><span class=\"token punctuation\">(</span>lat<span class=\"token punctuation\">:</span> lat <span class=\"token operator\">??</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> lng<span class=\"token punctuation\">:</span> lng <span class=\"token operator\">??</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> zoomTo<span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n            cameraUpdate<span class=\"token punctuation\">.</span>animation <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>easeIn\n            cameraUpdate<span class=\"token punctuation\">.</span>animationDuration <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            \n            <span class=\"token keyword\">let</span> locationOverlay <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>mapView<span class=\"token punctuation\">.</span>locationOverlay\n            locationOverlay<span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> <span class=\"token class-name\">NMGLatLng</span><span class=\"token punctuation\">(</span>lat<span class=\"token punctuation\">:</span> lat <span class=\"token operator\">??</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> lng<span class=\"token punctuation\">:</span> lng <span class=\"token operator\">??</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n            locationOverlay<span class=\"token punctuation\">.</span>hidden <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n            \n            locationOverlay<span class=\"token punctuation\">.</span>icon <span class=\"token operator\">=</span> <span class=\"token class-name\">NMFOverlayImage</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"location_overlay_icon\"</span></span><span class=\"token punctuation\">)</span>\n            locationOverlay<span class=\"token punctuation\">.</span>iconWidth <span class=\"token operator\">=</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NMF_LOCATION_OVERLAY_SIZE_AUTO</span><span class=\"token punctuation\">)</span>\n            locationOverlay<span class=\"token punctuation\">.</span>iconHeight <span class=\"token operator\">=</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NMF_LOCATION_OVERLAY_SIZE_AUTO</span><span class=\"token punctuation\">)</span>\n            locationOverlay<span class=\"token punctuation\">.</span>anchor <span class=\"token operator\">=</span> <span class=\"token class-name\">CGPoint</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            \n            view<span class=\"token punctuation\">.</span>mapView<span class=\"token punctuation\">.</span><span class=\"token function\">moveCamera</span><span class=\"token punctuation\">(</span>cameraUpdate<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">getNaverMapView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">NMFNaverMapView</span> <span class=\"token punctuation\">{</span>\n        view\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 마커 부분의 lat lng를 init 부분에 호출해서 사용하면 바로 사용가능하지만</span>\n    <span class=\"token comment\">// 파이어베이스 연동의 문제를 생각해서 받아오도록 만들었습니다.</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">setMarker</span><span class=\"token punctuation\">(</span>lat <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> lng<span class=\"token punctuation\">:</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> marker <span class=\"token operator\">=</span> <span class=\"token class-name\">NMFMarker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        marker<span class=\"token punctuation\">.</span>iconImage <span class=\"token operator\">=</span> <span class=\"token constant\">NMF_MARKER_IMAGE_PINK</span>\n        marker<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> <span class=\"token class-name\">NMGLatLng</span><span class=\"token punctuation\">(</span>lat<span class=\"token punctuation\">:</span> lat<span class=\"token punctuation\">,</span> lng<span class=\"token punctuation\">:</span> lng<span class=\"token punctuation\">)</span>\n        marker<span class=\"token punctuation\">.</span>mapView <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>mapView\n        \n        <span class=\"token keyword\">let</span> infoWindow <span class=\"token operator\">=</span> <span class=\"token class-name\">NMFInfoWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> dataSource <span class=\"token operator\">=</span> <span class=\"token class-name\">NMFInfoWindowDefaultTextSource</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        dataSource<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"서울특별시청\"</span></span>\n        infoWindow<span class=\"token punctuation\">.</span>dataSource <span class=\"token operator\">=</span> dataSource\n        infoWindow<span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> marker<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><br><br></p>\n<h2 id=\"firebase와의-연동\" style=\"position:relative;\"><a href=\"#firebase%EC%99%80%EC%9D%98-%EC%97%B0%EB%8F%99\" aria-label=\"firebase와의 연동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Firebase와의 연동</h2>\n<p><a href=\"https://dev-workplace.tistory.com/9\">Firebase 연동방법</a> 다음 블로그를 참고해서 Firebase를 연동해 주어야 됩니다!</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/638d4c3d-144e-421a-850c-83a2214e0f9a\">\n</p>\n<p>제가 사용한 데이터베이스의 구조 입니다.</p>\n<p>코드를 통해 let, lng 값을 불러와 사용합니다.</p>\n<p><br><br></p>\n<h3 id=\"contentviewswift-1\" style=\"position:relative;\"><a href=\"#contentviewswift-1\" aria-label=\"contentviewswift 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ContentView.swift</h3>\n<p>파이어 베이스를 사용해서 위도 경도 값을 불러오는데 비동기로 코드를 작성해서 값이 불러와진 상태에서 작업할 수 있도록 수정했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@StateObject</span> <span class=\"token keyword\">var</span> coordinator<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Coordinator</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Coordinator</span><span class=\"token punctuation\">.</span>shared\n    <span class=\"token attribute atrule\">@StateObject</span> <span class=\"token keyword\">var</span> firestoreManager <span class=\"token operator\">=</span> <span class=\"token class-name\">FireStoreManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ZStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">NaverMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">ignoresSafeArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>all<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">Spacer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>onAppear <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Coordinator</span><span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">checkIfLocationServiceIsEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token class-name\">Task</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">await</span> firestoreManager<span class=\"token punctuation\">.</span><span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token class-name\">Coordinator</span><span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span><span class=\"token function\">setMarker</span><span class=\"token punctuation\">(</span>lat<span class=\"token punctuation\">:</span> firestoreManager<span class=\"token punctuation\">.</span>mylat<span class=\"token punctuation\">,</span> lng<span class=\"token punctuation\">:</span> firestoreManager<span class=\"token punctuation\">.</span>mylng<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<h3 id=\"firestoremanagerswift\" style=\"position:relative;\"><a href=\"#firestoremanagerswift\" aria-label=\"firestoremanagerswift permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FireStoreManager.swift</h3>\n<p>FireStoreManager는  ObservableObject를 따르도록 만들어 줍니다.</p>\n<p>fetchData는 Firebase에 올라간 데이터에 접근해서 lat, leg를 불러오는 함수 입니다.</p>\n<p>@Published 로 사용해서 ContentView에서도 접근할수 있도록 선언해 주었고,</p>\n<p>let docRef = db.collection(“freeboard”).document(“EBvvECgiQidPmdWf0Byq”)</p>\n<p>collection에는 컬렉션 이름을 document에는 document 값을 넣어줍니다.</p>\n<p>여기서 읽어와야 될 데이터 정보가 lat, lng 이기 떄문에</p>\n<blockquote>\n<p>self.mylat = data[“lat”] as? Double ?? 0 <br>\nself.mylng = data[“lng”] as? Double ?? 0</p>\n</blockquote>\n<p>다음과 같이 사용해 주었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">Foundation</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">FirebaseFirestore</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FireStoreManager</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ObservableObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> mylat<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> mylng<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> db <span class=\"token operator\">=</span> <span class=\"token class-name\">Firestore</span><span class=\"token punctuation\">.</span><span class=\"token function\">firestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> docRef <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"freeboard\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">document</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"EBvvECgiQidPmdWf0Byq\"</span></span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> document <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token keyword\">await</span> docRef<span class=\"token punctuation\">.</span><span class=\"token function\">getDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> document<span class=\"token punctuation\">.</span>exists <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>mylat <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"lat\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">??</span> <span class=\"token number\">0</span>\n                    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>mylng <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"lng\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">??</span> <span class=\"token number\">0</span>\n                    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>mylat<span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>mylng<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Error fetching document: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">error</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<h3 id=\"navermapappswift\" style=\"position:relative;\"><a href=\"#navermapappswift\" aria-label=\"navermapappswift permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NaverMapApp.swift</h3>\n<p>Firebase 사용을 위해 Firebase에서 제공해주는 예시를 추가한 코드 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">SwiftUI</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">FirebaseCore</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AppDelegate</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSObject</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UIApplicationDelegate</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">application</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> application<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIApplication</span><span class=\"token punctuation\">,</span>\n                     didFinishLaunchingWithOptions launchOptions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">UIApplication</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">LaunchOptionsKey</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">Any</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">FirebaseApp</span><span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute atrule\">@main</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">NaverMapApp</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// register app delegate for Firebase setup</span>\n    <span class=\"token attribute atrule\">@UIApplicationDelegateAdaptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AppDelegate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> delegate\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">Scene</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">WindowGroup</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">NavigationView</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br></p>\n<p>다음과 같이 코드를 작성해서 넣어주면 파이어 베이스에서 위도 경도를 읽어들여 마커가 찍히는 것을 볼수 있습니다.</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/0fe92e7e-4cf9-4278-99b2-056abb3bf156\">\n</p>\n<p>막상 코드를 보면 이해가 되었는데 역시 글로 쓰면서 설명하는건 쉽지 않은것 같습니다.</p>\n<p><br><br></p>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p><a href=\"https://github.com/Hsungjin/SwiftUI-Study/tree/main/NaverMap/NaverMap\">깃허브 소스코드</a> 전체 소스 코드입니다.</p>\n<p><br><br></p>\n<h2 id=\"참고-블로그\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EB%B8%94%EB%A1%9C%EA%B7%B8\" aria-label=\"참고 블로그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 블로그</h2>\n<p><a href=\"https://jeong9216.tistory.com/198\">[iOS/Swift] 네이버 지도(Maps) 사용하기</a></p>\n<p><a href=\"https://dev-workplace.tistory.com/9\">SwiftUI Firebase firestore 연동 (2)</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#naver-api-%EB%B0%9C%EA%B8%89\">Naver API 발급</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%82%A4%EA%B0%92-%EC%88%A8%EA%B8%B0%EA%B8%B0\">키값 숨기기</a></p>\n</li>\n<li>\n<p><a href=\"#cocoapod%EC%9C%BC%EB%A1%9C-navaermap-%EC%84%A4%EC%B9%98\">Cocoapod으로 NavaerMap 설치</a></p>\n<ul>\n<li><a href=\"#%EB%B9%8C%EB%93%9C-%EC%8B%9C-%EC%98%A4%EB%A5%98-%EC%82%AC%ED%95%AD\">빌드 시 오류 사항</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9C%84%EC%B9%98-%EA%B6%8C%ED%95%9C-%EC%84%A4%EC%A0%95\">위치 권한 설정</a></p>\n</li>\n<li>\n<p><a href=\"#navermap-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">NaverMap 사용하기</a></p>\n<ul>\n<li><a href=\"#contentviewswift\">ContentView.swift</a></li>\n<li><a href=\"#mapviewswift\">MapView.swift</a></li>\n<li><a href=\"#coordinatorswift\">Coordinator.swift</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#firebase%EC%99%80%EC%9D%98-%EC%97%B0%EB%8F%99\">Firebase와의 연동</a></p>\n<ul>\n<li><a href=\"#contentviewswift-1\">ContentView.swift</a></li>\n<li><a href=\"#firestoremanagerswift\">FireStoreManager.swift</a></li>\n<li><a href=\"#navermapappswift\">NaverMapApp.swift</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\">전체 코드</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0-%EB%B8%94%EB%A1%9C%EA%B7%B8\">참고 블로그</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 02, 2024","title":"SwiftUI로 NaverMap 사용하기","categories":"API","author":"황성진","emoji":"🔑"},"fields":{"slug":"/NaverMap/"}},"prev":{"id":"4d14b59b-11c7-557e-aa91-50eff36c968c","html":"<h2 id=\"들어가기-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기 앞서</h2>\n<p>해당 제네릭에 대해 작성된 내용은 야곰님의 스위프트 프로그래밍: Swift 5 책의 내용을 제가 이해할 부분과 추가로 알아간 내용에 대해 정리했습니다.</p>\n<h2 id=\"generic에-이란\" style=\"position:relative;\"><a href=\"#generic%EC%97%90-%EC%9D%B4%EB%9E%80\" aria-label=\"generic에 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic에 이란?</h2>\n<p>Swift에서 제공하는 강력한 기능 중 하나로 제네릭을 이용해 코드를 구현하면 어떤 타입에도 유연하게 대응할 수 있습니다.</p>\n<p>또한 제네릭으로 구현한 기능과 타입은 재사용하기도 쉽고, 코드의 중복을 줄 일 수 있습니다.</p>\n<p><strong>야곰님의 책에 언급된 내용에 따르면 수많은 라이브러리에서 제네릭을 채택하고있다고 합니다!</strong></p>\n<p>제네릭은 기본적으로 타입 또는 메서드의 이름 뒤의 홀화살괄호 기호 &#x3C;> 사이에 제네릭을 위한 타입 매개 변수를 써주어 제네릭을 사용할 것임을 표시합니다.</p>\n<blockquote>\n<p>제네릭을 사용하고자 하는 타입 이름 &#x3C;타입 매개변수> <br>\n제네릭을 사용하고자 하는 함수 이름 &#x3C;타입 매개변수> (함수 매개변수…)</p>\n</blockquote>\n<p><br><br></p>\n<h2 id=\"generic-사용해보기\" style=\"position:relative;\"><a href=\"#generic-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"generic 사용해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic 사용해보기</h2>\n<p>제네릭의 기본적인 사용 방법을 코드 예시와 함께 살펴보겠습니다.</p>\n<h3 id=\"전위-연산자\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%9C%84-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"전위 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전위 연산자</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 연산자를 구현하기 위해 미리 선언</span>\n<span class=\"token keyword\">prefix</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">**</span>\n\n<span class=\"token comment\">// 제곱을 수행하는 연산자를 정의</span>\n<span class=\"token keyword\">prefix</span> <span class=\"token keyword\">func</span> <span class=\"token operator\">**</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">*</span> value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> minusFive<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span>\n<span class=\"token keyword\">let</span> sqrtMinusFive<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">**</span>minusFive\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sqrtMinusFive<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 25</span>\n</code></pre></div>\n<p><br><br></p>\n<p>위의 코드와 같이 일반적인 방법으로 구현했을때는 Int 타입에서만 사용자 정의 연산자를 사용할 수 있습니다. UInt 타입에서 Int 타입에 구현해준 사용자 정의 연산자를 사용하지 못합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 연산자를 구현하기 위해 미리 선언</span>\n<span class=\"token keyword\">prefix</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">**</span>\n\n<span class=\"token comment\">// 제곱을 수행하는 연산자를 정의</span>\n<span class=\"token keyword\">prefix</span> <span class=\"token keyword\">func</span> <span class=\"token operator\">**</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UInt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">UInt</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">*</span> value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token class-name\">Five</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">UInt</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">let</span> sqrtFive<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UInt</span> <span class=\"token operator\">=</span> <span class=\"token operator\">**</span><span class=\"token class-name\">Five</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sqrtFive<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 25</span>\n</code></pre></div>\n<p><br><br></p>\n<p>UInt 타입으로 사용하기 위해선 다음과 같이 코드를 전체적으로 수정해 줘야하는 번거로움이 생깁니다.</p>\n<p>따라서 제네릭을 사용하면 다음과 같이 코드의 수정 없이 사용 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 연산자를 구현하기 위해 미리 선언</span>\n<span class=\"token keyword\">prefix</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">**</span>\n\n<span class=\"token comment\">// BinaryInteger - 정수 타입 프로토콜</span>\n<span class=\"token comment\">// 프로토콜이 해당값이면 연산을 수행</span>\n<span class=\"token keyword\">prefix</span> <span class=\"token keyword\">func</span> <span class=\"token operator\">**</span> <span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">BinaryInteger</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">*</span> value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> minusFive<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span>\n<span class=\"token keyword\">let</span> five<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UInt</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token keyword\">let</span> sqrtMinus<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">**</span>minusFive\n<span class=\"token keyword\">let</span> sqrtFive<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UInt</span> <span class=\"token operator\">=</span> <span class=\"token operator\">**</span>five\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sqrtMinus<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 25</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sqrtFive<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 25</span>\n</code></pre></div>\n<p><br><br></p>\n<p>위의 코드는 이전에 구현한 전위 연산자에 대해 제네릭으로 방식을 변환했습니다.</p>\n<p>프로토콜과 제네릭이라는 스위프트의 훌륭한 기능을 조합하여 정수타입 프로토콜(BinaryInteger) 일 경우 해당 연산자를 사용할 수 있도록 구현하였습니다.</p>\n<p><br><br></p>\n<h3 id=\"두개의-값을-바꿔주는-함수\" style=\"position:relative;\"><a href=\"#%EB%91%90%EA%B0%9C%EC%9D%98-%EA%B0%92%EC%9D%84-%EB%B0%94%EA%BF%94%EC%A3%BC%EB%8A%94-%ED%95%A8%EC%88%98\" aria-label=\"두개의 값을 바꿔주는 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두개의 값을 바꿔주는 함수</h3>\n<p>다음은 제네릭을 사용했을때와 사용하지 않았을때의 형변환 함수에 대해 코드를 통해 알아보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">swapToInts</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> temp<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> a\n    a <span class=\"token operator\">=</span> b\n    b <span class=\"token operator\">=</span> temp\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> numberOne<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">var</span> numberTwo<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n<span class=\"token function\">swapToInts</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>numberOne<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>numberTwo<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">numberOne</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">numberTwo</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10 5</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">swapToStrings</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> temp<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> a\n    a <span class=\"token operator\">=</span> b\n    b <span class=\"token operator\">=</span> temp\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> stringOne<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span>\n<span class=\"token keyword\">var</span> stringTwo<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span>\n\n<span class=\"token function\">swapToStrings</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>stringOne<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>stringTwo<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">stringOne</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">stringTwo</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// B A</span>\n</code></pre></div>\n<p>위의 코드들은 평소에 우리가 자주 접하는 방식으로 만들어진 변수 두개의 값을 변경하는 함수 입니다.</p>\n<p>이것을 제네릭 형식으로 바꿔보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">swapTwoValues</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> temp<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">=</span> a\n    a <span class=\"token operator\">=</span> b\n    b <span class=\"token operator\">=</span> a\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">swapTwoValues</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>numberOne<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>numberTwo<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10 5</span>\n<span class=\"token function\">swapTwoValues</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>stringOne<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>stringTwo<span class=\"token punctuation\">)</span> <span class=\"token comment\">// B A</span>\n</code></pre></div>\n<p>다음과 같이 변경해주면 T에 Int 타입이 들어와도, String 타입이 들어와도 값을 오류 없이 변경해 줄 수 있습니다.</p>\n<h3 id=\"what-is-t\" style=\"position:relative;\"><a href=\"#what-is-t\" aria-label=\"what is t permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is T?</h3>\n<p>여기서 T는 플레이스 홀더라고 불립니다.</p>\n<p>T는 타입의 종류를 알려주지 않았지만 호출되는 순간 타입이 결정되면서 Int 타입의 변수가 전달 되었다면 Int 가 되고, String 타입의 변수가 전달되었다면 String 타입이 됩니다.</p>\n<h3 id=\"그림-요약\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A6%BC-%EC%9A%94%EC%95%BD\" aria-label=\"그림 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그림 요약</h3>\n<p>야곰님 책의 내용입니다.</p>\n<p>이 사진은 보고 저는 제네릭에 대해 좀 더 쉽게 이해할 수 있어 첨부하였습니다.</p>\n<p align=\"center\">\n  <img src=\"https://github.com/Hsungjin/Hsungjin.github.io/assets/120264964/70b53297-8688-40de-9b11-5a3c936f966d\">\n</p>\n<p><br><br></p>\n<h2 id=\"제네릭-타입\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85\" aria-label=\"제네릭 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭 타입</h2>\n<p>제네릭 함수에 이어 제네릭 타입을 구현하여 사용자 정의 구조체, 클래스 연거형 등 어떤 타입과도 연관되어 동작할 수 있습니다.</p>\n<p>Stack이라는 제네릭 컬렉션 타입을 통해 제네릭을 사용했을때와 사용하지 않았을때의 차이를 코드를 통해 알아보겠습니다.</p>\n<h3 id=\"일반-구조체\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98-%EA%B5%AC%EC%A1%B0%EC%B2%B4\" aria-label=\"일반 구조체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반 구조체</h3>\n<p>일반적인 방법으로 Stack을 만들어 pop과 push를 통해 배열에 값을 추가하고 삭제하는 구조체를 만들어 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">IntStack</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">push</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> integerStack<span class=\"token punctuation\">:</span> <span class=\"token class-name\">IntStack</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">IntStack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nintegerStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>integerStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3]</span>\n\nintegerStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>integerStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3,1]</span>\n\nintegerStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>integerStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3]</span>\n\nintegerStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>integerStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3,2]</span>\n</code></pre></div>\n<p><br><br></p>\n<p>다음과 같이 push 와 pop을 통해 값을 넣고 삭제하는 것을 볼 수 있습니다.</p>\n<p>이 구조체를 제네릭 타입으로 만들어 보겠습니다.</p>\n<p><br><br></p>\n<h3 id=\"제네릭-구조체\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%EA%B5%AC%EC%A1%B0%EC%B2%B4\" aria-label=\"제네릭 구조체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭 구조체</h3>\n<p>구조체를 제네릭 타입으로 만들면 아래 코드와 같이 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Element</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">push</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> item<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Element</span> <span class=\"token punctuation\">{</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> doubleStack<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ndoubleStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>doubleStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1.0]</span>\n\ndoubleStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>doubleStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1.0, 2.0]</span>\n\ndoubleStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>doubleStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1.0]</span>\n\n<span class=\"token keyword\">var</span> stringStack<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nstringStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>stringStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"A\"]</span>\n\nstringStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>stringStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"A\", \"V\"]</span>\n\nstringStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>stringStack<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"A\"]</span></code></pre></div>\n<p><br><br></p>\n<p>앞서 봤던 Stack 구조체에는 Int 대신 Element 라는 타입 매게변수를 사용했습니다.</p>\n<p>Stack 인스턴스를 생성할 때 실제로 Element 대신 어떤 타입을 사용할지 명시해주는 방법은 Stack<Type> 처럼 선언해 주면 됩니다.</p>\n<p>doubleStack에서는 Stack<Double> 이라는 타입을 선언해주고 stringStack Stack<String> 이라는 타입을 선언해서 사용해 주었습니다.</p>\n<p><br><br></p>\n<h3 id=\"작성중\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EC%84%B1%EC%A4%91\" aria-label=\"작성중 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작성중…</h3>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://search.shopping.naver.com/book/catalog/32436017914?cat_id=50010920&#x26;frm=PBOKPRO&#x26;query=%EC%95%BC%EA%B3%B0+swift&#x26;NaPm=ct%3Dlrdwh4g0%7Cci%3D446939692b6f9d4926afaebf6605d9cf7846fc2c%7Ctr%3Dboknx%7Csn%3D95694%7Chk%3D9f11df0e5bfec7a9ef6daa964a90d7f11381dfaa\">스위프트 프로그래밍: Swift 5</a></p>\n<p><br><br></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\">들어가기 앞서</a></p>\n</li>\n<li>\n<p><a href=\"#generic%EC%97%90-%EC%9D%B4%EB%9E%80\">Generic에 이란?</a></p>\n</li>\n<li>\n<p><a href=\"#generic-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\">Generic 사용해보기</a></p>\n<ul>\n<li><a href=\"#%EC%A0%84%EC%9C%84-%EC%97%B0%EC%82%B0%EC%9E%90\">전위 연산자</a></li>\n<li><a href=\"#%EB%91%90%EA%B0%9C%EC%9D%98-%EA%B0%92%EC%9D%84-%EB%B0%94%EA%BF%94%EC%A3%BC%EB%8A%94-%ED%95%A8%EC%88%98\">두개의 값을 바꿔주는 함수</a></li>\n<li><a href=\"#what-is-t\">What is T?</a></li>\n<li><a href=\"#%EA%B7%B8%EB%A6%BC-%EC%9A%94%EC%95%BD\">그림 요약</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85\">제네릭 타입</a></p>\n<ul>\n<li><a href=\"#%EC%9D%BC%EB%B0%98-%EA%B5%AC%EC%A1%B0%EC%B2%B4\">일반 구조체</a></li>\n<li><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%EA%B5%AC%EC%A1%B0%EC%B2%B4\">제네릭 구조체</a></li>\n<li><a href=\"#%EC%9E%91%EC%84%B1%EC%A4%91\">작성중…</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 15, 2024","title":"Swift Generic에 대서","categories":"Swift","author":"황성진","emoji":"🙃"},"fields":{"slug":"/generic/"}},"site":{"siteMetadata":{"siteUrl":"https://hsungjin.github.io","comments":{"utterances":{"repo":"Hsungjin/Hsungjin.github.io"}}}}},"pageContext":{"slug":"/api/","nextSlug":"/NaverMap/","prevSlug":"/generic/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}